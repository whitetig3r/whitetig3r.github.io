{"version":3,"sources":["webpack:///./node_modules/node-libs-browser/node_modules/process/browser.js","webpack:///./node_modules/@firebase/app/dist/index.cjs.js","webpack:///./node_modules/@firebase/util/dist/index.cjs.js","webpack:///./node_modules/core-js/modules/es6.function.name.js","webpack:///./node_modules/firebase/app/dist/index.cjs.js","webpack:///./node_modules/@firebase/polyfill/dist/index.esm.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/@firebase/polyfill/node_modules/whatwg-fetch/fetch.js","webpack:///./node_modules/@firebase/util/node_modules/tslib/tslib.es6.js","webpack:///./node_modules/firebase/database/dist/index.esm.js","webpack:///./node_modules/@firebase/database/dist/index.cjs.js","webpack:///./node_modules/@firebase/logger/dist/index.esm.js","webpack:///./node_modules/@firebase/database/node_modules/tslib/tslib.es6.js"],"names":["cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","Object","defineProperty","value","util","__webpack_require__","contains","obj","key","hasOwnProperty","DEFAULT_ENTRY_NAME","tokenListeners","FirebaseAppImpl","options","config","firebase_","isDeleted_","services_","name_","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","options_","deepCopy","INTERNAL","getUid","getToken","Promise","resolve","addAuthTokenListener","callback","removeAuthTokenListener","filter","listener","get","checkDestroyed_","set","val","enumerable","configurable","delete","_this","then","removeApp","services","keys","forEach","serviceKey","instanceKey","all","map","service","_getService","instanceIdentifier","instanceSpecifier","undefined","factories","extendApp","bind","props","deepExtend","error","code","appErrors","create","console","log","ErrorFactory","no-app","bad-app-name","duplicate-app","app-deleted","duplicate-service","sa-not-supported","invalid-app-argument","firebase","createFirebaseNamespace","apps_","appHooks","namespace","__esModule","initializeApp","rawConfig","name_1","app","callAppHooks","apps","SDK_VERSION","registerService","createService","serviceProperties","appHook","allowMultipleInstances","getApps","serviceNamespace","appArg","_i","extendNamespace","createSubscribe","useAsService","eventName","serviceName","factoryName","useService","patchProperty","default","tslib_1","CONSTANTS","NODE_CLIENT","NODE_ADMIN","assert","assertion","message","assertionError","stringToByteArray","str","out","p","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","opt_webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Decode","target","source","constructor","Date","getTime","prop","Deferred","promise","reject","wrapCallback","catch","getUA","navigator","ERROR_NAME","captureStackTrace","FirebaseError","err","stack","errors","pattern","data","template","fullCode","replace","match","toString","slice","jsonEval","JSON","parse","decode","token","header","claims","signature","parts","split","fn","extend","objTo","objFrom","findKey","opt_this","Sha1","_super","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","__extends","compress_","buf","opt_offset","W","t","f","k","a","b","d","update","opt_length","lengthMinusBlock","n","inbuf","digest","totalBits","j","ObserverProxy","executor","onNoObservers","observers","unsubscribes","observerCount","task","finalized","next","forEachObserver","observer","close","complete","subscribe","nextOrObserver","methods","methods_1","method","implementsAnyMethods","unsub","unsubscribeOne","finalError","sendOne","errorPrefix","fnName","argumentNumber","optional","argName","base64Encode","utf8Bytes","isMobileCordova","window","test","isNodeSdk","isReactNative","patchCapture","captureFake","result","stringify","isAdmin","issuedAtTime","isValidFormat","isValidTimestamp","validSince","validUntil","now","Math","floor","clone","every","findValue","getAnyKey","getCount","rv","getValues","res","isEmpty","isNonNullObject","opt_obj","safeGet","querystring","querystringParams","params","arrayVal","encodeURIComponent","querystringDecode","async","onError","proxy","validateArgCount","minCount","maxCount","argCount","argError","validateCallback","validateContextObject","context","validateNamespace","stringLength","high","dP","FProto","Function","nameRE","ex","r","__webpack_exports__","setImmediate","global","setTimeoutFunc","TypeError","_state","_handled","_value","_deferreds","doResolve","handle","self","deferred","_immediateFn","cb","onFulfilled","onRejected","ret","newValue","finale","thisArg","_unhandledRejectionFn","Handler","done","reason","prom","arr","remaining","race","values","warn","globalNS","createCommonjsModule","_global","__g","_core","core","__e","_isObject","it","_anObject","_fails","exec","_descriptors","document","is","createElement","_domCreate","_ie8DomDefine","_toPrimitive","S","valueOf","_objectDp","O","P","Attributes","_propertyDesc","bitmap","writable","_hide","object","_has","id","px","random","_uid","_redefine","SRC","$toString","TPL","inspectSource","safe","isFunction","_ctx","that","_aFunction","$export","type","own","exp","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","IS_PROTO","IS_BIND","B","expProto","U","R","_export","_cof","_iobject","propertyIsEnumerable","_defined","_toObject","ceil","_toInteger","isNaN","min","_toLength","_isArray","arg","store","_shared","_wks","Symbol","USE_SYMBOL","SPECIES","_arraySpeciesCreate","original","C","_arrayMethods","TYPE","$create","IS_MAP","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","NO_HOLES","$this","callbackfn","index","UNSCOPABLES","ArrayProto","_addToUnscopables","$find","forced","find","$find$1","forced$1","findIndex","IS_INCLUDES","_toIobject","max","min$1","shared","_sharedKey","arrayIndexOf","el","fromIndex","_toAbsoluteIndex","IE_PROTO","_objectKeysInternal","names","_enumBugKeys","_objectKeys","_objectGops","getOwnPropertySymbols","_objectPie","$assign","assign","_objectAssign","A","K","T","aLen","getSymbols","isEnum","MATCH","_stringContext","searchString","NAME","isRegExp","MATCH$1","$startsWith","KEY","re","_failsIsRegexp","startsWith","search","repeat","count","Infinity","RangeError","_meta","META","setDesc","isExtensible","FREEZE","preventExtensions","setMeta","w","meta","NEED","fastKey","getWeak","onFreeze","def","TAG","_setToStringTag","tag","stat","_wksExt","_wksDefine","$Symbol","_objectDps","defineProperties","Properties","document$1","_html","documentElement","IE_PROTO$1","Empty","createDict","iframeDocument","iframe","style","display","appendChild","src","contentWindow","open","write","lt","_objectCreate","hiddenKeys","_objectGopn","getOwnPropertyNames","gOPN","toString$1","windowNames","_objectGopnExt","getWindowNames","gOPD","getOwnPropertyDescriptor","_objectGopd","gOPD$1","dP$1","gOPN$1","$JSON","_stringify","HIDDEN","TO_PRIMITIVE","SymbolRegistry","AllSymbols","OPSymbols","ObjectProto","USE_NATIVE","QObject","setter","findChild","setSymbolDesc","D","protoDesc","wrap","sym","_k","isSymbol","iterator","$defineProperty","$defineProperties","symbols","_enumKeys","l","$propertyIsEnumerable","E","$getOwnPropertyDescriptor","$getOwnPropertyNames","$getOwnPropertySymbols","IS_OP","$set","es6Symbols","wellKnownSymbols","for","keyFor","useSetter","useSimple","replacer","$replacer","TAG$1","ARG","tryGet","callee","_iterators","IteratorPrototype","TO_STRING","_iterCreate","Constructor","IE_PROTO$2","ObjectProto$1","_objectGpo","getPrototypeOf","ITERATOR","BUGGY","returnThis","_iterDefine","Base","DEFAULT","IS_SET","FORCED","getMethod","kind","proto","DEF_VALUES","VALUES_BUG","$native","$default","$entries","$anyNative","entries","$at","s","iterated","_t","point","_iterStep","es6_array_iterator","Arguments","ITERATOR$1","TO_STRING_TAG","ArrayValues","DOMIterables","CSSRuleList","CSSStyleDeclaration","CSSValueList","ClientRectList","DOMRectList","DOMStringList","DOMTokenList","DataTransferItemList","FileList","HTMLAllCollection","HTMLCollection","HTMLFormElement","HTMLSelectElement","MediaList","MimeTypeArray","NamedNodeMap","NodeList","PaintRequestList","Plugin","PluginArray","SVGLengthList","SVGNumberList","SVGPathSegList","SVGPointList","SVGStringList","SVGTransformList","SourceBufferList","StyleSheetList","TextTrackCueList","TextTrackList","TouchList","collections","explicit","Collection","scope","Timeout","clearFn","_id","_clearFn","setInterval","clearInterval","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","port2","script","onreadystatechange","removeChild","indexOf","addEventListener","attachEvent","fetch","support","searchParams","iterable","blob","Blob","formData","arrayBuffer","viewClasses","isDataView","DataView","isPrototypeOf","isArrayBufferView","ArrayBuffer","isView","Headers","append","normalizeName","normalizeValue","oldValue","has","items","iteratorFor","Request","body","_bodyInit","Body","Response","status","statusText","headers","url","response","redirectStatuses","redirect","location","init","request","xhr","XMLHttpRequest","onload","rawHeaders","getAllResponseHeaders","line","shift","trim","responseURL","responseText","onerror","ontimeout","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","toLowerCase","consumed","bodyUsed","fileReaderReady","reader","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","bufferClone","view","Uint8Array","byteLength","buffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","_bodyArrayBuffer","rejected","text","readAsText","chars","readArrayBufferAsText","json","upcased","mode","toUpperCase","referrer","form","decodeURIComponent","bodyInit","ok","__assign","__rest","__decorate","__param","__metadata","__awaiter","__generator","__exportStar","__values","__read","__spread","__await","__asyncGenerator","__asyncDelegator","__asyncValues","__makeTemplateObject","__importStar","__importDefault","extendStatics","setPrototypeOf","__proto__","__","decorators","desc","Reflect","decorate","paramIndex","decorator","metadataKey","metadataValue","metadata","_arguments","generator","fulfilled","step","y","g","_","label","sent","trys","ops","verb","throw","return","v","op","pop","m","o","ar","asyncIterator","q","resume","fulfill","settle","cooked","raw","mod","logger","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","sha1","sha1Bytes","buildLogMessage_","var_args","logger$1","firstLog_","enableLogging","logger_","persistent","logLevel","LogLevel","VERBOSE","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","dataSegs","substring","each","doubleToIEEE754String","ln","bits","abs","pow","LN2","round","reverse","hexByteString","hexByte","parseInt","substr","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","beingCrawled","setTimeoutNonBlocking","time","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","begin","parent","pieces","child","childPathObj","childPieces","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","ValidationPath","path","errorPrefix_","parts_","byteLength_","checkValid_","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","LONG_POLLING","RepoInfo","host","secure","webSocketOnly","persistenceKey","domain","internalHost","needsQueryParam","isCustomHost","isCacheableHost","isDemoHost","updateHost","newHost","connectionURL","connURL","pairs","toURLString","PUSH_CHARS","lastPushTime","lastRandChars","__EMPTY_NODE","MAX_NODE","parseRepoInfo","dataURL","parsedUrl","parseURL","subdomain","protocol","scheme","repoInfo","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodePath","queryParams","queryString","results","_a","segment","kv","decodeQuery","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","priority","validateFirebaseDataArg","validateFirebaseData","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateWritablePath","validateUrl","isValidRootPathString","OnDisconnect","repo_","cancel","onComplete","onDisconnectCancel","onDisconnectSet","setWithPriority","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","TransactionResult","committed","snapshot","toJSON","nextPushId","duplicateTime","timeStampChars","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","__childrenNodeConstructor","nodeFromJSON","MAX_NODE$1","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","EMPTY_NODE","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","action","exportFormat",".value","getValue",".priority","hash","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","_defaultIndexMap","PRIORITY_INDEX","PriorityIndex","aPriority","bPriority","indexCmp","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","copy","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","newIndex","sawIndexedValue","iter","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","ChildrenNode","children_","indexMap_","Default","newPriority","newIndexMap","newImmediateChild","numKeys","allIntegerKeys","toHash_1","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","endPost","MAX_NODE$2","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","MAX","setMaxNode$1","USE_HINZE","nodeFromJSON$1","node_1","jsonObj_1","childData","children_1","childrenHavePriority_1","hinzeJsonObj_1","childSet","sortedChildSet","setNodeFromJSON","__referenceConstructor","OperationType","VALUE_INDEX","ValueIndex","valueNode","PathIndex","indexPath_","extractChild","snap","aChild","bChild","DataSnapshot","node_","ref_","index_","exportVal","exists","childPathString","childPath","childRef","hasChildren","getKey","getRef","DataEvent","eventRegistration","prevName","getPath","getParent","getEventType","getEventRunner","CancelEvent","ValueEventRegistration","callback_","cancelCallback_","context_","respondsTo","createEvent","change","query","getQueryParams","getIndex","snapshotNode","eventData","ctx","cancelCB_1","cb_1","createCancelEvent","matches","hasAnyCallback","ChildEventRegistration","callbacks_","eventToCheck","cancelCB_2","cb_2","otherCount","otherKey","thisKey","Query","repo","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","getIndexStartName","getIndexEndName","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","cancelCallbackOrContext","getCancelAndContextArgs_","onValueEvent","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","removeEventCallbackForQuery","userCallback","cancelOrContext","firstCall","onceCallback","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","queryObject","getQueryObject","queryIdentifier","isEqual","sameRepo","samePath","sameQueryIdentifier","CountedSet","add","clear","SparseSnapshotTree","childKey","remember","forget","self_1","tree","forEachTree","prefixPath","func","resolveDeferredValue","serverValues","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","emptyChildrenSingleton","__referenceConstructor$1","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","children","subtree","EmptyChildren","ImmutableTree","fromObject","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","newChild","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","filtered","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","Change","oldSnap","valueChange","VALUE","childAddedChange","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","ChildChangeAccumulator","changeMap_","oldChange","oldType","getChanges","NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","getCompleteChild","getChildAfterChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","calcCompleteChild","completeServerData","nodes","calcIndexedSlice","ProcessorResult","viewCache","changes","ViewProcessor","filter_","assertIndexed","applyOperation","oldViewCache","operation","writesCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","revertUserWrite_","ackUserWrite_","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","completeNode","calcCompleteEventCache","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","changedChildren","curViewCache","writePath","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","EventGenerator","query_","generateEventsForChanges","eventCache","eventRegistrations","events","moves","generateEventsForType_","registrations","filteredChanges","compareChanges_","materializedChange","materializeSingleChange_","registration","aWrapped","bWrapped","View","initialViewCache","eventRegistrations_","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","getQuery","getCompleteServerCache","cache","loadsAllData","addEventRegistration","removeEventRegistration","cancelError","cancelEvents","path_1","maybeEvent","existing","generateEventsForChanges_","getInitialEvents","initialChanges","SyncPoint","views_","optCompleteServerCache","events_1","serverCacheComplete","eventCacheComplete","removed","hadCompleteView","hasCompleteView","viewQueryId","getQueryViews","viewForQuery","getCompleteView","viewExistsForQuery","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","addWrites","updates","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","writeId","visible","addMerge","getWrite","record","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layerTree_","layeredCache","subMerge","completeServerChildren","topLevelSet","merge_1","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap_","queryToTagMap_","applyUserOverwrite","newData","applyOperationToSyncPoints_","applyUserMerge","changeTree","affectedTree_1","applyServerOverwrite","applyServerMerge","applyListenComplete","applyTaggedQueryOverwrite","queryKey","queryKeyForTag_","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedQueryMerge","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","stopListening","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","views_1","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","error$$1","errorForServerCode","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","SnapshotHolder","rootNode_","updateSnapshot","newSnapshotNode","AuthTokenProvider","app_","forceRefresh","addTokenChangeListener","removeTokenChangeListener","notifyForInvalidToken","errorMessage","StatsCollection","counters_","incrementCounter","amount","StatsManager","getCollection","hashString","collections_","getOrCreateReporter","creatorFunction","reporters_","StatsListener","collection_","last_","newStats","delta","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","includeStat","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventLists_","recursionDepth_","queueEvents","eventDataList","currList","eventPath","EventList","raiseEventsAtPath","raiseQueuedEventsMatchingPredicate_","raiseEventsForChangedPath","changedPath","sentAll","eventList","raise","events_","eventFn","EventEmitter","allowedEvents_","listeners_","trigger","validateEventType_","getInitialEvent","et","VisibilityMonitor","hidden","visibilityChange","visible_","getInstance","OnlineMonitor","online_","currentlyOnline","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","_loop_1","toProcess","this_1","_loop_2","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","BrowserPollConnection","connId","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called_1","wrappedFn_1","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","password","sendNewPolls","pN","urlParams","start","uniqueCallbackIdentifier","href","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","dframe","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","iframeContents","contentDocument","alive","innerHTML","myID","disconn","myPW","theURL","nodeRestRequest","newRequest_","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","serial","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript_1","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","User-Agent","platform","origin","mySock","onopen","onclose","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidMatch","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","mess","resetKeepAlive","remainingData","sendString_","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports_1","ALL_TRANSPORTS","transport","initialTransport","upgradeTransport","Connection","repoInfo_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","refreshAuthToken","onDisconnectPut","onDisconnectMerge","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens_","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","onVisible_","onOnline_","onResponse","curReqNum","listen","currentHashFn","listenSpec","sendListen_","req","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","token_1","authMethod","requestData","cred","onAuthRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","accessToken","interrupt","serverTimeOffset","normalizedPathString","statusCode","explanation","clientName","ReadonlyRestClient","getListenId_","listenId","thisListen","queryStringParameters","toRestQueryStringParameters","restRequest_","authTokenData","authToken","Repo","forceRestClient","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","persistentConnection_","authTokenProvider","authOverride","statsReporter_","transactions_init_","infoData_","infoSyncTree_","infoEvents","updateInfo_","serverSyncTree_","serverTime","offset","generateServerValues","isMerge","taggedChildren","taggedSnap","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","getNextWriteId_","newVal","newNodeUnresolved","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","resolvedOnDisconnectTree","resolvedTree","resolveDeferredValueTree","showDelta","longestName","reduce","previousValue","currentValue","statsIncrementCounter","metric","__database","Database","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","startName","endName","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","inRange","oldChildSnap","compareNext","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","Reference","validateRootPathString","parentPath","getRoot","databaseProp","database","transaction","transactionUpdate","applyLocally","bool","validateBoolean","startTransaction","setPriority","thennablePushRef","pushRef","TransactionStatus","TreeNode","childCount","Tree","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","valueCallback","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","abortTransactionsOnNode_","lastSent","_staticInstance","RepoManager","repos_","useRestClient_","appName","dbUrl","databaseFromApp","createRepo","deleteRepo","appRepos","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","freeze","forceLongPolling","forceWebSockets","setSecurityDebugCallback","interceptServerData","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","ConnectionTarget","TEST_ACCESS","hijackHash","newHash","oldPut","opt_onComplete","opt_hash","listens","firebaseRef","registerDatabase","instance","unused","setLogLevel","instances","defaultLogLevel","INFO","defaultLogHandler","logType","toISOString","DEBUG","info","WARN","ERROR","_logLevel","_logHandler","debug","level","inst"],"mappings":"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","file":"8-9ad35bb3080c2fa6ce9c.js","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar util = require('@firebase/util');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\n// An array to capture listeners before the true auth functions\r\n// exist\r\nvar tokenListeners = [];\r\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n */\r\nvar FirebaseAppImpl = /** @class */ (function () {\r\n    function FirebaseAppImpl(options, config, firebase_) {\r\n        this.firebase_ = firebase_;\r\n        this.isDeleted_ = false;\r\n        this.services_ = {};\r\n        this.name_ = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled || false;\r\n        this.options_ = util.deepCopy(options);\r\n        this.INTERNAL = {\r\n            getUid: function () { return null; },\r\n            getToken: function () { return Promise.resolve(null); },\r\n            addAuthTokenListener: function (callback) {\r\n                tokenListeners.push(callback);\r\n                // Make sure callback is called, asynchronously, in the absence of the auth module\r\n                setTimeout(function () { return callback(null); }, 0);\r\n            },\r\n            removeAuthTokenListener: function (callback) {\r\n                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });\r\n            }\r\n        };\r\n    }\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"automaticDataCollectionEnabled\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this._automaticDataCollectionEnabled;\r\n        },\r\n        set: function (val) {\r\n            this.checkDestroyed_();\r\n            this._automaticDataCollectionEnabled = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.name_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\r\n        get: function () {\r\n            this.checkDestroyed_();\r\n            return this.options_;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    FirebaseAppImpl.prototype.delete = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.checkDestroyed_();\r\n            resolve();\r\n        })\r\n            .then(function () {\r\n            _this.firebase_.INTERNAL.removeApp(_this.name_);\r\n            var services = [];\r\n            Object.keys(_this.services_).forEach(function (serviceKey) {\r\n                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {\r\n                    services.push(_this.services_[serviceKey][instanceKey]);\r\n                });\r\n            });\r\n            return Promise.all(services.map(function (service) {\r\n                return service.INTERNAL.delete();\r\n            }));\r\n        })\r\n            .then(function () {\r\n            _this.isDeleted_ = true;\r\n            _this.services_ = {};\r\n        });\r\n    };\r\n    /**\r\n     * Return a service instance associated with this app (creating it\r\n     * on demand), identified by the passed instanceIdentifier.\r\n     *\r\n     * NOTE: Currently storage is the only one that is leveraging this\r\n     * functionality. They invoke it by calling:\r\n     *\r\n     * ```javascript\r\n     * firebase.app().storage('STORAGE BUCKET ID')\r\n     * ```\r\n     *\r\n     * The service name is passed to this already\r\n     * @internal\r\n     */\r\n    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\r\n        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\r\n        this.checkDestroyed_();\r\n        if (!this.services_[name]) {\r\n            this.services_[name] = {};\r\n        }\r\n        if (!this.services_[name][instanceIdentifier]) {\r\n            /**\r\n             * If a custom instance has been defined (i.e. not '[DEFAULT]')\r\n             * then we will pass that instance on, otherwise we pass `null`\r\n             */\r\n            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME\r\n                ? instanceIdentifier\r\n                : undefined;\r\n            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\r\n            this.services_[name][instanceIdentifier] = service;\r\n        }\r\n        return this.services_[name][instanceIdentifier];\r\n    };\r\n    /**\r\n     * Callback function used to extend an App instance at the time\r\n     * of service instance creation.\r\n     */\r\n    FirebaseAppImpl.prototype.extendApp = function (props) {\r\n        var _this = this;\r\n        // Copy the object onto the FirebaseAppImpl prototype\r\n        util.deepExtend(this, props);\r\n        /**\r\n         * If the app has overwritten the addAuthTokenListener stub, forward\r\n         * the active token listeners on to the true fxn.\r\n         *\r\n         * TODO: This function is required due to our current module\r\n         * structure. Once we are able to rely strictly upon a single module\r\n         * implementation, this code should be refactored and Auth should\r\n         * provide these stubs and the upgrade logic\r\n         */\r\n        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {\r\n            tokenListeners.forEach(function (listener) {\r\n                _this.INTERNAL.addAuthTokenListener(listener);\r\n            });\r\n            tokenListeners = [];\r\n        }\r\n    };\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    FirebaseAppImpl.prototype.checkDestroyed_ = function () {\r\n        if (this.isDeleted_) {\r\n            error('app-deleted', { name: this.name_ });\r\n        }\r\n    };\r\n    return FirebaseAppImpl;\r\n}());\r\n// Prevent dead-code elimination of these methods w/o invalid property\r\n// copying.\r\n(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\r\n    FirebaseAppImpl.prototype.delete ||\r\n    console.log('dc');\r\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the 'firebase' global.  It may be called multiple times\r\n * in unit tests.\r\n */\r\nfunction createFirebaseNamespace() {\r\n    var apps_ = {};\r\n    var factories = {};\r\n    var appHooks = {};\r\n    // A namespace is a plain JavaScript Object.\r\n    var namespace = {\r\n        // Hack to prevent Babel from modifying the object returned\r\n        // as the firebase namespace.\r\n        __esModule: true,\r\n        initializeApp: initializeApp,\r\n        app: app,\r\n        apps: null,\r\n        Promise: Promise,\r\n        SDK_VERSION: '5.5.9',\r\n        INTERNAL: {\r\n            registerService: registerService,\r\n            createFirebaseNamespace: createFirebaseNamespace,\r\n            extendNamespace: extendNamespace,\r\n            createSubscribe: util.createSubscribe,\r\n            ErrorFactory: util.ErrorFactory,\r\n            removeApp: removeApp,\r\n            factories: factories,\r\n            useAsService: useAsService,\r\n            Promise: Promise,\r\n            deepExtend: util.deepExtend\r\n        }\r\n    };\r\n    // Inject a circular default export to allow Babel users who were previously\r\n    // using:\r\n    //\r\n    //   import firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase').default;\r\n    //\r\n    // instead of\r\n    //\r\n    //   import * as firebase from 'firebase';\r\n    //   which becomes: var firebase = require('firebase');\r\n    util.patchProperty(namespace, 'default', namespace);\r\n    // firebase.apps is a read-only getter.\r\n    Object.defineProperty(namespace, 'apps', {\r\n        get: getApps\r\n    });\r\n    /**\r\n     * Called by App.delete() - but before any services associated with the App\r\n     * are deleted.\r\n     */\r\n    function removeApp(name) {\r\n        var app = apps_[name];\r\n        callAppHooks(app, 'delete');\r\n        delete apps_[name];\r\n    }\r\n    /**\r\n     * Get the App object for a given name (or DEFAULT).\r\n     */\r\n    function app(name) {\r\n        name = name || DEFAULT_ENTRY_NAME;\r\n        if (!contains(apps_, name)) {\r\n            error('no-app', { name: name });\r\n        }\r\n        return apps_[name];\r\n    }\r\n    util.patchProperty(app, 'App', FirebaseAppImpl);\r\n    function initializeApp(options, rawConfig) {\r\n        if (rawConfig === void 0) { rawConfig = {}; }\r\n        if (typeof rawConfig !== 'object' || rawConfig === null) {\r\n            var name_1 = rawConfig;\r\n            rawConfig = { name: name_1 };\r\n        }\r\n        var config = rawConfig;\r\n        if (config.name === undefined) {\r\n            config.name = DEFAULT_ENTRY_NAME;\r\n        }\r\n        var name = config.name;\r\n        if (typeof name !== 'string' || !name) {\r\n            error('bad-app-name', { name: name + '' });\r\n        }\r\n        if (contains(apps_, name)) {\r\n            error('duplicate-app', { name: name });\r\n        }\r\n        var app = new FirebaseAppImpl(options, config, namespace);\r\n        apps_[name] = app;\r\n        callAppHooks(app, 'create');\r\n        return app;\r\n    }\r\n    /*\r\n     * Return an array of all the non-deleted FirebaseApps.\r\n     */\r\n    function getApps() {\r\n        // Make a copy so caller cannot mutate the apps list.\r\n        return Object.keys(apps_).map(function (name) { return apps_[name]; });\r\n    }\r\n    /*\r\n     * Register a Firebase Service.\r\n     *\r\n     * firebase.INTERNAL.registerService()\r\n     *\r\n     * TODO: Implement serviceProperties.\r\n     */\r\n    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\r\n        // Cannot re-register a service that already exists\r\n        if (factories[name]) {\r\n            error('duplicate-service', { name: name });\r\n        }\r\n        // Capture the service factory for later service instantiation\r\n        factories[name] = createService;\r\n        // Capture the appHook, if passed\r\n        if (appHook) {\r\n            appHooks[name] = appHook;\r\n            // Run the **new** app hook on all existing apps\r\n            getApps().forEach(function (app) {\r\n                appHook('create', app);\r\n            });\r\n        }\r\n        // The Service namespace is an accessor function ...\r\n        var serviceNamespace = function (appArg) {\r\n            if (appArg === void 0) { appArg = app(); }\r\n            if (typeof appArg[name] !== 'function') {\r\n                // Invalid argument.\r\n                // This happens in the following case: firebase.storage('gs:/')\r\n                error('invalid-app-argument', { name: name });\r\n            }\r\n            // Forward service instance lookup to the FirebaseApp.\r\n            return appArg[name]();\r\n        };\r\n        // ... and a container for service-level properties.\r\n        if (serviceProperties !== undefined) {\r\n            util.deepExtend(serviceNamespace, serviceProperties);\r\n        }\r\n        // Monkey-patch the serviceNamespace onto the firebase namespace\r\n        namespace[name] = serviceNamespace;\r\n        // Patch the FirebaseAppImpl prototype\r\n        FirebaseAppImpl.prototype[name] = function () {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            var serviceFxn = this._getService.bind(this, name);\r\n            return serviceFxn.apply(this, allowMultipleInstances ? args : []);\r\n        };\r\n        return serviceNamespace;\r\n    }\r\n    /**\r\n     * Patch the top-level firebase namespace with additional properties.\r\n     *\r\n     * firebase.INTERNAL.extendNamespace()\r\n     */\r\n    function extendNamespace(props) {\r\n        util.deepExtend(namespace, props);\r\n    }\r\n    function callAppHooks(app, eventName) {\r\n        Object.keys(factories).forEach(function (serviceName) {\r\n            // Ignore virtual services\r\n            var factoryName = useAsService(app, serviceName);\r\n            if (factoryName === null) {\r\n                return;\r\n            }\r\n            if (appHooks[factoryName]) {\r\n                appHooks[factoryName](eventName, app);\r\n            }\r\n        });\r\n    }\r\n    // Map the requested service to a registered service name\r\n    // (used to map auth to serverAuth service when needed).\r\n    function useAsService(app, name) {\r\n        if (name === 'serverAuth') {\r\n            return null;\r\n        }\r\n        var useService = name;\r\n        var options = app.options;\r\n        return useService;\r\n    }\r\n    return namespace;\r\n}\r\nfunction error(code, args) {\r\n    throw appErrors.create(code, args);\r\n}\r\n// TypeScript does not support non-string indexes!\r\n// let errors: {[code: AppError: string} = {\r\nvar errors = {\r\n    'no-app': \"No Firebase App '{$name}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    'bad-app-name': \"Illegal App name: '{$name}\",\r\n    'duplicate-app': \"Firebase App named '{$name}' already exists\",\r\n    'app-deleted': \"Firebase App named '{$name}' already deleted\",\r\n    'duplicate-service': \"Firebase service named '{$name}' already registered\",\r\n    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +\r\n        'account is only allowed in a Node.js environment. On client ' +\r\n        'devices, you should instead initialize the SDK with an api key and ' +\r\n        'auth domain',\r\n    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +\r\n        'Firebase App instance.'\r\n};\r\nvar appErrors = new util.ErrorFactory('app', 'Firebase', errors);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar firebase = createFirebaseNamespace();\n\nexports.firebase = firebase;\nexports.default = firebase;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib_1 = require('tslib');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\r\n */\r\nvar CONSTANTS = {\r\n    /**\r\n     * @define {boolean} Whether this is the client Node.js SDK.\r\n     */\r\n    NODE_CLIENT: false,\r\n    /**\r\n     * @define {boolean} Whether this is the Admin Node.js SDK.\r\n     */\r\n    NODE_ADMIN: false,\r\n    /**\r\n     * Firebase SDK Version\r\n     */\r\n    SDK_VERSION: '${JSCORE_VERSION}'\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Throws an error if the provided assertion is falsy\r\n * @param {*} assertion The assertion to be tested for falsiness\r\n * @param {!string} message The message to display if the check fails\r\n */\r\nvar assert = function (assertion, message) {\r\n    if (!assertion) {\r\n        throw assertionError(message);\r\n    }\r\n};\r\n/**\r\n * Returns an Error object suitable for throwing.\r\n * @param {string} message\r\n * @return {!Error}\r\n */\r\nvar assertionError = function (message) {\r\n    return new Error('Firebase Database (' +\r\n        CONSTANTS.SDK_VERSION +\r\n        ') INTERNAL ASSERT FAILED: ' +\r\n        message);\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar stringToByteArray = function (str) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800 &&\r\n            i + 1 < str.length &&\r\n            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {\r\n            // Surrogate Pair\r\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Turns an array of numbers into the string given by the concatenation of the\r\n * characters to which the numbers correspond.\r\n * @param {Array<number>} bytes Array of numbers representing characters.\r\n * @return {string} Stringification of the array.\r\n */\r\nvar byteArrayToString = function (bytes) {\r\n    // TODO(user): Use native implementations if/when available\r\n    var out = [], pos = 0, c = 0;\r\n    while (pos < bytes.length) {\r\n        var c1 = bytes[pos++];\r\n        if (c1 < 128) {\r\n            out[c++] = String.fromCharCode(c1);\r\n        }\r\n        else if (c1 > 191 && c1 < 224) {\r\n            var c2 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n        }\r\n        else if (c1 > 239 && c1 < 365) {\r\n            // Surrogate Pair\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            var c4 = bytes[pos++];\r\n            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\r\n                0x10000;\r\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n        }\r\n        else {\r\n            var c2 = bytes[pos++];\r\n            var c3 = bytes[pos++];\r\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n        }\r\n    }\r\n    return out.join('');\r\n};\r\n// Static lookup maps, lazily populated by init_()\r\nvar base64 = {\r\n    /**\r\n     * Maps bytes to characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMap_: null,\r\n    /**\r\n     * Maps characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMap_: null,\r\n    /**\r\n     * Maps bytes to websafe characters.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    byteToCharMapWebSafe_: null,\r\n    /**\r\n     * Maps websafe characters to bytes.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    charToByteMapWebSafe_: null,\r\n    /**\r\n     * Our default alphabet, shared between\r\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\r\n     * @type {string}\r\n     */\r\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\r\n    /**\r\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS() {\r\n        return this.ENCODED_VALS_BASE + '+/=';\r\n    },\r\n    /**\r\n     * Our websafe alphabet.\r\n     * @type {string}\r\n     */\r\n    get ENCODED_VALS_WEBSAFE() {\r\n        return this.ENCODED_VALS_BASE + '-_.';\r\n    },\r\n    /**\r\n     * Whether this browser supports the atob and btoa functions. This extension\r\n     * started at Mozilla but is now implemented by many browsers. We use the\r\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\r\n     * but still allowing the standard per-browser compilations.\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\r\n    /**\r\n     * Base64-encode an array of bytes.\r\n     *\r\n     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\r\n     *     value in [0, 255]) to encode.\r\n     * @param {boolean=} opt_webSafe Boolean indicating we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeByteArray: function (input, opt_webSafe) {\r\n        if (!Array.isArray(input)) {\r\n            throw Error('encodeByteArray takes an array as a parameter');\r\n        }\r\n        this.init_();\r\n        var byteToCharMap = opt_webSafe\r\n            ? this.byteToCharMapWebSafe_\r\n            : this.byteToCharMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length; i += 3) {\r\n            var byte1 = input[i];\r\n            var haveByte2 = i + 1 < input.length;\r\n            var byte2 = haveByte2 ? input[i + 1] : 0;\r\n            var haveByte3 = i + 2 < input.length;\r\n            var byte3 = haveByte3 ? input[i + 2] : 0;\r\n            var outByte1 = byte1 >> 2;\r\n            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\r\n            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\r\n            var outByte4 = byte3 & 0x3f;\r\n            if (!haveByte3) {\r\n                outByte4 = 64;\r\n                if (!haveByte2) {\r\n                    outByte3 = 64;\r\n                }\r\n            }\r\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\r\n        }\r\n        return output.join('');\r\n    },\r\n    /**\r\n     * Base64-encode a string.\r\n     *\r\n     * @param {string} input A string to encode.\r\n     * @param {boolean=} opt_webSafe If true, we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} The base64 encoded string.\r\n     */\r\n    encodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return btoa(input);\r\n        }\r\n        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * @param {string} input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the\r\n     *     alternative alphabet.\r\n     * @return {string} string representing the decoded value.\r\n     */\r\n    decodeString: function (input, opt_webSafe) {\r\n        // Shortcut for Mozilla browsers that implement\r\n        // a native base64 encoder in the form of \"btoa/atob\"\r\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\r\n            return atob(input);\r\n        }\r\n        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\r\n    },\r\n    /**\r\n     * Base64-decode a string.\r\n     *\r\n     * In base-64 decoding, groups of four characters are converted into three\r\n     * bytes.  If the encoder did not apply padding, the input length may not\r\n     * be a multiple of 4.\r\n     *\r\n     * In this case, the last group will have fewer than 4 characters, and\r\n     * padding will be inferred.  If the group has one or two characters, it decodes\r\n     * to one byte.  If the group has three characters, it decodes to two bytes.\r\n     *\r\n     * @param {string} input Input to decode.\r\n     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\r\n     * @return {!Array<number>} bytes representing the decoded value.\r\n     */\r\n    decodeStringToByteArray: function (input, opt_webSafe) {\r\n        this.init_();\r\n        var charToByteMap = opt_webSafe\r\n            ? this.charToByteMapWebSafe_\r\n            : this.charToByteMap_;\r\n        var output = [];\r\n        for (var i = 0; i < input.length;) {\r\n            var byte1 = charToByteMap[input.charAt(i++)];\r\n            var haveByte2 = i < input.length;\r\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\r\n            ++i;\r\n            var haveByte3 = i < input.length;\r\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            var haveByte4 = i < input.length;\r\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\r\n            ++i;\r\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\r\n                throw Error();\r\n            }\r\n            var outByte1 = (byte1 << 2) | (byte2 >> 4);\r\n            output.push(outByte1);\r\n            if (byte3 != 64) {\r\n                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\r\n                output.push(outByte2);\r\n                if (byte4 != 64) {\r\n                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\r\n                    output.push(outByte3);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    },\r\n    /**\r\n     * Lazy static initialization function. Called before\r\n     * accessing any of the static map variables.\r\n     * @private\r\n     */\r\n    init_: function () {\r\n        if (!this.byteToCharMap_) {\r\n            this.byteToCharMap_ = {};\r\n            this.charToByteMap_ = {};\r\n            this.byteToCharMapWebSafe_ = {};\r\n            this.charToByteMapWebSafe_ = {};\r\n            // We want quick mappings back and forth, so we precompute two maps.\r\n            for (var i = 0; i < this.ENCODED_VALS.length; i++) {\r\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\r\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\r\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\r\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\r\n                // Be forgiving when decoding and correctly decode both encodings.\r\n                if (i >= this.ENCODED_VALS_BASE.length) {\r\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\r\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * URL-safe base64 encoding\r\n * @param {!string} str\r\n * @return {!string}\r\n */\r\nvar base64Encode = function (str) {\r\n    var utf8Bytes = stringToByteArray(str);\r\n    return base64.encodeByteArray(utf8Bytes, true);\r\n};\r\n/**\r\n * URL-safe base64 decoding\r\n *\r\n * NOTE: DO NOT use the global atob() function - it does NOT support the\r\n * base64Url variant encoding.\r\n *\r\n * @param {string} str To be decoded\r\n * @return {?string} Decoded result, if possible\r\n */\r\nvar base64Decode = function (str) {\r\n    try {\r\n        return base64.decodeString(str, true);\r\n    }\r\n    catch (e) {\r\n        console.error('base64Decode failed: ', e);\r\n    }\r\n    return null;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Do a deep-copy of basic JavaScript Objects or Arrays.\r\n */\r\nfunction deepCopy(value) {\r\n    return deepExtend(undefined, value);\r\n}\r\n/**\r\n * Copy properties from source to target (recursively allows extension\r\n * of Objects and Arrays).  Scalar values in the target are over-written.\r\n * If target is undefined, an object of the appropriate type will be created\r\n * (and returned).\r\n *\r\n * We recursively copy all child properties of plain Objects in the source- so\r\n * that namespace- like dictionaries are merged.\r\n *\r\n * Note that the target can be a function, in which case the properties in\r\n * the source Object are copied onto it as static properties of the Function.\r\n */\r\nfunction deepExtend(target, source) {\r\n    if (!(source instanceof Object)) {\r\n        return source;\r\n    }\r\n    switch (source.constructor) {\r\n        case Date:\r\n            // Treat Dates like scalars; if the target date object had any child\r\n            // properties - they will be lost!\r\n            var dateValue = source;\r\n            return new Date(dateValue.getTime());\r\n        case Object:\r\n            if (target === undefined) {\r\n                target = {};\r\n            }\r\n            break;\r\n        case Array:\r\n            // Always copy the array source and overwrite the target.\r\n            target = [];\r\n            break;\r\n        default:\r\n            // Not a plain Object - treat it as a scalar.\r\n            return source;\r\n    }\r\n    for (var prop in source) {\r\n        if (!source.hasOwnProperty(prop)) {\r\n            continue;\r\n        }\r\n        target[prop] = deepExtend(target[prop], source[prop]);\r\n    }\r\n    return target;\r\n}\r\n// TODO: Really needed (for JSCompiler type checking)?\r\nfunction patchProperty(obj, prop, value) {\r\n    obj[prop] = value;\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Deferred = /** @class */ (function () {\r\n    function Deferred() {\r\n        var _this = this;\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this.resolve = resolve;\r\n            _this.reject = reject;\r\n        });\r\n    }\r\n    /**\r\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\r\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\r\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\r\n     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback\r\n     * @return {!function(?(Error), ?=)}\r\n     */\r\n    Deferred.prototype.wrapCallback = function (callback) {\r\n        var _this = this;\r\n        return function (error, value) {\r\n            if (error) {\r\n                _this.reject(error);\r\n            }\r\n            else {\r\n                _this.resolve(value);\r\n            }\r\n            if (typeof callback === 'function') {\r\n                // Attaching noop handler just in case developer wasn't expecting\r\n                // promises\r\n                _this.promise.catch(function () { });\r\n                // Some of our callbacks don't expect a value and our own tests\r\n                // assert that the parameter length is 1\r\n                if (callback.length === 1) {\r\n                    callback(error);\r\n                }\r\n                else {\r\n                    callback(error, value);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    return Deferred;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns navigator.userAgent string or '' if it's not defined.\r\n * @return {string} user agent string\r\n */\r\nvar getUA = function () {\r\n    if (typeof navigator !== 'undefined' &&\r\n        typeof navigator['userAgent'] === 'string') {\r\n        return navigator['userAgent'];\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n};\r\n/**\r\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\r\n *\r\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\r\n * Cordova `onDeviceReady`, which would normally wait for a callback.\r\n *\r\n * @return {boolean} isMobileCordova\r\n */\r\nvar isMobileCordova = function () {\r\n    return (typeof window !== 'undefined' &&\r\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\r\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));\r\n};\r\n/**\r\n * Detect React Native.\r\n *\r\n * @return {boolean} True if ReactNative environment is detected.\r\n */\r\nvar isReactNative = function () {\r\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\r\n};\r\n/**\r\n * Detect Node.js.\r\n *\r\n * @return {boolean} True if Node.js environment is detected.\r\n */\r\nvar isNodeSdk = function () {\r\n    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\r\n};\n\nvar ERROR_NAME = 'FirebaseError';\r\nvar captureStackTrace = Error\r\n    .captureStackTrace;\r\n// Export for faking in tests\r\nfunction patchCapture(captureFake) {\r\n    var result = captureStackTrace;\r\n    captureStackTrace = captureFake;\r\n    return result;\r\n}\r\nvar FirebaseError = /** @class */ (function () {\r\n    function FirebaseError(code, message) {\r\n        this.code = code;\r\n        this.message = message;\r\n        // We want the stack value, if implemented by Error\r\n        if (captureStackTrace) {\r\n            // Patches this.stack, omitted calls above ErrorFactory#create\r\n            captureStackTrace(this, ErrorFactory.prototype.create);\r\n        }\r\n        else {\r\n            try {\r\n                // In case of IE11, stack will be set only after error is raised.\r\n                // https://docs.microsoft.com/en-us/scripting/javascript/reference/stack-property-error-javascript\r\n                throw Error.apply(this, arguments);\r\n            }\r\n            catch (err) {\r\n                this.name = ERROR_NAME;\r\n                // Make non-enumerable getter for the property.\r\n                Object.defineProperty(this, 'stack', {\r\n                    get: function () {\r\n                        return err.stack;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return FirebaseError;\r\n}());\r\n// Back-door inheritance\r\nFirebaseError.prototype = Object.create(Error.prototype);\r\nFirebaseError.prototype.constructor = FirebaseError;\r\nFirebaseError.prototype.name = ERROR_NAME;\r\nvar ErrorFactory = /** @class */ (function () {\r\n    function ErrorFactory(service, serviceName, errors) {\r\n        this.service = service;\r\n        this.serviceName = serviceName;\r\n        this.errors = errors;\r\n        // Matches {$name}, by default.\r\n        this.pattern = /\\{\\$([^}]+)}/g;\r\n        // empty\r\n    }\r\n    ErrorFactory.prototype.create = function (code, data) {\r\n        if (data === undefined) {\r\n            data = {};\r\n        }\r\n        var template = this.errors[code];\r\n        var fullCode = this.service + '/' + code;\r\n        var message;\r\n        if (template === undefined) {\r\n            message = 'Error';\r\n        }\r\n        else {\r\n            message = template.replace(this.pattern, function (match, key) {\r\n                var value = data[key];\r\n                return value !== undefined ? value.toString() : '<' + key + '?>';\r\n            });\r\n        }\r\n        // Service: Error message (service/code).\r\n        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';\r\n        var err = new FirebaseError(fullCode, message);\r\n        // Populate the Error object with message parts for programmatic\r\n        // accesses (e.g., e.file).\r\n        for (var prop in data) {\r\n            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {\r\n                continue;\r\n            }\r\n            err[prop] = data[prop];\r\n        }\r\n        return err;\r\n    };\r\n    return ErrorFactory;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Evaluates a JSON string into a javascript object.\r\n *\r\n * @param {string} str A string containing JSON.\r\n * @return {*} The javascript object representing the specified JSON.\r\n */\r\nfunction jsonEval(str) {\r\n    return JSON.parse(str);\r\n}\r\n/**\r\n * Returns JSON representing a javascript object.\r\n * @param {*} data Javascript object to be stringified.\r\n * @return {string} The JSON contents of the object.\r\n */\r\nfunction stringify(data) {\r\n    return JSON.stringify(data);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Decodes a Firebase auth. token into constituent parts.\r\n *\r\n * Notes:\r\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {{header: *, claims: *, data: *, signature: string}}\r\n */\r\nvar decode = function (token) {\r\n    var header = {}, claims = {}, data = {}, signature = '';\r\n    try {\r\n        var parts = token.split('.');\r\n        header = jsonEval(base64Decode(parts[0]) || '');\r\n        claims = jsonEval(base64Decode(parts[1]) || '');\r\n        signature = parts[2];\r\n        data = claims['d'] || {};\r\n        delete claims['d'];\r\n    }\r\n    catch (e) { }\r\n    return {\r\n        header: header,\r\n        claims: claims,\r\n        data: data,\r\n        signature: signature\r\n    };\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\r\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidTimestamp = function (token) {\r\n    var claims = decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;\r\n    if (typeof claims === 'object') {\r\n        if (claims.hasOwnProperty('nbf')) {\r\n            validSince = claims['nbf'];\r\n        }\r\n        else if (claims.hasOwnProperty('iat')) {\r\n            validSince = claims['iat'];\r\n        }\r\n        if (claims.hasOwnProperty('exp')) {\r\n            validUntil = claims['exp'];\r\n        }\r\n        else {\r\n            // token will expire after 24h by default\r\n            validUntil = validSince + 86400;\r\n        }\r\n    }\r\n    return (now && validSince && validUntil && now >= validSince && now <= validUntil);\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\r\n *\r\n * Notes:\r\n * - May return null if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {?number}\r\n */\r\nvar issuedAtTime = function (token) {\r\n    var claims = decode(token).claims;\r\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\r\n        return claims['iat'];\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isValidFormat = function (token) {\r\n    var decoded = decode(token), claims = decoded.claims;\r\n    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\r\n};\r\n/**\r\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\r\n *\r\n * Notes:\r\n * - May return a false negative if there's no native base64 decoding support.\r\n * - Doesn't check if the token is actually valid.\r\n *\r\n * @param {?string} token\r\n * @return {boolean}\r\n */\r\nvar isAdmin = function (token) {\r\n    var claims = decode(token).claims;\r\n    return typeof claims === 'object' && claims['admin'] === true;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\r\nvar contains = function (obj, key) {\r\n    return Object.prototype.hasOwnProperty.call(obj, key);\r\n};\r\nvar safeGet = function (obj, key) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key))\r\n        return obj[key];\r\n    // else return undefined.\r\n};\r\n/**\r\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\r\n *\r\n * @param {?Object.<K,V>} obj Object to enumerate.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar forEach = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n};\r\n/**\r\n * Copies all the (own) properties from one object to another.\r\n * @param {!Object} objTo\r\n * @param {!Object} objFrom\r\n * @return {!Object} objTo\r\n */\r\nvar extend = function (objTo, objFrom) {\r\n    forEach(objFrom, function (key, value) {\r\n        objTo[key] = value;\r\n    });\r\n    return objTo;\r\n};\r\n/**\r\n * Returns a clone of the specified object.\r\n * @param {!Object} obj\r\n * @return {!Object} cloned obj.\r\n */\r\nvar clone = function (obj) {\r\n    return extend({}, obj);\r\n};\r\n/**\r\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\r\n * for functions.\r\n *\r\n * @param obj {*} A potential object.\r\n * @returns {boolean} True if it's an object.\r\n */\r\nvar isNonNullObject = function (obj) {\r\n    return typeof obj === 'object' && obj !== null;\r\n};\r\nvar isEmpty = function (obj) {\r\n    for (var key in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nvar getCount = function (obj) {\r\n    var rv = 0;\r\n    for (var key in obj) {\r\n        rv++;\r\n    }\r\n    return rv;\r\n};\r\nvar map = function (obj, f, opt_obj) {\r\n    var res = {};\r\n    for (var key in obj) {\r\n        res[key] = f.call(opt_obj, obj[key], key, obj);\r\n    }\r\n    return res;\r\n};\r\nvar findKey = function (obj, fn, opt_this) {\r\n    for (var key in obj) {\r\n        if (fn.call(opt_this, obj[key], key, obj)) {\r\n            return key;\r\n        }\r\n    }\r\n    return undefined;\r\n};\r\nvar findValue = function (obj, fn, opt_this) {\r\n    var key = findKey(obj, fn, opt_this);\r\n    return key && obj[key];\r\n};\r\nvar getAnyKey = function (obj) {\r\n    for (var key in obj) {\r\n        return key;\r\n    }\r\n};\r\nvar getValues = function (obj) {\r\n    var res = [];\r\n    var i = 0;\r\n    for (var key in obj) {\r\n        res[i++] = obj[key];\r\n    }\r\n    return res;\r\n};\r\n/**\r\n * Tests whether every key/value pair in an object pass the test implemented\r\n * by the provided function\r\n *\r\n * @param {?Object.<K,V>} obj Object to test.\r\n * @param {!function(K, V)} fn Function to call for each key and value.\r\n * @template K,V\r\n */\r\nvar every = function (obj, fn) {\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            if (!fn(key, obj[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\r\n * object (e.g. {arg: 'val', arg2: 'val2'})\r\n * Note: You must prepend it with ? when adding it to a URL.\r\n *\r\n * @param {!Object} querystringParams\r\n * @return {string}\r\n */\r\nvar querystring = function (querystringParams) {\r\n    var params = [];\r\n    forEach(querystringParams, function (key, value) {\r\n        if (Array.isArray(value)) {\r\n            value.forEach(function (arrayVal) {\r\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\r\n            });\r\n        }\r\n        else {\r\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        }\r\n    });\r\n    return params.length ? '&' + params.join('&') : '';\r\n};\r\n/**\r\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\r\n *\r\n * @param {string} querystring\r\n * @return {!Object}\r\n */\r\nvar querystringDecode = function (querystring) {\r\n    var obj = {};\r\n    var tokens = querystring.replace(/^\\?/, '').split('&');\r\n    tokens.forEach(function (token) {\r\n        if (token) {\r\n            var key = token.split('=');\r\n            obj[key[0]] = key[1];\r\n        }\r\n    });\r\n    return obj;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Copyright 2011 The Closure Library Authors. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * @fileoverview Abstract cryptographic hash interface.\r\n *\r\n * See Sha1 and Md5 for sample implementations.\r\n *\r\n */\r\n/**\r\n * Create a cryptographic hash instance.\r\n *\r\n * @constructor\r\n * @struct\r\n */\r\nvar Hash = /** @class */ (function () {\r\n    function Hash() {\r\n        /**\r\n         * The block size for the hasher.\r\n         * @type {number}\r\n         */\r\n        this.blockSize = -1;\r\n    }\r\n    return Hash;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @fileoverview SHA-1 cryptographic hash.\r\n * Variable names follow the notation in FIPS PUB 180-3:\r\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\r\n *\r\n * Usage:\r\n *   var sha1 = new sha1();\r\n *   sha1.update(bytes);\r\n *   var hash = sha1.digest();\r\n *\r\n * Performance:\r\n *   Chrome 23:   ~400 Mbit/s\r\n *   Firefox 16:  ~250 Mbit/s\r\n *\r\n */\r\n/**\r\n * SHA-1 cryptographic hash constructor.\r\n *\r\n * The properties declared here are discussed in the above algorithm document.\r\n * @constructor\r\n * @extends {Hash}\r\n * @final\r\n * @struct\r\n */\r\nvar Sha1 = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Sha1, _super);\r\n    function Sha1() {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Holds the previous values of accumulated variables a-e in the compress_\r\n         * function.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.chain_ = [];\r\n        /**\r\n         * A buffer holding the partially computed hash result.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.buf_ = [];\r\n        /**\r\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\r\n         * as the message schedule in the docs.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.W_ = [];\r\n        /**\r\n         * Contains data needed to pad messages less than 64 bytes.\r\n         * @type {!Array<number>}\r\n         * @private\r\n         */\r\n        _this.pad_ = [];\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.inbuf_ = 0;\r\n        /**\r\n         * @private {number}\r\n         */\r\n        _this.total_ = 0;\r\n        _this.blockSize = 512 / 8;\r\n        _this.pad_[0] = 128;\r\n        for (var i = 1; i < _this.blockSize; ++i) {\r\n            _this.pad_[i] = 0;\r\n        }\r\n        _this.reset();\r\n        return _this;\r\n    }\r\n    Sha1.prototype.reset = function () {\r\n        this.chain_[0] = 0x67452301;\r\n        this.chain_[1] = 0xefcdab89;\r\n        this.chain_[2] = 0x98badcfe;\r\n        this.chain_[3] = 0x10325476;\r\n        this.chain_[4] = 0xc3d2e1f0;\r\n        this.inbuf_ = 0;\r\n        this.total_ = 0;\r\n    };\r\n    /**\r\n     * Internal compress helper function.\r\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\r\n     * @param {number=} opt_offset Offset of the block in the buffer.\r\n     * @private\r\n     */\r\n    Sha1.prototype.compress_ = function (buf, opt_offset) {\r\n        if (!opt_offset) {\r\n            opt_offset = 0;\r\n        }\r\n        var W = this.W_;\r\n        // get 16 big endian words\r\n        if (typeof buf === 'string') {\r\n            for (var i = 0; i < 16; i++) {\r\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\r\n                // have a bug that turns the post-increment ++ operator into pre-increment\r\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\r\n                // correctness and which is affected by this bug, so I've removed all uses\r\n                // of post-increment ++ in which the result value is used.  We can revert\r\n                // this change once the Safari bug\r\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\r\n                // most clients have been updated.\r\n                W[i] =\r\n                    (buf.charCodeAt(opt_offset) << 24) |\r\n                        (buf.charCodeAt(opt_offset + 1) << 16) |\r\n                        (buf.charCodeAt(opt_offset + 2) << 8) |\r\n                        buf.charCodeAt(opt_offset + 3);\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < 16; i++) {\r\n                W[i] =\r\n                    (buf[opt_offset] << 24) |\r\n                        (buf[opt_offset + 1] << 16) |\r\n                        (buf[opt_offset + 2] << 8) |\r\n                        buf[opt_offset + 3];\r\n                opt_offset += 4;\r\n            }\r\n        }\r\n        // expand to 80 words\r\n        for (var i = 16; i < 80; i++) {\r\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\r\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\r\n        }\r\n        var a = this.chain_[0];\r\n        var b = this.chain_[1];\r\n        var c = this.chain_[2];\r\n        var d = this.chain_[3];\r\n        var e = this.chain_[4];\r\n        var f, k;\r\n        // TODO(user): Try to unroll this loop to speed up the computation.\r\n        for (var i = 0; i < 80; i++) {\r\n            if (i < 40) {\r\n                if (i < 20) {\r\n                    f = d ^ (b & (c ^ d));\r\n                    k = 0x5a827999;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0x6ed9eba1;\r\n                }\r\n            }\r\n            else {\r\n                if (i < 60) {\r\n                    f = (b & c) | (d & (b | c));\r\n                    k = 0x8f1bbcdc;\r\n                }\r\n                else {\r\n                    f = b ^ c ^ d;\r\n                    k = 0xca62c1d6;\r\n                }\r\n            }\r\n            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\r\n            e = d;\r\n            d = c;\r\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\r\n            b = a;\r\n            a = t;\r\n        }\r\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\r\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\r\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\r\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\r\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\r\n    };\r\n    Sha1.prototype.update = function (bytes, opt_length) {\r\n        // TODO(johnlenz): tighten the function signature and remove this check\r\n        if (bytes == null) {\r\n            return;\r\n        }\r\n        if (opt_length === undefined) {\r\n            opt_length = bytes.length;\r\n        }\r\n        var lengthMinusBlock = opt_length - this.blockSize;\r\n        var n = 0;\r\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\r\n        var buf = this.buf_;\r\n        var inbuf = this.inbuf_;\r\n        // The outer while loop should execute at most twice.\r\n        while (n < opt_length) {\r\n            // When we have no data in the block to top up, we can directly process the\r\n            // input buffer (assuming it contains sufficient data). This gives ~25%\r\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\r\n            // the data is provided in large chunks (or in multiples of 64 bytes).\r\n            if (inbuf == 0) {\r\n                while (n <= lengthMinusBlock) {\r\n                    this.compress_(bytes, n);\r\n                    n += this.blockSize;\r\n                }\r\n            }\r\n            if (typeof bytes === 'string') {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes.charCodeAt(n);\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                while (n < opt_length) {\r\n                    buf[inbuf] = bytes[n];\r\n                    ++inbuf;\r\n                    ++n;\r\n                    if (inbuf == this.blockSize) {\r\n                        this.compress_(buf);\r\n                        inbuf = 0;\r\n                        // Jump to the outer loop so we use the full-block optimization.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.inbuf_ = inbuf;\r\n        this.total_ += opt_length;\r\n    };\r\n    /** @override */\r\n    Sha1.prototype.digest = function () {\r\n        var digest = [];\r\n        var totalBits = this.total_ * 8;\r\n        // Add pad 0x80 0x00*.\r\n        if (this.inbuf_ < 56) {\r\n            this.update(this.pad_, 56 - this.inbuf_);\r\n        }\r\n        else {\r\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\r\n        }\r\n        // Add # bits.\r\n        for (var i = this.blockSize - 1; i >= 56; i--) {\r\n            this.buf_[i] = totalBits & 255;\r\n            totalBits /= 256; // Don't use bit-shifting here!\r\n        }\r\n        this.compress_(this.buf_);\r\n        var n = 0;\r\n        for (var i = 0; i < 5; i++) {\r\n            for (var j = 24; j >= 0; j -= 8) {\r\n                digest[n] = (this.chain_[i] >> j) & 255;\r\n                ++n;\r\n            }\r\n        }\r\n        return digest;\r\n    };\r\n    return Sha1;\r\n}(Hash));\n\n/**\r\n * Helper to make a Subscribe function (just like Promise helps make a\r\n * Thenable).\r\n *\r\n * @param executor Function which can make calls to a single Observer\r\n *     as a proxy.\r\n * @param onNoObservers Callback when count of Observers goes to zero.\r\n */\r\nfunction createSubscribe(executor, onNoObservers) {\r\n    var proxy = new ObserverProxy(executor, onNoObservers);\r\n    return proxy.subscribe.bind(proxy);\r\n}\r\n/**\r\n * Implement fan-out for any number of Observers attached via a subscribe\r\n * function.\r\n */\r\nvar ObserverProxy = /** @class */ (function () {\r\n    /**\r\n     * @param executor Function which can make calls to a single Observer\r\n     *     as a proxy.\r\n     * @param onNoObservers Callback when count of Observers goes to zero.\r\n     */\r\n    function ObserverProxy(executor, onNoObservers) {\r\n        var _this = this;\r\n        this.observers = [];\r\n        this.unsubscribes = [];\r\n        this.observerCount = 0;\r\n        // Micro-task scheduling by calling task.then().\r\n        this.task = Promise.resolve();\r\n        this.finalized = false;\r\n        this.onNoObservers = onNoObservers;\r\n        // Call the executor asynchronously so subscribers that are called\r\n        // synchronously after the creation of the subscribe function\r\n        // can still receive the very first value generated in the executor.\r\n        this.task\r\n            .then(function () {\r\n            executor(_this);\r\n        })\r\n            .catch(function (e) {\r\n            _this.error(e);\r\n        });\r\n    }\r\n    ObserverProxy.prototype.next = function (value) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.next(value);\r\n        });\r\n    };\r\n    ObserverProxy.prototype.error = function (error) {\r\n        this.forEachObserver(function (observer) {\r\n            observer.error(error);\r\n        });\r\n        this.close(error);\r\n    };\r\n    ObserverProxy.prototype.complete = function () {\r\n        this.forEachObserver(function (observer) {\r\n            observer.complete();\r\n        });\r\n        this.close();\r\n    };\r\n    /**\r\n     * Subscribe function that can be used to add an Observer to the fan-out list.\r\n     *\r\n     * - We require that no event is sent to a subscriber sychronously to their\r\n     *   call to subscribe().\r\n     */\r\n    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\r\n        var _this = this;\r\n        var observer;\r\n        if (nextOrObserver === undefined &&\r\n            error === undefined &&\r\n            complete === undefined) {\r\n            throw new Error('Missing Observer.');\r\n        }\r\n        // Assemble an Observer object when passed as callback functions.\r\n        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {\r\n            observer = nextOrObserver;\r\n        }\r\n        else {\r\n            observer = {\r\n                next: nextOrObserver,\r\n                error: error,\r\n                complete: complete\r\n            };\r\n        }\r\n        if (observer.next === undefined) {\r\n            observer.next = noop;\r\n        }\r\n        if (observer.error === undefined) {\r\n            observer.error = noop;\r\n        }\r\n        if (observer.complete === undefined) {\r\n            observer.complete = noop;\r\n        }\r\n        var unsub = this.unsubscribeOne.bind(this, this.observers.length);\r\n        // Attempt to subscribe to a terminated Observable - we\r\n        // just respond to the Observer with the final error or complete\r\n        // event.\r\n        if (this.finalized) {\r\n            this.task.then(function () {\r\n                try {\r\n                    if (_this.finalError) {\r\n                        observer.error(_this.finalError);\r\n                    }\r\n                    else {\r\n                        observer.complete();\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // nothing\r\n                }\r\n                return;\r\n            });\r\n        }\r\n        this.observers.push(observer);\r\n        return unsub;\r\n    };\r\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\r\n    // any unsubscribed Observer.\r\n    ObserverProxy.prototype.unsubscribeOne = function (i) {\r\n        if (this.observers === undefined || this.observers[i] === undefined) {\r\n            return;\r\n        }\r\n        delete this.observers[i];\r\n        this.observerCount -= 1;\r\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\r\n            this.onNoObservers(this);\r\n        }\r\n    };\r\n    ObserverProxy.prototype.forEachObserver = function (fn) {\r\n        if (this.finalized) {\r\n            // Already closed by previous event....just eat the additional values.\r\n            return;\r\n        }\r\n        // Since sendOne calls asynchronously - there is no chance that\r\n        // this.observers will become undefined.\r\n        for (var i = 0; i < this.observers.length; i++) {\r\n            this.sendOne(i, fn);\r\n        }\r\n    };\r\n    // Call the Observer via one of it's callback function. We are careful to\r\n    // confirm that the observe has not been unsubscribed since this asynchronous\r\n    // function had been queued.\r\n    ObserverProxy.prototype.sendOne = function (i, fn) {\r\n        var _this = this;\r\n        // Execute the callback asynchronously\r\n        this.task.then(function () {\r\n            if (_this.observers !== undefined && _this.observers[i] !== undefined) {\r\n                try {\r\n                    fn(_this.observers[i]);\r\n                }\r\n                catch (e) {\r\n                    // Ignore exceptions raised in Observers or missing methods of an\r\n                    // Observer.\r\n                    // Log error to console. b/31404806\r\n                    if (typeof console !== 'undefined' && console.error) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    ObserverProxy.prototype.close = function (err) {\r\n        var _this = this;\r\n        if (this.finalized) {\r\n            return;\r\n        }\r\n        this.finalized = true;\r\n        if (err !== undefined) {\r\n            this.finalError = err;\r\n        }\r\n        // Proxy is no longer needed - garbage collect references\r\n        this.task.then(function () {\r\n            _this.observers = undefined;\r\n            _this.onNoObservers = undefined;\r\n        });\r\n    };\r\n    return ObserverProxy;\r\n}());\r\n/** Turn synchronous function into one called asynchronously. */\r\nfunction async(fn, onError) {\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        Promise.resolve(true)\r\n            .then(function () {\r\n            fn.apply(void 0, args);\r\n        })\r\n            .catch(function (error) {\r\n            if (onError) {\r\n                onError(error);\r\n            }\r\n        });\r\n    };\r\n}\r\n/**\r\n * Return true if the object passed in implements any of the named methods.\r\n */\r\nfunction implementsAnyMethods(obj, methods) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return false;\r\n    }\r\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\r\n        var method = methods_1[_i];\r\n        if (method in obj && typeof obj[method] === 'function') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction noop() {\r\n    // do nothing\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Check to make sure the appropriate number of arguments are provided for a public function.\r\n * Throws an error if it fails.\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} minCount The minimum number of arguments to allow for the function call\r\n * @param {!number} maxCount The maximum number of argument to allow for the function call\r\n * @param {!number} argCount The actual number of arguments provided.\r\n */\r\nvar validateArgCount = function (fnName, minCount, maxCount, argCount) {\r\n    var argError;\r\n    if (argCount < minCount) {\r\n        argError = 'at least ' + minCount;\r\n    }\r\n    else if (argCount > maxCount) {\r\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\r\n    }\r\n    if (argError) {\r\n        var error = fnName +\r\n            ' failed: Was called with ' +\r\n            argCount +\r\n            (argCount === 1 ? ' argument.' : ' arguments.') +\r\n            ' Expects ' +\r\n            argError +\r\n            '.';\r\n        throw new Error(error);\r\n    }\r\n};\r\n/**\r\n * Generates a string to prefix an error message about failed argument validation\r\n *\r\n * @param {!string} fnName The function name\r\n * @param {!number} argumentNumber The index of the argument\r\n * @param {boolean} optional Whether or not the argument is optional\r\n * @return {!string} The prefix to add to the error thrown for validation.\r\n */\r\nfunction errorPrefix(fnName, argumentNumber, optional) {\r\n    var argName = '';\r\n    switch (argumentNumber) {\r\n        case 1:\r\n            argName = optional ? 'first' : 'First';\r\n            break;\r\n        case 2:\r\n            argName = optional ? 'second' : 'Second';\r\n            break;\r\n        case 3:\r\n            argName = optional ? 'third' : 'Third';\r\n            break;\r\n        case 4:\r\n            argName = optional ? 'fourth' : 'Fourth';\r\n            break;\r\n        default:\r\n            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\r\n    }\r\n    var error = fnName + ' failed: ';\r\n    error += argName + ' argument ';\r\n    return error;\r\n}\r\n/**\r\n * @param {!string} fnName\r\n * @param {!number} argumentNumber\r\n * @param {!string} namespace\r\n * @param {boolean} optional\r\n */\r\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\r\n    if (optional && !namespace)\r\n        return;\r\n    if (typeof namespace !== 'string') {\r\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid firebase namespace.');\r\n    }\r\n}\r\nfunction validateCallback(fnName, argumentNumber, callback, optional) {\r\n    if (optional && !callback)\r\n        return;\r\n    if (typeof callback !== 'function')\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid function.');\r\n}\r\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\r\n    if (optional && !context)\r\n        return;\r\n    if (typeof context !== 'object' || context === null)\r\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid context object.');\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\r\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\r\n// so it's been modified.\r\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\r\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\r\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\r\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\r\n// pair).\r\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\r\n/**\r\n * @param {string} str\r\n * @return {Array}\r\n */\r\nvar stringToByteArray$1 = function (str) {\r\n    var out = [], p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        // Is this the lead surrogate in a surrogate pair?\r\n        if (c >= 0xd800 && c <= 0xdbff) {\r\n            var high = c - 0xd800; // the high 10 bits.\r\n            i++;\r\n            assert(i < str.length, 'Surrogate pair missing trail surrogate.');\r\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\r\n            c = 0x10000 + (high << 10) + low;\r\n        }\r\n        if (c < 128) {\r\n            out[p++] = c;\r\n        }\r\n        else if (c < 2048) {\r\n            out[p++] = (c >> 6) | 192;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else if (c < 65536) {\r\n            out[p++] = (c >> 12) | 224;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n        else {\r\n            out[p++] = (c >> 18) | 240;\r\n            out[p++] = ((c >> 12) & 63) | 128;\r\n            out[p++] = ((c >> 6) & 63) | 128;\r\n            out[p++] = (c & 63) | 128;\r\n        }\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Calculate length without actually converting; useful for doing cheaper validation.\r\n * @param {string} str\r\n * @return {number}\r\n */\r\nvar stringLength = function (str) {\r\n    var p = 0;\r\n    for (var i = 0; i < str.length; i++) {\r\n        var c = str.charCodeAt(i);\r\n        if (c < 128) {\r\n            p++;\r\n        }\r\n        else if (c < 2048) {\r\n            p += 2;\r\n        }\r\n        else if (c >= 0xd800 && c <= 0xdbff) {\r\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\r\n            p += 4;\r\n            i++; // skip trail surrogate.\r\n        }\r\n        else {\r\n            p += 3;\r\n        }\r\n    }\r\n    return p;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nexports.assert = assert;\nexports.assertionError = assertionError;\nexports.base64 = base64;\nexports.base64Decode = base64Decode;\nexports.base64Encode = base64Encode;\nexports.CONSTANTS = CONSTANTS;\nexports.deepCopy = deepCopy;\nexports.deepExtend = deepExtend;\nexports.patchProperty = patchProperty;\nexports.Deferred = Deferred;\nexports.getUA = getUA;\nexports.isMobileCordova = isMobileCordova;\nexports.isNodeSdk = isNodeSdk;\nexports.isReactNative = isReactNative;\nexports.ErrorFactory = ErrorFactory;\nexports.FirebaseError = FirebaseError;\nexports.patchCapture = patchCapture;\nexports.jsonEval = jsonEval;\nexports.stringify = stringify;\nexports.decode = decode;\nexports.isAdmin = isAdmin;\nexports.issuedAtTime = issuedAtTime;\nexports.isValidFormat = isValidFormat;\nexports.isValidTimestamp = isValidTimestamp;\nexports.clone = clone;\nexports.contains = contains;\nexports.every = every;\nexports.extend = extend;\nexports.findKey = findKey;\nexports.findValue = findValue;\nexports.forEach = forEach;\nexports.getAnyKey = getAnyKey;\nexports.getCount = getCount;\nexports.getValues = getValues;\nexports.isEmpty = isEmpty;\nexports.isNonNullObject = isNonNullObject;\nexports.map = map;\nexports.safeGet = safeGet;\nexports.querystring = querystring;\nexports.querystringDecode = querystringDecode;\nexports.Sha1 = Sha1;\nexports.async = async;\nexports.createSubscribe = createSubscribe;\nexports.errorPrefix = errorPrefix;\nexports.validateArgCount = validateArgCount;\nexports.validateCallback = validateCallback;\nexports.validateContextObject = validateContextObject;\nexports.validateNamespace = validateNamespace;\nexports.stringLength = stringLength;\nexports.stringToByteArray = stringToByteArray$1;\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nrequire('@firebase/polyfill');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nmodule.exports = firebase;\n","import 'whatwg-fetch';\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  this._state = 0;\n  this._handled = false;\n  this._value = undefined;\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = function(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n};\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(values) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nvar globalNS = (function() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n})();\n\nif (!globalNS.Promise) {\n  globalNS.Promise = Promise;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar _global = createCommonjsModule(function (module) {\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n});\n\nvar _core = createCommonjsModule(function (module) {\nvar core = module.exports = { version: '2.5.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n});\nvar _core_1 = _core.version;\n\nvar _isObject = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\nvar _anObject = function (it) {\n  if (!_isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\nvar _fails = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n// Thank's IE8 for his funny defineProperty\nvar _descriptors = !_fails(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\nvar document = _global.document;\n// typeof document.createElement is 'object' in old IE\nvar is = _isObject(document) && _isObject(document.createElement);\nvar _domCreate = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\nvar _ie8DomDefine = !_descriptors && !_fails(function () {\n  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\n\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nvar _toPrimitive = function (it, S) {\n  if (!_isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\nvar dP = Object.defineProperty;\n\nvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  _anObject(O);\n  P = _toPrimitive(P, true);\n  _anObject(Attributes);\n  if (_ie8DomDefine) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar _objectDp = {\n\tf: f\n};\n\nvar _propertyDesc = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar _hide = _descriptors ? function (object, key, value) {\n  return _objectDp.f(object, key, _propertyDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar _has = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\nvar id = 0;\nvar px = Math.random();\nvar _uid = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\nvar _redefine = createCommonjsModule(function (module) {\nvar SRC = _uid('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\n_core.inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === _global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    _hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    _hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n});\n\nvar _aFunction = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n// optional / simple context binding\n\nvar _ctx = function (fn, that, length) {\n  _aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n    // extend global\n    if (target) _redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) _hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\n_global.core = _core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nvar _export = $export;\n\nvar toString = {}.toString;\n\nvar _cof = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n// eslint-disable-next-line no-prototype-builtins\nvar _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return _cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n// 7.2.1 RequireObjectCoercible(argument)\nvar _defined = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n// 7.1.13 ToObject(argument)\n\nvar _toObject = function (it) {\n  return Object(_defined(it));\n};\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nvar _toInteger = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n// 7.1.15 ToLength\n\nvar min = Math.min;\nvar _toLength = function (it) {\n  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n// 7.2.2 IsArray(argument)\n\nvar _isArray = Array.isArray || function isArray(arg) {\n  return _cof(arg) == 'Array';\n};\n\nvar SHARED = '__core-js_shared__';\nvar store = _global[SHARED] || (_global[SHARED] = {});\nvar _shared = function (key) {\n  return store[key] || (store[key] = {});\n};\n\nvar _wks = createCommonjsModule(function (module) {\nvar store = _shared('wks');\n\nvar Symbol = _global.Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n});\n\nvar SPECIES = _wks('species');\n\nvar _arraySpeciesConstructor = function (original) {\n  var C;\n  if (_isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;\n    if (_isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n\n// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\n\n\nvar _arraySpeciesCreate = function (original, length) {\n  return new (_arraySpeciesConstructor(original))(length);\n};\n\n// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\n\n\n\n\n\nvar _arrayMethods = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || _arraySpeciesCreate;\n  return function ($this, callbackfn, that) {\n    var O = _toObject($this);\n    var self = _iobject(O);\n    var f = _ctx(callbackfn, that, 3);\n    var length = _toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = _wks('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});\nvar _addToUnscopables = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\n\nvar $find = _arrayMethods(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n_export(_export.P + _export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n_addToUnscopables(KEY);\n\nvar find = _core.Array.find;\n\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\n\nvar $find$1 = _arrayMethods(6);\nvar KEY$1 = 'findIndex';\nvar forced$1 = true;\n// Shouldn't skip holes\nif (KEY$1 in []) Array(1)[KEY$1](function () { forced$1 = false; });\n_export(_export.P + _export.F * forced$1, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n_addToUnscopables(KEY$1);\n\nvar findIndex = _core.Array.findIndex;\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\n\n\nvar _toIobject = function (it) {\n  return _iobject(_defined(it));\n};\n\nvar max = Math.max;\nvar min$1 = Math.min;\nvar _toAbsoluteIndex = function (index, length) {\n  index = _toInteger(index);\n  return index < 0 ? max(index + length, 0) : min$1(index, length);\n};\n\n// false -> Array#indexOf\n// true  -> Array#includes\n\n\n\nvar _arrayIncludes = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = _toIobject($this);\n    var length = _toLength(O.length);\n    var index = _toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar shared = _shared('keys');\n\nvar _sharedKey = function (key) {\n  return shared[key] || (shared[key] = _uid(key));\n};\n\nvar arrayIndexOf = _arrayIncludes(false);\nvar IE_PROTO = _sharedKey('IE_PROTO');\n\nvar _objectKeysInternal = function (object, names) {\n  var O = _toIobject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (_has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n// IE 8- don't enum bug keys\nvar _enumBugKeys = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\n\nvar _objectKeys = Object.keys || function keys(O) {\n  return _objectKeysInternal(O, _enumBugKeys);\n};\n\nvar f$1 = Object.getOwnPropertySymbols;\n\nvar _objectGops = {\n\tf: f$1\n};\n\nvar f$2 = {}.propertyIsEnumerable;\n\nvar _objectPie = {\n\tf: f$2\n};\n\n// 19.1.2.1 Object.assign(target, source, ...)\n\n\n\n\n\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nvar _objectAssign = !$assign || _fails(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = _toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = _objectGops.f;\n  var isEnum = _objectPie.f;\n  while (aLen > index) {\n    var S = _iobject(arguments[index++]);\n    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n// 19.1.3.1 Object.assign(target, source)\n\n\n_export(_export.S + _export.F, 'Object', { assign: _objectAssign });\n\nvar assign = _core.Object.assign;\n\n// 7.2.8 IsRegExp(argument)\n\n\nvar MATCH = _wks('match');\nvar _isRegexp = function (it) {\n  var isRegExp;\n  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');\n};\n\n// helper for String#{startsWith, endsWith, includes}\n\n\n\nvar _stringContext = function (that, searchString, NAME) {\n  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(_defined(that));\n};\n\nvar MATCH$1 = _wks('match');\nvar _failsIsRegexp = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH$1] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = _stringContext(this, searchString, STARTS_WITH);\n    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n\nvar startsWith = _core.String.startsWith;\n\nvar _stringRepeat = function repeat(count) {\n  var str = String(_defined(this));\n  var res = '';\n  var n = _toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n\n_export(_export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: _stringRepeat\n});\n\nvar repeat = _core.String.repeat;\n\nvar _meta = createCommonjsModule(function (module) {\nvar META = _uid('meta');\n\n\nvar setDesc = _objectDp.f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !_fails(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!_has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!_has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n});\nvar _meta_1 = _meta.KEY;\nvar _meta_2 = _meta.NEED;\nvar _meta_3 = _meta.fastKey;\nvar _meta_4 = _meta.getWeak;\nvar _meta_5 = _meta.onFreeze;\n\nvar def = _objectDp.f;\n\nvar TAG = _wks('toStringTag');\n\nvar _setToStringTag = function (it, tag, stat) {\n  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\nvar f$3 = _wks;\n\nvar _wksExt = {\n\tf: f$3\n};\n\nvar _library = false;\n\nvar defineProperty = _objectDp.f;\nvar _wksDefine = function (name) {\n  var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: _wksExt.f(name) });\n};\n\n// all enumerable object keys, includes symbols\n\n\n\nvar _enumKeys = function (it) {\n  var result = _objectKeys(it);\n  var getSymbols = _objectGops.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = _objectPie.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n\nvar _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n  _anObject(O);\n  var keys = _objectKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\nvar document$1 = _global.document;\nvar _html = document$1 && document$1.documentElement;\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\n\n\nvar IE_PROTO$1 = _sharedKey('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE$1 = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = _domCreate('iframe');\n  var i = _enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  _html.appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];\n  return createDict();\n};\n\nvar _objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE$1] = _anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO$1] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : _objectDps(result, Properties);\n};\n\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n\nvar hiddenKeys = _enumBugKeys.concat('length', 'prototype');\n\nvar f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return _objectKeysInternal(O, hiddenKeys);\n};\n\nvar _objectGopn = {\n\tf: f$4\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n\nvar gOPN = _objectGopn.f;\nvar toString$1 = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nvar f$5 = function getOwnPropertyNames(it) {\n  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));\n};\n\nvar _objectGopnExt = {\n\tf: f$5\n};\n\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = _toIobject(O);\n  P = _toPrimitive(P, true);\n  if (_ie8DomDefine) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);\n};\n\nvar _objectGopd = {\n\tf: f$6\n};\n\n// ECMAScript 6 symbols shim\n\n\n\n\n\nvar META = _meta.KEY;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar gOPD$1 = _objectGopd.f;\nvar dP$1 = _objectDp.f;\nvar gOPN$1 = _objectGopnExt.f;\nvar $Symbol = _global.Symbol;\nvar $JSON = _global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE$2 = 'prototype';\nvar HIDDEN = _wks('_hidden');\nvar TO_PRIMITIVE = _wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = _shared('symbol-registry');\nvar AllSymbols = _shared('symbols');\nvar OPSymbols = _shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE$2];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = _global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = _descriptors && _fails(function () {\n  return _objectCreate(dP$1({}, 'a', {\n    get: function () { return dP$1(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD$1(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP$1(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);\n} : dP$1;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  _anObject(it);\n  key = _toPrimitive(key, true);\n  _anObject(D);\n  if (_has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP$1(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  _anObject(it);\n  var keys = _enumKeys(P = _toIobject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = _toPrimitive(key, true));\n  if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;\n  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = _toIobject(it);\n  key = _toPrimitive(key, true);\n  if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;\n  var D = gOPD$1(it, key);\n  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN$1(_toIobject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, _propertyDesc(1, value));\n    };\n    if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {\n    return this._k;\n  });\n\n  _objectGopd.f = $getOwnPropertyDescriptor;\n  _objectDp.f = $defineProperty;\n  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;\n  _objectPie.f = $propertyIsEnumerable;\n  _objectGops.f = $getOwnPropertySymbols;\n\n  if (_descriptors && !_library) {\n    _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  _wksExt.f = function (name) {\n    return wrap(_wks(name));\n  };\n}\n\n_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return _has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n_export(_export.S + _export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!_isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\n_setToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\n_setToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\n_setToStringTag(_global.JSON, 'JSON', true);\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\n\nvar TAG$1 = _wks('toStringTag');\n// ES3 wrong here\nvar ARG = _cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nvar _classof = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T\n    // builtinTag case\n    : ARG ? _cof(O)\n    // ES3 arguments fallback\n    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n// 19.1.3.6 Object.prototype.toString()\n\nvar test = {};\ntest[_wks('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  _redefine(Object.prototype, 'toString', function toString() {\n    return '[object ' + _classof(this) + ']';\n  }, true);\n}\n\n_wksDefine('asyncIterator');\n\n_wksDefine('observable');\n\nvar symbol = _core.Symbol;\n\n// true  -> String#at\n// false -> String#codePointAt\nvar _stringAt = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(_defined(that));\n    var i = _toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\nvar _iterators = {};\n\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n_hide(IteratorPrototype, _wks('iterator'), function () { return this; });\n\nvar _iterCreate = function (Constructor, NAME, next) {\n  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });\n  _setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n\n\nvar IE_PROTO$2 = _sharedKey('IE_PROTO');\nvar ObjectProto$1 = Object.prototype;\n\nvar _objectGpo = Object.getPrototypeOf || function (O) {\n  O = _toObject(O);\n  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto$1 : null;\n};\n\nvar ITERATOR = _wks('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nvar _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  _iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = _objectGpo($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      _setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    _hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  _iterators[NAME] = $default;\n  _iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) _redefine(proto, key, methods[key]);\n    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\nvar $at = _stringAt(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n_iterDefine(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\nvar _iterStep = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nvar es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {\n  this._t = _toIobject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return _iterStep(1);\n  }\n  if (kind == 'keys') return _iterStep(0, index);\n  if (kind == 'values') return _iterStep(0, O[index]);\n  return _iterStep(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n_iterators.Arguments = _iterators.Array;\n\n_addToUnscopables('keys');\n_addToUnscopables('values');\n_addToUnscopables('entries');\n\nvar ITERATOR$1 = _wks('iterator');\nvar TO_STRING_TAG = _wks('toStringTag');\nvar ArrayValues = _iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = _global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);\n    if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);\n    _iterators[NAME] = ArrayValues;\n    if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);\n  }\n}\n\nvar iterator = _wksExt.f('iterator');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import '@firebase/database';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar util = require('@firebase/util');\nvar logger = require('@firebase/logger');\nvar tslib_1 = require('tslib');\nvar firebase = _interopDefault(require('@firebase/app'));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\r\nvar DOMStorageWrapper = /** @class */ (function () {\r\n    /**\r\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    function DOMStorageWrapper(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param {string} key The key to save the value under\r\n     * @param {?Object} value The value being stored, or null to remove the key.\r\n     */\r\n    DOMStorageWrapper.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     * @return {*} The value that was stored under this key, or null\r\n     */\r\n    DOMStorageWrapper.prototype.get = function (key) {\r\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return util.jsonEval(storedVal);\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} key\r\n     */\r\n    DOMStorageWrapper.prototype.remove = function (key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    };\r\n    /**\r\n     * @param {string} name\r\n     * @return {string}\r\n     */\r\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\r\n        return this.prefix_ + name;\r\n    };\r\n    DOMStorageWrapper.prototype.toString = function () {\r\n        return this.domStorage_.toString();\r\n    };\r\n    return DOMStorageWrapper;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\r\nvar MemoryStorage = /** @class */ (function () {\r\n    function MemoryStorage() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    MemoryStorage.prototype.set = function (key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    };\r\n    MemoryStorage.prototype.get = function (key) {\r\n        if (util.contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    };\r\n    MemoryStorage.prototype.remove = function (key) {\r\n        delete this.cache_[key];\r\n    };\r\n    return MemoryStorage;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\r\nvar createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            var domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nvar PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nvar SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logClient = new logger.Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\r\nvar LUIDGenerator = (function () {\r\n    var id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\r\nvar sha1 = function (str) {\r\n    var utf8Bytes = util.stringToByteArray(str);\r\n    var sha1 = new util.Sha1();\r\n    sha1.update(utf8Bytes);\r\n    var sha1Bytes = sha1.digest();\r\n    return util.base64.encodeByteArray(sha1Bytes);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n * @return {string}\r\n * @private\r\n */\r\nvar buildLogMessage_ = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = '';\r\n    for (var i = 0; i < var_args.length; i++) {\r\n        if (Array.isArray(var_args[i]) ||\r\n            (var_args[i] &&\r\n                typeof var_args[i] === 'object' &&\r\n                typeof var_args[i].length === 'number')) {\r\n            message += buildLogMessage_.apply(null, var_args[i]);\r\n        }\r\n        else if (typeof var_args[i] === 'object') {\r\n            message += util.stringify(var_args[i]);\r\n        }\r\n        else {\r\n            message += var_args[i];\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\r\nvar logger$1 = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\r\nvar firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\r\nvar enableLogging = function (logger_, persistent) {\r\n    util.assert(!persistent || (logger_ === true || logger_ === false), \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = logger.LogLevel.VERBOSE;\r\n        logger$1 = logClient.log.bind(logClient);\r\n        if (persistent)\r\n            SessionStorage.set('logging_enabled', true);\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger$1 = logger_;\r\n    }\r\n    else {\r\n        logger$1 = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\n/**\r\n *\r\n * @param {...(string|Arguments)} var_args\r\n */\r\nvar log = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger$1 === null && SessionStorage.get('logging_enabled') === true)\r\n            enableLogging(true);\r\n    }\r\n    if (logger$1) {\r\n        var message = buildLogMessage_.apply(null, var_args);\r\n        logger$1(message);\r\n    }\r\n};\r\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\r\nvar logWrapper = function (prefix) {\r\n    return function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar error = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n};\r\n/**\r\n * @param {...string} var_args\r\n */\r\nvar fatal = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\n/**\r\n * @param {...*} var_args\r\n */\r\nvar warn = function () {\r\n    var var_args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        var_args[_i] = arguments[_i];\r\n    }\r\n    var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nvar warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\r\nvar isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data != data || // NaN\r\n            data == Number.POSITIVE_INFINITY ||\r\n            data == Number.NEGATIVE_INFINITY));\r\n};\r\n/**\r\n * @param {function()} fn\r\n */\r\nvar executeWhenDOMReady = function (fn) {\r\n    if (util.isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        var called_1 = false;\r\n        var wrappedFn_1 = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn_1, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called_1) {\r\n                called_1 = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn_1, false);\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            document.attachEvent('onreadystatechange', function () {\r\n                if (document.readyState === 'complete')\r\n                    wrappedFn_1();\r\n            });\r\n            // fallback to onload.\r\n            window.attachEvent('onload', wrappedFn_1);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\r\nvar MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\r\nvar MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\r\nvar nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\r\nvar stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\r\nvar requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\r\n    }\r\n};\r\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\r\nvar ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null)\r\n        return util.stringify(obj);\r\n    var keys = [];\r\n    for (var k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    var key = '{';\r\n    for (var i = 0; i < keys.length; i++) {\r\n        if (i !== 0)\r\n            key += ',';\r\n        key += util.stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\r\nvar splitStringBySize = function (str, segsize) {\r\n    var len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    var dataSegs = [];\r\n    for (var c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param {!(Object|Array)} obj The object or array to iterate over\r\n * @param {function(?, ?)} fn The function to apply\r\n */\r\nvar each = function (obj, fn) {\r\n    if (Array.isArray(obj)) {\r\n        for (var i = 0; i < obj.length; ++i) {\r\n            fn(i, obj[i]);\r\n        }\r\n    }\r\n    else {\r\n        /**\r\n         * in the conversion of code we removed the goog.object.forEach\r\n         * function which did a value,key callback. We standardized on\r\n         * a single impl that does a key, value callback. So we invert\r\n         * to not have to touch the `each` code points\r\n         */\r\n        util.forEach(obj, function (key, val) { return fn(val, key); });\r\n    }\r\n};\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\r\nvar doubleToIEEE754String = function (v) {\r\n    util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    var ebits = 11, fbits = 52;\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    var hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1)\r\n            hexByte = '0' + hexByte;\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\r\nvar isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\r\nvar isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\r\nvar errorForServerCode = function (code, query) {\r\n    var reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code == 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code == 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n};\r\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\r\nvar tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        var intVal = Number(str);\r\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\r\nvar exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(function () {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            var stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\r\nvar beingCrawled = function () {\r\n    var userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\r\nvar setTimeoutNonBlocking = function (fn, time) {\r\n    var timeout = setTimeout(fn, time);\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nvar Path = /** @class */ (function () {\r\n    /**\r\n     * @param {string|Array.<string>} pathOrString Path string to parse,\r\n     *      or another path, or the raw tokens array\r\n     * @param {number=} pieceNum\r\n     */\r\n    function Path(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            var copyTo = 0;\r\n            for (var i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    Object.defineProperty(Path, \"Empty\", {\r\n        /**\r\n         * Singleton to represent an empty path\r\n         *\r\n         * @const\r\n         */\r\n        get: function () {\r\n            return new Path('');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Path.prototype.getFront = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        return this.pieces_[this.pieceNum_];\r\n    };\r\n    /**\r\n     * @return {number} The number of segments in this path\r\n     */\r\n    Path.prototype.getLength = function () {\r\n        return this.pieces_.length - this.pieceNum_;\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.popFront = function () {\r\n        var pieceNum = this.pieceNum_;\r\n        if (pieceNum < this.pieces_.length) {\r\n            pieceNum++;\r\n        }\r\n        return new Path(this.pieces_, pieceNum);\r\n    };\r\n    /**\r\n     * @return {?string}\r\n     */\r\n    Path.prototype.getBack = function () {\r\n        if (this.pieceNum_ < this.pieces_.length)\r\n            return this.pieces_[this.pieces_.length - 1];\r\n        return null;\r\n    };\r\n    Path.prototype.toString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + this.pieces_[i];\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    Path.prototype.toUrlEncodedString = function () {\r\n        var pathString = '';\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '')\r\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\r\n        }\r\n        return pathString || '/';\r\n    };\r\n    /**\r\n     * Shallow copy of the parts of the path.\r\n     *\r\n     * @param {number=} begin\r\n     * @return {!Array<string>}\r\n     */\r\n    Path.prototype.slice = function (begin) {\r\n        if (begin === void 0) { begin = 0; }\r\n        return this.pieces_.slice(this.pieceNum_ + begin);\r\n    };\r\n    /**\r\n     * @return {?Path}\r\n     */\r\n    Path.prototype.parent = function () {\r\n        if (this.pieceNum_ >= this.pieces_.length)\r\n            return null;\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @param {string|!Path} childPathObj\r\n     * @return {!Path}\r\n     */\r\n    Path.prototype.child = function (childPathObj) {\r\n        var pieces = [];\r\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++)\r\n            pieces.push(this.pieces_[i]);\r\n        if (childPathObj instanceof Path) {\r\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n                pieces.push(childPathObj.pieces_[i]);\r\n            }\r\n        }\r\n        else {\r\n            var childPieces = childPathObj.split('/');\r\n            for (var i = 0; i < childPieces.length; i++) {\r\n                if (childPieces[i].length > 0)\r\n                    pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n        return new Path(pieces, 0);\r\n    };\r\n    /**\r\n     * @return {boolean} True if there are no segments in this path\r\n     */\r\n    Path.prototype.isEmpty = function () {\r\n        return this.pieceNum_ >= this.pieces_.length;\r\n    };\r\n    /**\r\n     * @param {!Path} outerPath\r\n     * @param {!Path} innerPath\r\n     * @return {!Path} The path from outerPath to innerPath\r\n     */\r\n    Path.relativePath = function (outerPath, innerPath) {\r\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\r\n        if (outer === null) {\r\n            return innerPath;\r\n        }\r\n        else if (outer === inner) {\r\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\r\n        }\r\n        else {\r\n            throw new Error('INTERNAL ERROR: innerPath (' +\r\n                innerPath +\r\n                ') is not within ' +\r\n                'outerPath (' +\r\n                outerPath +\r\n                ')');\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} left\r\n     * @param {!Path} right\r\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n     */\r\n    Path.comparePaths = function (left, right) {\r\n        var leftKeys = left.slice();\r\n        var rightKeys = right.slice();\r\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n            var cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n            if (cmp !== 0)\r\n                return cmp;\r\n        }\r\n        if (leftKeys.length === rightKeys.length)\r\n            return 0;\r\n        return leftKeys.length < rightKeys.length ? -1 : 1;\r\n    };\r\n    /**\r\n     *\r\n     * @param {Path} other\r\n     * @return {boolean} true if paths are the same.\r\n     */\r\n    Path.prototype.equals = function (other) {\r\n        if (this.getLength() !== other.getLength()) {\r\n            return false;\r\n        }\r\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} other\r\n     * @return {boolean} True if this path is a parent (or the same as) other\r\n     */\r\n    Path.prototype.contains = function (other) {\r\n        var i = this.pieceNum_;\r\n        var j = other.pieceNum_;\r\n        if (this.getLength() > other.getLength()) {\r\n            return false;\r\n        }\r\n        while (i < this.pieces_.length) {\r\n            if (this.pieces_[i] !== other.pieces_[j]) {\r\n                return false;\r\n            }\r\n            ++i;\r\n            ++j;\r\n        }\r\n        return true;\r\n    };\r\n    return Path;\r\n}()); // end Path\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nvar ValidationPath = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path Initial Path.\r\n     * @param {string} errorPrefix_ Prefix for any error messages.\r\n     */\r\n    function ValidationPath(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        /** @type {!Array<string>} */\r\n        this.parts_ = path.slice();\r\n        /** @type {number} Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (var i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += util.stringLength(this.parts_[i]);\r\n        }\r\n        this.checkValid_();\r\n    }\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\r\n        /** @const {number} Maximum key depth. */\r\n        get: function () {\r\n            return 32;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\r\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\r\n        get: function () {\r\n            return 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @param {string} child */\r\n    ValidationPath.prototype.push = function (child) {\r\n        // Count the needed '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ += 1;\r\n        }\r\n        this.parts_.push(child);\r\n        this.byteLength_ += util.stringLength(child);\r\n        this.checkValid_();\r\n    };\r\n    ValidationPath.prototype.pop = function () {\r\n        var last = this.parts_.pop();\r\n        this.byteLength_ -= util.stringLength(last);\r\n        // Un-count the previous '/'\r\n        if (this.parts_.length > 0) {\r\n            this.byteLength_ -= 1;\r\n        }\r\n    };\r\n    ValidationPath.prototype.checkValid_ = function () {\r\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'has a key path longer than ' +\r\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\r\n                ' bytes (' +\r\n                this.byteLength_ +\r\n                ').');\r\n        }\r\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\r\n            throw new Error(this.errorPrefix_ +\r\n                'path specified exceeds the maximum depth that can be written (' +\r\n                ValidationPath.MAX_PATH_DEPTH +\r\n                ') or object contains a cycle ' +\r\n                this.toErrorString());\r\n        }\r\n    };\r\n    /**\r\n     * String for use in error messages - uses '.' notation for path.\r\n     *\r\n     * @return {string}\r\n     */\r\n    ValidationPath.prototype.toErrorString = function () {\r\n        if (this.parts_.length == 0) {\r\n            return '';\r\n        }\r\n        return \"in property '\" + this.parts_.join('.') + \"'\";\r\n    };\r\n    return ValidationPath;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar PROTOCOL_VERSION = '5';\r\nvar VERSION_PARAM = 'v';\r\nvar TRANSPORT_SESSION_PARAM = 's';\r\nvar REFERER_PARAM = 'r';\r\nvar FORGE_REF = 'f';\r\nvar FORGE_DOMAIN = 'firebaseio.com';\r\nvar LAST_SESSION_PARAM = 'ls';\r\nvar WEBSOCKET = 'websocket';\r\nvar LONG_POLLING = 'long_polling';\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\r\nvar RepoInfo = /** @class */ (function () {\r\n    /**\r\n     * @param {string} host Hostname portion of the url for the repo\r\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n     * @param {string} namespace The namespace represented by the repo\r\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param {string=} persistenceKey Override the default session persistence storage key\r\n     */\r\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\r\n        if (persistenceKey === void 0) { persistenceKey = ''; }\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.persistenceKey = persistenceKey;\r\n        this.host = host.toLowerCase();\r\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\r\n        this.internalHost = PersistentStorage.get('host:' + host) || this.host;\r\n    }\r\n    RepoInfo.prototype.needsQueryParam = function () {\r\n        return this.host !== this.internalHost || this.isCustomHost();\r\n    };\r\n    RepoInfo.prototype.isCacheableHost = function () {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    };\r\n    RepoInfo.prototype.isDemoHost = function () {\r\n        return this.domain === 'firebaseio-demo.com';\r\n    };\r\n    RepoInfo.prototype.isCustomHost = function () {\r\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\r\n    };\r\n    RepoInfo.prototype.updateHost = function (newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this.host, this.internalHost);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns the websocket URL for this repo\r\n     * @param {string} type of connection\r\n     * @param {Object} params list\r\n     * @return {string} The URL for this repo\r\n     */\r\n    RepoInfo.prototype.connectionURL = function (type, params) {\r\n        util.assert(typeof type === 'string', 'typeof type must == string');\r\n        util.assert(typeof params === 'object', 'typeof params must == object');\r\n        var connURL;\r\n        if (type === WEBSOCKET) {\r\n            connURL =\r\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\r\n        }\r\n        else if (type === LONG_POLLING) {\r\n            connURL =\r\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\r\n        }\r\n        else {\r\n            throw new Error('Unknown connection type: ' + type);\r\n        }\r\n        if (this.needsQueryParam()) {\r\n            params['ns'] = this.namespace;\r\n        }\r\n        var pairs = [];\r\n        util.forEach(params, function (key, value) {\r\n            pairs.push(key + '=' + value);\r\n        });\r\n        return connURL + pairs.join('&');\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toString = function () {\r\n        var str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    };\r\n    /** @return {string} */\r\n    RepoInfo.prototype.toURLString = function () {\r\n        return (this.secure ? 'https://' : 'http://') + this.host;\r\n    };\r\n    return RepoInfo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\r\nfunction decodePath(pathString) {\r\n    var pathStringDecoded = '';\r\n    var pieces = pathString.split('/');\r\n    for (var i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            var piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    var results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\r\n        var segment = _a[_i];\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        var kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\r\n        }\r\n    }\r\n    return results;\r\n}\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\r\nvar parseRepoInfo = function (dataURL) {\r\n    var parsedUrl = parseURL(dataURL), namespace = parsedUrl.subdomain;\r\n    if (parsedUrl.domain === 'firebase') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace == 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\r\n */\r\nvar parseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    var host = '', domain = '', subdomain = '', pathString = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    var secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        var colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        var slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        var questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = dataURL.length;\r\n        }\r\n        var parts = host.split('.');\r\n        if (parts.length === 3) {\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            domain = parts[1];\r\n            subdomain = parts[0].toLowerCase();\r\n        }\r\n        else if (parts.length === 2) {\r\n            domain = parts[0];\r\n        }\r\n        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        // Support `ns` query param if subdomain not already set\r\n        if (subdomain === '' && 'ns' in queryParams) {\r\n            subdomain = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host: host,\r\n        port: port,\r\n        domain: domain,\r\n        subdomain: subdomain,\r\n        secure: secure,\r\n        scheme: scheme,\r\n        pathString: pathString\r\n    };\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\r\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\r\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\r\nvar isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\r\nvar isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\r\nvar isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority && typeof priority === 'object' && util.contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\r\nvar validateFirebaseData = function (errorPrefix, data, path_) {\r\n    var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            path.toErrorString() +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        util.stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            path.toErrorString() +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        var hasDotValue_1 = false, hasActualChild_1 = false;\r\n        util.forEach(data, function (key, value) {\r\n            if (key === '.value') {\r\n                hasDotValue_1 = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild_1 = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        path.toErrorString() +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            path.push(key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            path.pop();\r\n        });\r\n        if (hasDotValue_1 && hasActualChild_1) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                path.toErrorString() +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\r\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    var i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        var keys = curPath.slice();\r\n        for (var j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) {\r\n                // .priority is OK\r\n            }\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(Path.comparePaths);\r\n    var prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && prevPath.contains(curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\r\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\r\n    if (optional && data === undefined)\r\n        return;\r\n    var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\r\n    }\r\n    var mergePaths = [];\r\n    util.forEach(data, function (key, value) {\r\n        var curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix, value, path.child(curPath));\r\n        if (curPath.getBack() === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix, mergePaths);\r\n};\r\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\r\n    if (optional && priority === undefined)\r\n        return;\r\n    if (isInvalidJSONNumber(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n};\r\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\r\n    if (optional && eventType === undefined)\r\n        return;\r\n    switch (eventType) {\r\n        case 'value':\r\n        case 'child_added':\r\n        case 'child_removed':\r\n        case 'child_changed':\r\n        case 'child_moved':\r\n            break;\r\n        default:\r\n            throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\r\n                '\"child_changed\", or \"child_moved\".');\r\n    }\r\n};\r\nvar validateKey = function (fnName, argumentNumber, key, optional) {\r\n    if (optional && key === undefined)\r\n        return;\r\n    if (!isValidKey(key))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n};\r\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (optional && pathString === undefined)\r\n        return;\r\n    if (!isValidPathString(pathString))\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n};\r\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentNumber, pathString, optional);\r\n};\r\nvar validateWritablePath = function (fnName, path) {\r\n    if (path.getFront() === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    var pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, false) +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\r\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\r\n    if (optional && bool === undefined)\r\n        return;\r\n    if (typeof bool !== 'boolean')\r\n        throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar OnDisconnect = /** @class */ (function () {\r\n    /**\r\n     * @param {!Repo} repo_\r\n     * @param {!Path} path_\r\n     */\r\n    function OnDisconnect(repo_, path_) {\r\n        this.repo_ = repo_;\r\n        this.path_ = path_;\r\n    }\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.cancel = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\r\n        util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\r\n        validateWritablePath('OnDisconnect.remove', this.path_);\r\n        util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.set = function (value, onComplete) {\r\n        util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.set', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\r\n        util.validateCallback('OnDisconnect.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} value\r\n     * @param {number|string|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\r\n        util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('OnDisconnect.setWithPriority', this.path_);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\r\n        validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\r\n        util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!firebase.Promise}\r\n     */\r\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\r\n        validateWritablePath('OnDisconnect.update', this.path_);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\r\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\r\n        util.validateCallback('OnDisconnect.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    return OnDisconnect;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar TransactionResult = /** @class */ (function () {\r\n    /**\r\n     * A type for the resolve value of Firebase.transaction.\r\n     * @constructor\r\n     * @dict\r\n     * @param {boolean} committed\r\n     * @param {DataSnapshot} snapshot\r\n     */\r\n    function TransactionResult(committed, snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    TransactionResult.prototype.toJSON = function () {\r\n        util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    };\r\n    return TransactionResult;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nvar nextPushId = (function () {\r\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\r\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    var lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    var lastRandChars = [];\r\n    return function (now) {\r\n        var duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        var i;\r\n        var timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        util.assert(now === 0, 'Cannot push at time == 0');\r\n        var id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        util.assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\r\nvar NamedNode = /** @class */ (function () {\r\n    function NamedNode(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    /**\r\n     *\r\n     * @param {!string} name\r\n     * @param {!Node} node\r\n     * @return {NamedNode}\r\n     */\r\n    NamedNode.Wrap = function (name, node) {\r\n        return new NamedNode(name, node);\r\n    };\r\n    return NamedNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nvar Index = /** @class */ (function () {\r\n    function Index() {\r\n    }\r\n    /**\r\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n     * this index\r\n     */\r\n    Index.prototype.getCompare = function () {\r\n        return this.compare.bind(this);\r\n    };\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     * @param {!Node} oldNode\r\n     * @param {!Node} newNode\r\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        var oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        var newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    };\r\n    /**\r\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    Index.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    return Index;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __EMPTY_NODE;\r\nvar KeyIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(KeyIndex, _super);\r\n    function KeyIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\r\n        get: function () {\r\n            return __EMPTY_NODE;\r\n        },\r\n        set: function (val) {\r\n            __EMPTY_NODE = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.compare = function (a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.isDefinedOn = function (node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    KeyIndex.prototype.maxPost = function () {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    KeyIndex.prototype.makePost = function (indexValue, name) {\r\n        util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    KeyIndex.prototype.toString = function () {\r\n        return '.key';\r\n    };\r\n    return KeyIndex;\r\n}(Index));\r\nvar KEY_INDEX = new KeyIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar MAX_NODE;\r\nfunction setMaxNode(val) {\r\n    MAX_NODE = val;\r\n}\r\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\r\nvar priorityHashText = function (priority) {\r\n    if (typeof priority === 'number')\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    else\r\n        return 'string:' + priority;\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\r\nvar validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        var val = priorityNode.val();\r\n        util.assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && util.contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nvar LeafNode = /** @class */ (function () {\r\n    /**\r\n     * @implements {Node}\r\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n     *                                         The object type is possible in the event of a deferred value\r\n     * @param {!Node=} priorityNode_ The priority of this node.\r\n     */\r\n    function LeafNode(value_, priorityNode_) {\r\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\r\n        get: function () {\r\n            return __childrenNodeConstructor;\r\n        },\r\n        set: function (val) {\r\n            __childrenNodeConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isLeafNode = function () {\r\n        return true;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPriority = function () {\r\n        return this.priorityNode_;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getChild = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else if (path.getFront() === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.hasChild = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\r\n        return null;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.numChildren = function () {\r\n        return 0;\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.forEachChild = function (index, action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.val = function (exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty())\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        else\r\n            return this.getValue();\r\n    };\r\n    /** @inheritDoc */\r\n    LeafNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash = '';\r\n            if (!this.priorityNode_.isEmpty())\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            var type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @return {Object|string|number|boolean} The value of the node.\r\n     */\r\n    LeafNode.prototype.getValue = function () {\r\n        return this.value_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.compareTo = function (other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            util.assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    };\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     * @param {!LeafNode} otherLeaf\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\r\n        var otherLeafType = typeof otherLeaf.value_;\r\n        var thisLeafType = typeof this.value_;\r\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.withIndex = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.isIndexed = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LeafNode.prototype.equals = function (other) {\r\n        /**\r\n         * @inheritDoc\r\n         */\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            var otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n     * the same type, the comparison falls back to their value\r\n     * @type {Array.<!string>}\r\n     * @const\r\n     */\r\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\r\n    return LeafNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar nodeFromJSON;\r\nvar MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON = val;\r\n}\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar PriorityIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PriorityIndex, _super);\r\n    function PriorityIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.compare = function (a, b) {\r\n        var aPriority = a.node.getPriority();\r\n        var bPriority = b.node.getPriority();\r\n        var indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getPriority().isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PriorityIndex.prototype.maxPost = function () {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\r\n        var priorityNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    PriorityIndex.prototype.toString = function () {\r\n        return '.priority';\r\n    };\r\n    return PriorityIndex;\r\n}(Index));\r\nvar PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nvar SortedMapIterator = /** @class */ (function () {\r\n    /**\r\n     * @template K, V, T\r\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n     * @param {?K} startKey\r\n     * @param {function(K, K): number} comparator\r\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n     * @param {(function(K, V):T)=} resultGenerator_\r\n     */\r\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\r\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        /** @private\r\n         * @type {Array.<!LLRBNode>}\r\n         */\r\n        this.nodeStack_ = [];\r\n        var cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_)\r\n                cmp *= -1;\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    SortedMapIterator.prototype.getNext = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_.pop();\r\n        var result;\r\n        if (this.resultGenerator_)\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        else\r\n            result = { key: node.key, value: node.value };\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SortedMapIterator.prototype.hasNext = function () {\r\n        return this.nodeStack_.length > 0;\r\n    };\r\n    SortedMapIterator.prototype.peek = function () {\r\n        if (this.nodeStack_.length === 0)\r\n            return null;\r\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    };\r\n    return SortedMapIterator;\r\n}());\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nvar LLRBNode = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {!K} key Key associated with this node.\r\n     * @param {!V} value Value associated with this node.\r\n     * @param {?boolean} color Whether this node is red.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n     */\r\n    function LLRBNode(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param {?K} key New key for the node, or null.\r\n     * @param {?V} value New value for the node, or null.\r\n     * @param {?boolean} color New color for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n     * @return {!LLRBNode} The node copy.\r\n     */\r\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBNode.prototype.count = function () {\r\n        return this.left.count() + 1 + this.right.count();\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    LLRBNode.prototype.inorderTraversal = function (action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {*} True if traversal was aborted.\r\n     */\r\n    LLRBNode.prototype.reverseTraversal = function (action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    };\r\n    /**\r\n     * @return {!Object} The minimum node in the tree.\r\n     * @private\r\n     */\r\n    LLRBNode.prototype.min_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.minKey = function () {\r\n        return this.min_().key;\r\n    };\r\n    /**\r\n     * @return {!K} The maximum key in the tree.\r\n     */\r\n    LLRBNode.prototype.maxKey = function () {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Object} key Key to insert.\r\n     * @param {!Object} value Value to insert.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with the key/value added.\r\n     */\r\n    LLRBNode.prototype.insert = function (key, value, comparator) {\r\n        var cmp, n;\r\n        n = this;\r\n        cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n     */\r\n    LLRBNode.prototype.removeMin_ = function () {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        var n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_())\r\n            n = n.moveRedLeft_();\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @param {!Object} key The key of the item to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n     */\r\n    LLRBNode.prototype.remove = function (key, comparator) {\r\n        var n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_())\r\n                n = n.rotateRight_();\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this is a RED node.\r\n     */\r\n    LLRBNode.prototype.isRed_ = function () {\r\n        return this.color;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree after performing any needed rotations.\r\n     */\r\n    LLRBNode.prototype.fixUp_ = function () {\r\n        var n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_())\r\n            n = n.rotateLeft_();\r\n        if (n.left.isRed_() && n.left.left.isRed_())\r\n            n = n.rotateRight_();\r\n        if (n.left.isRed_() && n.right.isRed_())\r\n            n = n.colorFlip_();\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedLeft.\r\n     */\r\n    LLRBNode.prototype.moveRedLeft_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after moveRedRight.\r\n     */\r\n    LLRBNode.prototype.moveRedRight_ = function () {\r\n        var n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateLeft.\r\n     */\r\n    LLRBNode.prototype.rotateLeft_ = function () {\r\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after rotateRight.\r\n     */\r\n    LLRBNode.prototype.rotateRight_ = function () {\r\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {!LLRBNode} New tree, after colorFlip.\r\n     */\r\n    LLRBNode.prototype.colorFlip_ = function () {\r\n        var left = this.left.copy(null, null, !this.left.color, null, null);\r\n        var right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    };\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @private\r\n     * @return {boolean} True if all is well.\r\n     */\r\n    LLRBNode.prototype.checkMaxDepth_ = function () {\r\n        var blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBNode.prototype.check_ = function () {\r\n        var blackDepth;\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    };\r\n    LLRBNode.RED = true;\r\n    LLRBNode.BLACK = false;\r\n    return LLRBNode;\r\n}());\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nvar LLRBEmptyNode = /** @class */ (function () {\r\n    function LLRBEmptyNode() {\r\n    }\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @return {!LLRBEmptyNode} The node copy.\r\n     */\r\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBNode} New tree, with item added.\r\n     */\r\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    };\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @param {Comparator} comparator Comparator.\r\n     * @return {!LLRBEmptyNode} New tree, with item removed.\r\n     */\r\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\r\n        return this;\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the tree.\r\n     */\r\n    LLRBEmptyNode.prototype.count = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @return {boolean} True if the tree is empty.\r\n     */\r\n    LLRBEmptyNode.prototype.isEmpty = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param {function(!K, !V)} action Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @return {boolean} True if traversal was aborted.\r\n     */\r\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\r\n        return false;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.minKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {null}\r\n     */\r\n    LLRBEmptyNode.prototype.maxKey = function () {\r\n        return null;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {number} Not sure what this returns exactly. :-).\r\n     */\r\n    LLRBEmptyNode.prototype.check_ = function () {\r\n        return 0;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {boolean} Whether this node is red.\r\n     */\r\n    LLRBEmptyNode.prototype.isRed_ = function () {\r\n        return false;\r\n    };\r\n    return LLRBEmptyNode;\r\n}());\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nvar SortedMap = /** @class */ (function () {\r\n    /**\r\n     * @template K, V\r\n     * @param {function(K, K):number} comparator_ Key comparator.\r\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n     */\r\n    function SortedMap(comparator_, root_) {\r\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param {!K} key Key to be added.\r\n     * @param {!V} value Value to be added.\r\n     * @return {!SortedMap.<K, V>} New map, with item added.\r\n     */\r\n    SortedMap.prototype.insert = function (key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param {!K} key The key to remove.\r\n     * @return {!SortedMap.<K, V>} New map, with item removed.\r\n     */\r\n    SortedMap.prototype.remove = function (key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    };\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param {!K} key The key to look up.\r\n     * @return {?V} The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    SortedMap.prototype.get = function (key) {\r\n        var cmp;\r\n        var node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param {K} key The key to find the predecessor of\r\n     * @return {?K} The predecessor key.\r\n     */\r\n    SortedMap.prototype.getPredecessorKey = function (key) {\r\n        var cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty())\r\n                        node = node.right;\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    };\r\n    /**\r\n     * @return {boolean} True if the map is empty.\r\n     */\r\n    SortedMap.prototype.isEmpty = function () {\r\n        return this.root_.isEmpty();\r\n    };\r\n    /**\r\n     * @return {number} The total number of nodes in the map.\r\n     */\r\n    SortedMap.prototype.count = function () {\r\n        return this.root_.count();\r\n    };\r\n    /**\r\n     * @return {?K} The minimum key in the map.\r\n     */\r\n    SortedMap.prototype.minKey = function () {\r\n        return this.root_.minKey();\r\n    };\r\n    /**\r\n     * @return {?K} The maximum key in the map.\r\n     */\r\n    SortedMap.prototype.maxKey = function () {\r\n        return this.root_.maxKey();\r\n    };\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!K, !V):*} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    SortedMap.prototype.inorderTraversal = function (action) {\r\n        return this.root_.inorderTraversal(action);\r\n    };\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param {function(!Object, !Object)} action Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @return {*} True if the traversal was aborted.\r\n     */\r\n    SortedMap.prototype.reverseTraversal = function (action) {\r\n        return this.root_.reverseTraversal(action);\r\n    };\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @template T\r\n     * @param {(function(K, V):T)=} resultGenerator\r\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n     */\r\n    SortedMap.prototype.getIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    };\r\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    };\r\n    /**\r\n     * Always use the same empty node, to reduce memory.\r\n     * @const\r\n     */\r\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\r\n    return SortedMap;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar LOG_2 = Math.log(2);\r\n/**\r\n * @constructor\r\n */\r\nvar Base12Num = /** @class */ (function () {\r\n    /**\r\n     * @param {number} length\r\n     */\r\n    function Base12Num(length) {\r\n        var logBase2 = function (num) {\r\n            return parseInt((Math.log(num) / LOG_2), 10);\r\n        };\r\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        var mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    Base12Num.prototype.nextBitIsOne = function () {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        var result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    };\r\n    return Base12Num;\r\n}());\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\r\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    var buildBalancedTree = function (low, high) {\r\n        var length = high - low;\r\n        var namedNode;\r\n        var key;\r\n        if (length == 0) {\r\n            return null;\r\n        }\r\n        else if (length == 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            var middle = parseInt((length / 2), 10) + low;\r\n            var left = buildBalancedTree(low, middle);\r\n            var right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    var buildFrom12Array = function (base12) {\r\n        var node = null;\r\n        var root = null;\r\n        var index = childList.length;\r\n        var buildPennant = function (chunkSize, color) {\r\n            var low = index - chunkSize;\r\n            var high = index;\r\n            index -= chunkSize;\r\n            var childTree = buildBalancedTree(low + 1, high);\r\n            var namedNode = childList[low];\r\n            var key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        var attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (var i = 0; i < base12.count; ++i) {\r\n            var isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    var base12 = new Base12Num(childList.length);\r\n    var root = buildFrom12Array(base12);\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _defaultIndexMap;\r\nvar fallbackObject = {};\r\n/**\r\n *\r\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\r\n * @param {Object.<string, Index>} indexSet\r\n * @constructor\r\n */\r\nvar IndexMap = /** @class */ (function () {\r\n    function IndexMap(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    Object.defineProperty(IndexMap, \"Default\", {\r\n        /**\r\n         * The default IndexMap for nodes without a priority\r\n         * @type {!IndexMap}\r\n         * @const\r\n         */\r\n        get: function () {\r\n            util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n            _defaultIndexMap =\r\n                _defaultIndexMap ||\r\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n            return _defaultIndexMap;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *\r\n     * @param {!string} indexKey\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    IndexMap.prototype.get = function (indexKey) {\r\n        var sortedMap = util.safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap)\r\n            throw new Error('No index defined for ' + indexKey);\r\n        if (sortedMap === fallbackObject) {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n        else {\r\n            return sortedMap;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {boolean}\r\n     */\r\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\r\n        return util.contains(this.indexSet_, indexDefinition.toString());\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\r\n        util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        var childList = [];\r\n        var sawIndexedValue = false;\r\n        var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        var next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        var newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        var indexName = indexDefinition.toString();\r\n        var newIndexSet = util.clone(this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        var newIndexes = util.clone(this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    };\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\r\n        var _this = this;\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\r\n            var index = util.safeGet(_this.indexSet_, indexName);\r\n            util.assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    var childList = [];\r\n                    var iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    var next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name != namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                var newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     * @param {!NamedNode} namedNode\r\n     * @param {!SortedMap.<string, !Node>} existingChildren\r\n     * @return {!IndexMap}\r\n     */\r\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\r\n        var newIndexes = util.map(this.indexes_, function (indexedChildren) {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                var existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    };\r\n    return IndexMap;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nvar EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\r\nvar ChildrenNode = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!SortedMap.<string, !Node>} children_ List of children\r\n     * of this node..\r\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n     * @param {!IndexMap} indexMap_\r\n     */\r\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\r\n        get: function () {\r\n            return (EMPTY_NODE ||\r\n                (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isLeafNode = function () {\r\n        return false;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPriority = function () {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            var child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getChild = function (path) {\r\n        var front = path.getFront();\r\n        if (front === null)\r\n            return this;\r\n        return this.getImmediateChild(front).getChild(path.popFront());\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hasChild = function (childName) {\r\n        return this.children_.get(childName) !== null;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\r\n        util.assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            var namedNode = new NamedNode(childName, newChildNode);\r\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\r\n        var front = path.getFront();\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\r\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.isEmpty = function () {\r\n        return this.children_.isEmpty();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.numChildren = function () {\r\n        return this.children_.count();\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.val = function (exportFormat) {\r\n        if (this.isEmpty())\r\n            return null;\r\n        var obj = {};\r\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            var array = [];\r\n            for (var key in obj)\r\n                array[key] = obj[key];\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.hash = function () {\r\n        if (this.lazyHash_ === null) {\r\n            var toHash_1 = '';\r\n            if (!this.getPriority().isEmpty())\r\n                toHash_1 +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                var childHash = childNode.hash();\r\n                if (childHash !== '')\r\n                    toHash_1 += ':' + key + ':' + childHash;\r\n            });\r\n            this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\r\n        }\r\n        return this.lazyHash_;\r\n    };\r\n    /** @inheritDoc */\r\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\r\n        var minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     * @param {!Index} indexDefinition\r\n     * @return {?string}\r\n     */\r\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            var maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {?NamedNode}\r\n     */\r\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\r\n        var maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.forEachChild = function (index, action) {\r\n        var idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(function (wrappedNode) {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!NamedNode} startPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    };\r\n    /**\r\n     * @param {!NamedNode} endPost\r\n     * @param {!Index} indexDefinition\r\n     * @return {!SortedMapIterator}\r\n     */\r\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\r\n        var idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, function (key) {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            var next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.compareTo = function (other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE$2) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.isIndexed = function (index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildrenNode.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            var otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                var thisIter = this.getIterator(PRIORITY_INDEX);\r\n                var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                var thisCurrent = thisIter.getNext();\r\n                var otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     * @private\r\n     * @param {!Index} indexDefinition\r\n     * @return {?SortedMap.<NamedNode, Node>}\r\n     */\r\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @type {RegExp}\r\n     */\r\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\n    return ChildrenNode;\r\n}());\r\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\r\nvar MaxNode = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MaxNode, _super);\r\n    function MaxNode() {\r\n        return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\r\n    }\r\n    MaxNode.prototype.compareTo = function (other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    MaxNode.prototype.equals = function (other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    };\r\n    MaxNode.prototype.getPriority = function () {\r\n        return this;\r\n    };\r\n    MaxNode.prototype.getImmediateChild = function (childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    };\r\n    MaxNode.prototype.isEmpty = function () {\r\n        return false;\r\n    };\r\n    return MaxNode;\r\n}(ChildrenNode));\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\r\nvar MAX_NODE$2 = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE$2)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode(MAX_NODE$2);\r\nsetMaxNode$1(MAX_NODE$2);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\r\nfunction nodeFromJSON$1(json, priority) {\r\n    if (priority === void 0) { priority = null; }\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    util.assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        var jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        var children_1 = [];\r\n        var childrenHavePriority_1 = false;\r\n        var hinzeJsonObj_1 = json;\r\n        util.forEach(hinzeJsonObj_1, function (key, child) {\r\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                var childNode = nodeFromJSON$1(hinzeJsonObj_1[key]);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority_1 =\r\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\r\n                    children_1.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children_1.length == 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, NAME_COMPARATOR);\r\n        if (childrenHavePriority_1) {\r\n            var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        var node_1 = ChildrenNode.EMPTY_NODE;\r\n        var jsonObj_1 = json;\r\n        util.forEach(jsonObj_1, function (key, childData) {\r\n            if (util.contains(jsonObj_1, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    var childNode = nodeFromJSON$1(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty())\r\n                        node_1 = node_1.updateImmediateChild(key, childNode);\r\n                }\r\n            }\r\n        });\r\n        return node_1.updatePriority(nodeFromJSON$1(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON$1);\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\r\nvar ValueIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ValueIndex, _super);\r\n    function ValueIndex() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.compare = function (a, b) {\r\n        var indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.isDefinedOn = function (node) {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.minPost = function () {\r\n        return NamedNode.MIN;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueIndex.prototype.maxPost = function () {\r\n        return NamedNode.MAX;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {string} name\r\n     * @return {!NamedNode}\r\n     */\r\n    ValueIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    };\r\n    /**\r\n     * @return {!string} String representation for inclusion in a query spec\r\n     */\r\n    ValueIndex.prototype.toString = function () {\r\n        return '.value';\r\n    };\r\n    return ValueIndex;\r\n}(Index));\r\nvar VALUE_INDEX = new ValueIndex();\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\r\nvar PathIndex = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PathIndex, _super);\r\n    function PathIndex(indexPath_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.indexPath_ = indexPath_;\r\n        util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!Node} snap\r\n     * @return {!Node}\r\n     * @protected\r\n     */\r\n    PathIndex.prototype.extractChild = function (snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.isDefinedOn = function (node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.compare = function (a, b) {\r\n        var aChild = this.extractChild(a.node);\r\n        var bChild = this.extractChild(b.node);\r\n        var indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.makePost = function (indexValue, name) {\r\n        var valueNode = nodeFromJSON$1(indexValue);\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.maxPost = function () {\r\n        var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\r\n        return new NamedNode(MAX_NAME, node);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PathIndex.prototype.toString = function () {\r\n        return this.indexPath_.slice().join('/');\r\n    };\r\n    return PathIndex;\r\n}(Index));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\r\nvar DataSnapshot = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_ A SnapshotNode to wrap.\r\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n     * @param {!Index} index_ The iteration order for this snapshot\r\n     */\r\n    function DataSnapshot(node_, ref_, index_) {\r\n        this.node_ = node_;\r\n        this.ref_ = ref_;\r\n        this.index_ = index_;\r\n    }\r\n    /**\r\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n     * empty.\r\n     *\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.val = function () {\r\n        util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\r\n        return this.node_.val();\r\n    };\r\n    /**\r\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n     * the entire node contents.\r\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n     */\r\n    DataSnapshot.prototype.exportVal = function () {\r\n        util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\r\n        return this.node_.val(true);\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users\r\n    DataSnapshot.prototype.toJSON = function () {\r\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\r\n        util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\r\n        return this.exportVal();\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a non-null value.\r\n     *\r\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n     */\r\n    DataSnapshot.prototype.exists = function () {\r\n        util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\r\n        return !this.node_.isEmpty();\r\n    };\r\n    /**\r\n     * Returns a DataSnapshot of the specified child node's contents.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {!DataSnapshot} DataSnapshot for child node.\r\n     */\r\n    DataSnapshot.prototype.child = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\r\n        // Ensure the childPath is a string (can be a number)\r\n        childPathString = String(childPathString);\r\n        validatePathString('DataSnapshot.child', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        var childRef = this.ref_.child(childPath);\r\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    };\r\n    /**\r\n     * Returns whether the snapshot contains a child at the specified path.\r\n     *\r\n     * @param {!string} childPathString Path to a child.\r\n     * @return {boolean} Whether the child exists.\r\n     */\r\n    DataSnapshot.prototype.hasChild = function (childPathString) {\r\n        util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\r\n        validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\r\n        var childPath = new Path(childPathString);\r\n        return !this.node_.getChild(childPath).isEmpty();\r\n    };\r\n    /**\r\n     * Returns the priority of the object, or null if no priority was set.\r\n     *\r\n     * @return {string|number|null} The priority.\r\n     */\r\n    DataSnapshot.prototype.getPriority = function () {\r\n        util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this.node_.getPriority().val();\r\n    };\r\n    /**\r\n     * Iterates through child nodes and calls the specified action for each one.\r\n     *\r\n     * @param {function(!DataSnapshot)} action Callback function to be called\r\n     * for each child.\r\n     * @return {boolean} True if forEach was canceled by action returning true for\r\n     * one of the child nodes.\r\n     */\r\n    DataSnapshot.prototype.forEach = function (action) {\r\n        var _this = this;\r\n        util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\r\n        util.validateCallback('DataSnapshot.forEach', 1, action, false);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        var childrenNode = this.node_;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\r\n            return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\r\n        });\r\n    };\r\n    /**\r\n     * Returns whether this DataSnapshot has children.\r\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n     */\r\n    DataSnapshot.prototype.hasChildren = function () {\r\n        util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\r\n        if (this.node_.isLeafNode())\r\n            return false;\r\n        else\r\n            return !this.node_.isEmpty();\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\r\n        get: function () {\r\n            return this.ref_.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns the number of children for this DataSnapshot.\r\n     * @return {number} The number of children that this DataSnapshot contains.\r\n     */\r\n    DataSnapshot.prototype.numChildren = function () {\r\n        util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\r\n        return this.node_.numChildren();\r\n    };\r\n    /**\r\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n     */\r\n    DataSnapshot.prototype.getRef = function () {\r\n        util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\r\n        return this.ref_;\r\n    };\r\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return DataSnapshot;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\r\nvar DataEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n     * @param {!DataSnapshot} snapshot The data backing the event\r\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n     */\r\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getPath = function () {\r\n        var ref = this.snapshot.getRef();\r\n        if (this.eventType === 'value') {\r\n            return ref.path;\r\n        }\r\n        else {\r\n            return ref.getParent().path;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventType = function () {\r\n        return this.eventType;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    DataEvent.prototype.toString = function () {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            util.stringify(this.snapshot.exportVal()));\r\n    };\r\n    return DataEvent;\r\n}());\r\nvar CancelEvent = /** @class */ (function () {\r\n    /**\r\n     * @param {EventRegistration} eventRegistration\r\n     * @param {Error} error\r\n     * @param {!Path} path\r\n     */\r\n    function CancelEvent(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventType = function () {\r\n        return 'cancel';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.getEventRunner = function () {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    CancelEvent.prototype.toString = function () {\r\n        return this.path.toString() + ':cancel';\r\n    };\r\n    return CancelEvent;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nvar ValueEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?function(!DataSnapshot)} callback_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {?Object} context_\r\n     */\r\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\r\n        this.callback_ = callback_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\r\n        return eventType === 'value';\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_1 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_1.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_1 = this.callback_;\r\n            return function () {\r\n                cb_1.call(ctx, eventData.snapshot);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.matches = function (other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callback_ || !this.callback_) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callback_ !== null;\r\n    };\r\n    return ValueEventRegistration;\r\n}());\r\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\r\nvar ChildEventRegistration = /** @class */ (function () {\r\n    /**\r\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n     * @param {?function(Error)} cancelCallback_\r\n     * @param {Object=} context_\r\n     */\r\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\r\n        this.callbacks_ = callbacks_;\r\n        this.cancelCallback_ = cancelCallback_;\r\n        this.context_ = context_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\r\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return util.contains(this.callbacks_, eventToCheck);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\r\n        if (this.cancelCallback_) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\r\n        util.assert(change.childName != null, 'Child events should have a childName.');\r\n        var ref = query.getRef().child(/** @type {!string} */ (change.childName));\r\n        var index = query.getQueryParams().getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\r\n        var ctx = this.context_;\r\n        if (eventData.getEventType() === 'cancel') {\r\n            util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\r\n            var cancelCB_2 = this.cancelCallback_;\r\n            return function () {\r\n                // We know that error exists, we checked above that this is a cancel event\r\n                cancelCB_2.call(ctx, eventData.error);\r\n            };\r\n        }\r\n        else {\r\n            var cb_2 = this.callbacks_[eventData.eventType];\r\n            return function () {\r\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.matches = function (other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            if (!this.callbacks_ || !other.callbacks_) {\r\n                return true;\r\n            }\r\n            else if (this.context_ === other.context_) {\r\n                var otherCount = util.getCount(other.callbacks_);\r\n                var thisCount = util.getCount(this.callbacks_);\r\n                if (otherCount === thisCount) {\r\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\r\n                    //  If event types don't match, not a match\r\n                    // If count is not 1, exact match across all\r\n                    if (otherCount === 1) {\r\n                        var otherKey /** @type {!string} */ = util.getAnyKey(other.callbacks_);\r\n                        var thisKey /** @type {!string} */ = util.getAnyKey(this.callbacks_);\r\n                        return (thisKey === otherKey &&\r\n                            (!other.callbacks_[otherKey] ||\r\n                                !this.callbacks_[thisKey] ||\r\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\r\n                    }\r\n                    else {\r\n                        // Exact match on each key.\r\n                        return util.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\r\n        return this.callbacks_ !== null;\r\n    };\r\n    return ChildEventRegistration;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor;\r\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\r\nvar Query = /** @class */ (function () {\r\n    function Query(repo, path, queryParams_, orderByCalled_) {\r\n        this.repo = repo;\r\n        this.path = path;\r\n        this.queryParams_ = queryParams_;\r\n        this.orderByCalled_ = orderByCalled_;\r\n    }\r\n    Object.defineProperty(Query, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor;\r\n        },\r\n        set: function (val) {\r\n            __referenceConstructor = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Validates start/end values for queries.\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateQueryEndpoints_ = function (params) {\r\n        var startNode = null;\r\n        var endNode = null;\r\n        if (params.hasStart()) {\r\n            startNode = params.getIndexStartValue();\r\n        }\r\n        if (params.hasEnd()) {\r\n            endNode = params.getIndexEndValue();\r\n        }\r\n        if (params.getIndex() === KEY_INDEX) {\r\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n                'startAt(), endAt(), or equalTo().';\r\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\r\n                'or equalTo() must be a string.';\r\n            if (params.hasStart()) {\r\n                var startName = params.getIndexStartName();\r\n                if (startName != MIN_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof startNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n            if (params.hasEnd()) {\r\n                var endName = params.getIndexEndName();\r\n                if (endName != MAX_NAME) {\r\n                    throw new Error(tooManyArgsError);\r\n                }\r\n                else if (typeof endNode !== 'string') {\r\n                    throw new Error(wrongArgTypeError);\r\n                }\r\n            }\r\n        }\r\n        else if (params.getIndex() === PRIORITY_INDEX) {\r\n            if ((startNode != null && !isValidPriority(startNode)) ||\r\n                (endNode != null && !isValidPriority(endNode))) {\r\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\r\n            }\r\n        }\r\n        else {\r\n            util.assert(params.getIndex() instanceof PathIndex ||\r\n                params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n            if ((startNode != null && typeof startNode === 'object') ||\r\n                (endNode != null && typeof endNode === 'object')) {\r\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\r\n                    'an object.');\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Validates that limit* has been called with the correct combination of parameters\r\n     * @param {!QueryParams} params\r\n     * @private\r\n     */\r\n    Query.validateLimit_ = function (params) {\r\n        if (params.hasStart() &&\r\n            params.hasEnd() &&\r\n            params.hasLimit() &&\r\n            !params.hasAnchoredLimit()) {\r\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\r\n        }\r\n    };\r\n    /**\r\n     * Validates that no other order by call has been made\r\n     * @param {!string} fnName\r\n     * @private\r\n     */\r\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\r\n        if (this.orderByCalled_ === true) {\r\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n        }\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     */\r\n    Query.prototype.getQueryParams = function () {\r\n        return this.queryParams_;\r\n    };\r\n    /**\r\n     * @return {!Reference}\r\n     */\r\n    Query.prototype.getRef = function () {\r\n        util.validateArgCount('Query.ref', 0, 0, arguments.length);\r\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\r\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\r\n        // method gets called.\r\n        return new Query.__referenceConstructor(this.repo, this.path);\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @param {!function(DataSnapshot, string=)} callback\r\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n     * @param {Object=} context\r\n     * @return {!function(DataSnapshot, string=)}\r\n     */\r\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\r\n        util.validateArgCount('Query.on', 2, 4, arguments.length);\r\n        validateEventType('Query.on', 1, eventType, false);\r\n        util.validateCallback('Query.on', 2, callback, false);\r\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\r\n        if (eventType === 'value') {\r\n            this.onValueEvent(callback, ret.cancel, ret.context);\r\n        }\r\n        else {\r\n            var callbacks = {};\r\n            callbacks[eventType] = callback;\r\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\r\n        }\r\n        return callback;\r\n    };\r\n    /**\r\n     * @param {!function(!DataSnapshot)} callback\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\r\n        var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n     * @param {?function(Error)} cancelCallback\r\n     * @param {?Object} context\r\n     * @protected\r\n     */\r\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\r\n        var container = new ChildEventRegistration(callbacks, cancelCallback, context);\r\n        this.repo.addEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * @param {string=} eventType\r\n     * @param {(function(!DataSnapshot, ?string=))=} callback\r\n     * @param {Object=} context\r\n     */\r\n    Query.prototype.off = function (eventType, callback, context) {\r\n        util.validateArgCount('Query.off', 0, 3, arguments.length);\r\n        validateEventType('Query.off', 1, eventType, true);\r\n        util.validateCallback('Query.off', 2, callback, true);\r\n        util.validateContextObject('Query.off', 3, context, true);\r\n        var container = null;\r\n        var callbacks = null;\r\n        if (eventType === 'value') {\r\n            var valueCallback = callback || null;\r\n            container = new ValueEventRegistration(valueCallback, null, context || null);\r\n        }\r\n        else if (eventType) {\r\n            if (callback) {\r\n                callbacks = {};\r\n                callbacks[eventType] = callback;\r\n            }\r\n            container = new ChildEventRegistration(callbacks, null, context || null);\r\n        }\r\n        this.repo.removeEventCallbackForQuery(this, container);\r\n    };\r\n    /**\r\n     * Attaches a listener, waits for the first event, and then removes the listener\r\n     * @param {!string} eventType\r\n     * @param {!function(!DataSnapshot, string=)} userCallback\r\n     * @param cancelOrContext\r\n     * @param context\r\n     * @return {!firebase.Promise}\r\n     */\r\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\r\n        var _this = this;\r\n        util.validateArgCount('Query.once', 1, 4, arguments.length);\r\n        validateEventType('Query.once', 1, eventType, false);\r\n        util.validateCallback('Query.once', 2, userCallback, true);\r\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\r\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\r\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\r\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\r\n        // against the Promise specification.\r\n        var firstCall = true;\r\n        var deferred = new util.Deferred();\r\n        // A dummy error handler in case a user wasn't expecting promises\r\n        deferred.promise.catch(function () { });\r\n        var onceCallback = function (snapshot) {\r\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\r\n            // triggers multiple events (e.g. child_added or child_changed).\r\n            if (firstCall) {\r\n                firstCall = false;\r\n                _this.off(eventType, onceCallback);\r\n                if (userCallback) {\r\n                    userCallback.bind(ret.context)(snapshot);\r\n                }\r\n                deferred.resolve(snapshot);\r\n            }\r\n        };\r\n        this.on(eventType, onceCallback, \r\n        /*cancel=*/ function (err) {\r\n            _this.off(eventType, onceCallback);\r\n            if (ret.cancel)\r\n                ret.cancel.bind(ret.context)(err);\r\n            deferred.reject(err);\r\n        });\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the start of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToFirst = function (limit) {\r\n        util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Set a limit and anchor it to the end of the window.\r\n     * @param {!number} limit\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.limitToLast = function (limit) {\r\n        util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\r\n        if (typeof limit !== 'number' ||\r\n            Math.floor(limit) !== limit ||\r\n            limit <= 0) {\r\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\r\n        }\r\n        if (this.queryParams_.hasLimit()) {\r\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\r\n                'limitToFirst, or limitToLast).');\r\n        }\r\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Given a child path, return a new query ordered by the specified grandchild path.\r\n     * @param {!string} path\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByChild = function (path) {\r\n        util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\r\n        if (path === '$key') {\r\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\r\n        }\r\n        else if (path === '$priority') {\r\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\r\n        }\r\n        else if (path === '$value') {\r\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\r\n        }\r\n        validatePathString('Query.orderByChild', 1, path, false);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\r\n        var parsedPath = new Path(path);\r\n        if (parsedPath.isEmpty()) {\r\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\r\n        }\r\n        var index = new PathIndex(parsedPath);\r\n        var newParams = this.queryParams_.orderBy(index);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the KeyIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByKey = function () {\r\n        util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\r\n        var newParams = this.queryParams_.orderBy(KEY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the PriorityIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByPriority = function () {\r\n        util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\r\n        var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * Return a new query ordered by the ValueIndex\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.orderByValue = function () {\r\n        util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\r\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\r\n        var newParams = this.queryParams_.orderBy(VALUE_INDEX);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.startAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.startAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\r\n        validateKey('Query.startAt', 2, name, true);\r\n        var newParams = this.queryParams_.startAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\r\n                'or equalTo).');\r\n        }\r\n        // Calling with no params tells us to start at the beginning.\r\n        if (value === undefined) {\r\n            value = null;\r\n            name = null;\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * @param {number|string|boolean|null} value\r\n     * @param {?string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.endAt = function (value, name) {\r\n        if (value === void 0) { value = null; }\r\n        util.validateArgCount('Query.endAt', 0, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\r\n        validateKey('Query.endAt', 2, name, true);\r\n        var newParams = this.queryParams_.endAt(value, name);\r\n        Query.validateLimit_(newParams);\r\n        Query.validateQueryEndpoints_(newParams);\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\r\n    };\r\n    /**\r\n     * Load the selection of children with exactly the specified value, and, optionally,\r\n     * the specified name.\r\n     * @param {number|string|boolean|null} value\r\n     * @param {string=} name\r\n     * @return {!Query}\r\n     */\r\n    Query.prototype.equalTo = function (value, name) {\r\n        util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\r\n        validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\r\n        validateKey('Query.equalTo', 2, name, true);\r\n        if (this.queryParams_.hasStart()) {\r\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\r\n                'equalTo).');\r\n        }\r\n        if (this.queryParams_.hasEnd()) {\r\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\r\n                'equalTo).');\r\n        }\r\n        return this.startAt(value, name).endAt(value, name);\r\n    };\r\n    /**\r\n     * @return {!string} URL for this location.\r\n     */\r\n    Query.prototype.toString = function () {\r\n        util.validateArgCount('Query.toString', 0, 0, arguments.length);\r\n        return this.repo.toString() + this.path.toUrlEncodedString();\r\n    };\r\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\r\n    // for end-users.\r\n    Query.prototype.toJSON = function () {\r\n        // An optional spacer argument is unnecessary for a string.\r\n        util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\r\n        return this.toString();\r\n    };\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     * @return {!Object}\r\n     */\r\n    Query.prototype.queryObject = function () {\r\n        return this.queryParams_.getQueryObject();\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     */\r\n    Query.prototype.queryIdentifier = function () {\r\n        var obj = this.queryObject();\r\n        var id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    };\r\n    /**\r\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n     * @param {Query} other\r\n     * @return {boolean}\r\n     */\r\n    Query.prototype.isEqual = function (other) {\r\n        util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\r\n        if (!(other instanceof Query)) {\r\n            var error$$1 = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\r\n            throw new Error(error$$1);\r\n        }\r\n        var sameRepo = this.repo === other.repo;\r\n        var samePath = this.path.equals(other.path);\r\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    };\r\n    /**\r\n     * Helper used by .on and .once to extract the context and or cancel arguments.\r\n     * @param {!string} fnName The function name (on or once)\r\n     * @param {(function(Error)|Object)=} cancelOrContext\r\n     * @param {Object=} context\r\n     * @return {{cancel: ?function(Error), context: ?Object}}\r\n     * @private\r\n     */\r\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\r\n        var ret = { cancel: null, context: null };\r\n        if (cancelOrContext && context) {\r\n            ret.cancel = cancelOrContext;\r\n            util.validateCallback(fnName, 3, ret.cancel, true);\r\n            ret.context = context;\r\n            util.validateContextObject(fnName, 4, ret.context, true);\r\n        }\r\n        else if (cancelOrContext) {\r\n            // we have either a cancel callback or a context.\r\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\r\n                // it's a context!\r\n                ret.context = cancelOrContext;\r\n            }\r\n            else if (typeof cancelOrContext === 'function') {\r\n                ret.cancel = cancelOrContext;\r\n            }\r\n            else {\r\n                throw new Error(util.errorPrefix(fnName, 3, true) +\r\n                    ' must either be a cancel callback or a context object.');\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    Object.defineProperty(Query.prototype, \"ref\", {\r\n        get: function () {\r\n            return this.getRef();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Query;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements a set with a count of elements.\r\n *\r\n * @template K, V\r\n */\r\nvar CountedSet = /** @class */ (function () {\r\n    function CountedSet() {\r\n        this.set = {};\r\n    }\r\n    /**\r\n     * @param {!K} item\r\n     * @param {V} val\r\n     */\r\n    CountedSet.prototype.add = function (item, val) {\r\n        this.set[item] = val !== null ? val : true;\r\n    };\r\n    /**\r\n     * @param {!K} key\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.contains = function (key) {\r\n        return util.contains(this.set, key);\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     * @return {V}\r\n     */\r\n    CountedSet.prototype.get = function (item) {\r\n        return this.contains(item) ? this.set[item] : undefined;\r\n    };\r\n    /**\r\n     * @param {!K} item\r\n     */\r\n    CountedSet.prototype.remove = function (item) {\r\n        delete this.set[item];\r\n    };\r\n    /**\r\n     * Deletes everything in the set\r\n     */\r\n    CountedSet.prototype.clear = function () {\r\n        this.set = {};\r\n    };\r\n    /**\r\n     * True if there's nothing in the set\r\n     * @return {boolean}\r\n     */\r\n    CountedSet.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.set);\r\n    };\r\n    /**\r\n     * @return {number} The number of items in the set\r\n     */\r\n    CountedSet.prototype.count = function () {\r\n        return util.getCount(this.set);\r\n    };\r\n    /**\r\n     * Run a function on each k,v pair in the set\r\n     * @param {function(K, V)} fn\r\n     */\r\n    CountedSet.prototype.each = function (fn) {\r\n        util.forEach(this.set, function (k, v) { return fn(k, v); });\r\n    };\r\n    /**\r\n     * Mostly for debugging\r\n     * @return {Array.<K>} The keys present in this CountedSet\r\n     */\r\n    CountedSet.prototype.keys = function () {\r\n        var keys = [];\r\n        util.forEach(this.set, function (k) {\r\n            keys.push(k);\r\n        });\r\n        return keys;\r\n    };\r\n    return CountedSet;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n *\r\n * @constructor\r\n */\r\nvar SparseSnapshotTree = /** @class */ (function () {\r\n    function SparseSnapshotTree() {\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.value_ = null;\r\n        /**\r\n         * @private\r\n         * @type {CountedSet}\r\n         */\r\n        this.children_ = null;\r\n    }\r\n    /**\r\n     * Gets the node stored at the given path if one exists.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {?Node} The retrieved node, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.find = function (path) {\r\n        if (this.value_ != null) {\r\n            return this.value_.getChild(path);\r\n        }\r\n        else if (!path.isEmpty() && this.children_ != null) {\r\n            var childKey = path.getFront();\r\n            path = path.popFront();\r\n            if (this.children_.contains(childKey)) {\r\n                var childTree = this.children_.get(childKey);\r\n                return childTree.find(path);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Stores the given node at the specified path. If there is already a node\r\n     * at a shallower path, it merges the new data into that snapshot node.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @param {!Node} data The new data, or null.\r\n     */\r\n    SparseSnapshotTree.prototype.remember = function (path, data) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = data;\r\n            this.children_ = null;\r\n        }\r\n        else if (this.value_ !== null) {\r\n            this.value_ = this.value_.updateChild(path, data);\r\n        }\r\n        else {\r\n            if (this.children_ == null) {\r\n                this.children_ = new CountedSet();\r\n            }\r\n            var childKey = path.getFront();\r\n            if (!this.children_.contains(childKey)) {\r\n                this.children_.add(childKey, new SparseSnapshotTree());\r\n            }\r\n            var child = this.children_.get(childKey);\r\n            path = path.popFront();\r\n            child.remember(path, data);\r\n        }\r\n    };\r\n    /**\r\n     * Purge the data at path from the cache.\r\n     *\r\n     * @param {!Path} path Path to look up snapshot for.\r\n     * @return {boolean} True if this node should now be removed.\r\n     */\r\n    SparseSnapshotTree.prototype.forget = function (path) {\r\n        if (path.isEmpty()) {\r\n            this.value_ = null;\r\n            this.children_ = null;\r\n            return true;\r\n        }\r\n        else {\r\n            if (this.value_ !== null) {\r\n                if (this.value_.isLeafNode()) {\r\n                    // We're trying to forget a node that doesn't exist\r\n                    return false;\r\n                }\r\n                else {\r\n                    var value = this.value_;\r\n                    this.value_ = null;\r\n                    var self_1 = this;\r\n                    value.forEachChild(PRIORITY_INDEX, function (key, tree) {\r\n                        self_1.remember(new Path(key), tree);\r\n                    });\r\n                    return this.forget(path);\r\n                }\r\n            }\r\n            else if (this.children_ !== null) {\r\n                var childKey = path.getFront();\r\n                path = path.popFront();\r\n                if (this.children_.contains(childKey)) {\r\n                    var safeToRemove = this.children_.get(childKey).forget(path);\r\n                    if (safeToRemove) {\r\n                        this.children_.remove(childKey);\r\n                    }\r\n                }\r\n                if (this.children_.isEmpty()) {\r\n                    this.children_ = null;\r\n                    return true;\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Recursively iterates through all of the stored tree and calls the\r\n     * callback on each one.\r\n     *\r\n     * @param {!Path} prefixPath Path to look up node for.\r\n     * @param {!Function} func The function to invoke for each tree.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\r\n        if (this.value_ !== null) {\r\n            func(prefixPath, this.value_);\r\n        }\r\n        else {\r\n            this.forEachChild(function (key, tree) {\r\n                var path = new Path(prefixPath.toString() + '/' + key);\r\n                tree.forEachTree(path, func);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Iterates through each immediate child and triggers the callback.\r\n     *\r\n     * @param {!Function} func The function to invoke for each child.\r\n     */\r\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\r\n        if (this.children_ !== null) {\r\n            this.children_.each(function (key, tree) {\r\n                func(key, tree);\r\n            });\r\n        }\r\n    };\r\n    return SparseSnapshotTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\r\nvar generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\r\nvar resolveDeferredValue = function (value, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    else {\r\n        util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n        return serverValues[value['.sv']];\r\n    }\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!SparseSnapshotTree} tree\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\r\nvar resolveDeferredValueTree = function (tree, serverValues) {\r\n    var resolvedTree = new SparseSnapshotTree();\r\n    tree.forEachTree(new Path(''), function (path, node) {\r\n        resolvedTree.remember(path, resolveDeferredValueSnapshot(node, serverValues));\r\n    });\r\n    return resolvedTree;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\r\nvar resolveDeferredValueSnapshot = function (node, serverValues) {\r\n    var rawPri = node.getPriority().val();\r\n    var priority = resolveDeferredValue(rawPri, serverValues);\r\n    var newNode;\r\n    if (node.isLeafNode()) {\r\n        var leafNode = node;\r\n        var value = resolveDeferredValue(leafNode.getValue(), serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON$1(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        var childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n            var newChildNode = resolveDeferredValueSnapshot(childNode, serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\r\nvar OperationSource = /** @class */ (function () {\r\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\r\n        this.fromUser = fromUser;\r\n        this.fromServer = fromServer;\r\n        this.queryId = queryId;\r\n        this.tagged = tagged;\r\n        util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\r\n    }\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.User = new OperationSource(\r\n    /*fromUser=*/ true, false, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @const\r\n     * @type {!OperationSource}\r\n     */\r\n    OperationSource.Server = new OperationSource(false, \r\n    /*fromServer=*/ true, null, \r\n    /*tagged=*/ false);\r\n    /**\r\n     * @param {string} queryId\r\n     * @return {!OperationSource}\r\n     */\r\n    OperationSource.forServerTaggedQuery = function (queryId) {\r\n        return new OperationSource(false, \r\n        /*fromServer=*/ true, queryId, \r\n        /*tagged=*/ true);\r\n    };\r\n    return OperationSource;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar AckUserWrite = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n     * @param {!boolean} revert\r\n     */\r\n    function AckUserWrite(\r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ affectedTree, \r\n    /**@inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = OperationSource.User;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    AckUserWrite.prototype.operationForChild = function (childName) {\r\n        if (!this.path.isEmpty()) {\r\n            util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            var childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(Path.Empty, childTree, this.revert);\r\n        }\r\n    };\r\n    return AckUserWrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\r\nvar EmptyChildren = function () {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nvar ImmutableTree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {?T} value\r\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n     */\r\n    function ImmutableTree(value, children) {\r\n        if (children === void 0) { children = EmptyChildren(); }\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {!Object.<string, !T>} obj\r\n     * @return {!ImmutableTree.<!T>}\r\n     */\r\n    ImmutableTree.fromObject = function (obj) {\r\n        var tree = ImmutableTree.Empty;\r\n        util.forEach(obj, function (childPath, childSnap) {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    };\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     * @return {boolean}\r\n     */\r\n    ImmutableTree.prototype.isEmpty = function () {\r\n        return this.value === null && this.children.isEmpty();\r\n    };\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n     * on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param {!Path} relativePath The remainder of the path\r\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n     *   node\r\n     * @return {?{path:!Path, value:!T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: Path.Empty, value: this.value };\r\n        }\r\n        else {\r\n            if (relativePath.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = relativePath.getFront();\r\n                var child = this.children.get(front);\r\n                if (child !== null) {\r\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        var fullPath = new Path(front).child(childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     * @param {!Path} relativePath\r\n     * @return {?{path: !Path, value: !T}}\r\n     */\r\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\r\n    };\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @return {!ImmutableTree.<T>} The subtree at the given path\r\n     */\r\n    ImmutableTree.prototype.subtree = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(relativePath.popFront());\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to set value at.\r\n     * @param {?T} toSet Value to set.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\r\n        if (relativePath.isEmpty()) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.set(relativePath.popFront(), toSet);\r\n            var newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param {!Path} relativePath Path to value to remove.\r\n     * @return {!ImmutableTree.<T>} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.remove = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            if (this.children.isEmpty()) {\r\n                return ImmutableTree.Empty;\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                var newChild = child.remove(relativePath.popFront());\r\n                var newChildren = void 0;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return ImmutableTree.Empty;\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param {!Path} relativePath Path to get value for.\r\n     * @return {?T} Value at path, or null.\r\n     */\r\n    ImmutableTree.prototype.get = function (relativePath) {\r\n        if (relativePath.isEmpty()) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(relativePath.popFront());\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param {!Path} relativePath Path to replace subtree for.\r\n     * @param {!ImmutableTree} newTree New tree.\r\n     * @return {!ImmutableTree} Resulting tree.\r\n     */\r\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\r\n        if (relativePath.isEmpty()) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            var front = relativePath.getFront();\r\n            var child = this.children.get(front) || ImmutableTree.Empty;\r\n            var newChild = child.setTree(relativePath.popFront(), newTree);\r\n            var newChildren = void 0;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    };\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     * @template V\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     */\r\n    ImmutableTree.prototype.fold = function (fn) {\r\n        return this.fold_(Path.Empty, fn);\r\n    };\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     * @template V\r\n     * @param {!Path} pathSoFar\r\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n     * @return {V}\r\n     * @private\r\n     */\r\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\r\n        var accum = {};\r\n        this.children.inorderTraversal(function (childKey, childTree) {\r\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    };\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     * @template V\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T):?V} f\r\n     * @return {?V}\r\n     */\r\n    ImmutableTree.prototype.findOnPath = function (path, f) {\r\n        return this.findOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\r\n        var result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathToFollow.isEmpty()) {\r\n                return null;\r\n            }\r\n            else {\r\n                var front = pathToFollow.getFront();\r\n                var nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!function(!Path, !T)} f\r\n     * @returns {!ImmutableTree.<T>}\r\n     */\r\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\r\n        return this.foreachOnPath_(path, Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\r\n        if (pathToFollow.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            var front = pathToFollow.getFront();\r\n            var nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\r\n            }\r\n            else {\r\n                return ImmutableTree.Empty;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param {function(!Path, !T)} f A function to be called with\r\n     *   the path from the root of the tree to a node, and the value at that node.\r\n     *   Called in depth-first order.\r\n     */\r\n    ImmutableTree.prototype.foreach = function (f) {\r\n        this.foreach_(Path.Empty, f);\r\n    };\r\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            childTree.foreach_(currentRelativePath.child(childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {function(string, !T)} f\r\n     */\r\n    ImmutableTree.prototype.foreachChild = function (f) {\r\n        this.children.inorderTraversal(function (childName, childTree) {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    };\r\n    ImmutableTree.Empty = new ImmutableTree(null);\r\n    return ImmutableTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar ListenComplete = /** @class */ (function () {\r\n    function ListenComplete(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    ListenComplete.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new ListenComplete(this.source, Path.Empty);\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, this.path.popFront());\r\n        }\r\n    };\r\n    return ListenComplete;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Overwrite = /** @class */ (function () {\r\n    function Overwrite(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    Overwrite.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\r\n        }\r\n    };\r\n    return Overwrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\r\nvar Merge = /** @class */ (function () {\r\n    function Merge(\r\n    /**@inheritDoc */ source, \r\n    /**@inheritDoc */ path, \r\n    /**@inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.operationForChild = function (childName) {\r\n        if (this.path.isEmpty()) {\r\n            var childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, Path.Empty, childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, Path.Empty, childTree);\r\n            }\r\n        }\r\n        else {\r\n            util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, this.path.popFront(), this.children);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    Merge.prototype.toString = function () {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    };\r\n    return Merge;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nvar CacheNode = /** @class */ (function () {\r\n    /**\r\n     * @param {!Node} node_\r\n     * @param {boolean} fullyInitialized_\r\n     * @param {boolean} filtered_\r\n     */\r\n    function CacheNode(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFullyInitialized = function () {\r\n        return this.fullyInitialized_;\r\n    };\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isFiltered = function () {\r\n        return this.filtered_;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForPath = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        var childKey = path.getFront();\r\n        return this.isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!string} key\r\n     * @return {boolean}\r\n     */\r\n    CacheNode.prototype.isCompleteForChild = function (key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    };\r\n    /**\r\n     * @return {!Node}\r\n     */\r\n    CacheNode.prototype.getNode = function () {\r\n        return this.node_;\r\n    };\r\n    return CacheNode;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\r\nvar ViewCache = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!CacheNode} eventCache_\r\n     * @param {!CacheNode} serverCache_\r\n     */\r\n    function ViewCache(eventCache_, serverCache_) {\r\n        this.eventCache_ = eventCache_;\r\n        this.serverCache_ = serverCache_;\r\n    }\r\n    /**\r\n     * @param {!Node} eventSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\r\n        return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\r\n    };\r\n    /**\r\n     * @param {!Node} serverSnap\r\n     * @param {boolean} complete\r\n     * @param {boolean} filtered\r\n     * @return {!ViewCache}\r\n     */\r\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\r\n        return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getEventCache = function () {\r\n        return this.eventCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteEventSnap = function () {\r\n        return this.eventCache_.isFullyInitialized()\r\n            ? this.eventCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @return {!CacheNode}\r\n     */\r\n    ViewCache.prototype.getServerCache = function () {\r\n        return this.serverCache_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    ViewCache.prototype.getCompleteServerSnap = function () {\r\n        return this.serverCache_.isFullyInitialized()\r\n            ? this.serverCache_.getNode()\r\n            : null;\r\n    };\r\n    /**\r\n     * @const\r\n     * @type {ViewCache}\r\n     */\r\n    ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false), new CacheNode(ChildrenNode.EMPTY_NODE, \r\n    /*fullyInitialized=*/ false, \r\n    /*filtered=*/ false));\r\n    return ViewCache;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\r\nvar Change = /** @class */ (function () {\r\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\r\n        this.type = type;\r\n        this.snapshotNode = snapshotNode;\r\n        this.childName = childName;\r\n        this.oldSnap = oldSnap;\r\n        this.prevName = prevName;\r\n    }\r\n    /**\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.valueChange = function (snapshot) {\r\n        return new Change(Change.VALUE, snapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childAddedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childRemovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} newSnapshot\r\n     * @param {!Node} oldSnapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\r\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\r\n    };\r\n    /**\r\n     * @param {string} childKey\r\n     * @param {!Node} snapshot\r\n     * @return {!Change}\r\n     */\r\n    Change.childMovedChange = function (childKey, snapshot) {\r\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\r\n    };\r\n    //event types\r\n    /** Event type for a child added */\r\n    Change.CHILD_ADDED = 'child_added';\r\n    /** Event type for a child removed */\r\n    Change.CHILD_REMOVED = 'child_removed';\r\n    /** Event type for a child changed */\r\n    Change.CHILD_CHANGED = 'child_changed';\r\n    /** Event type for a child moved */\r\n    Change.CHILD_MOVED = 'child_moved';\r\n    /** Event type for a value change */\r\n    Change.VALUE = 'value';\r\n    return Change;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\r\nvar IndexedFilter = /** @class */ (function () {\r\n    function IndexedFilter(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        var oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\r\n                }\r\n                else {\r\n                    util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        var oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.filtersNodes = function () {\r\n        return false;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndexedFilter = function () {\r\n        return this;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    IndexedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    return IndexedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n */\r\nvar ChildChangeAccumulator = /** @class */ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap_ = {};\r\n    }\r\n    /**\r\n     * @param {!Change} change\r\n     */\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey /** @type {!string} */ = change.childName;\r\n        util.assert(type == Change.CHILD_ADDED ||\r\n            type == Change.CHILD_CHANGED ||\r\n            type == Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = util.safeGet(this.changeMap_, childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type == Change.CHILD_ADDED && oldType == Change.CHILD_REMOVED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                delete this.changeMap_[childKey];\r\n            }\r\n            else if (type == Change.CHILD_REMOVED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childRemovedChange(childKey, oldChange.oldSnap);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_ADDED) {\r\n                this.changeMap_[childKey] = Change.childAddedChange(childKey, change.snapshotNode);\r\n            }\r\n            else if (type == Change.CHILD_CHANGED &&\r\n                oldType == Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\r\n            }\r\n            else {\r\n                throw util.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap_[childKey] = change;\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return util.getValues(this.changeMap_);\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\r\nvar NoCompleteChildSource_ = /** @class */ (function () {\r\n    function NoCompleteChildSource_() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\r\n        return null;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        return null;\r\n    };\r\n    return NoCompleteChildSource_;\r\n}());\r\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\r\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\r\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\r\n    /**\r\n     * @param {!WriteTreeRef} writes_\r\n     * @param {!ViewCache} viewCache_\r\n     * @param {?Node} optCompleteServerCache_\r\n     */\r\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\r\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\r\n        var node = this.viewCache_.getEventCache();\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            var serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.getServerCache();\r\n            return this.writes_.calcCompleteChild(childKey, serverNode);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\r\n        var completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : this.viewCache_.getCompleteServerSnap();\r\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    };\r\n    return WriteTreeCompleteChildSource;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @constructor\r\n * @struct\r\n */\r\nvar ProcessorResult = /** @class */ (function () {\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Array.<!Change>} changes\r\n     */\r\n    function ProcessorResult(viewCache, changes) {\r\n        this.viewCache = viewCache;\r\n        this.changes = changes;\r\n    }\r\n    return ProcessorResult;\r\n}());\r\n/**\r\n * @constructor\r\n */\r\nvar ViewProcessor = /** @class */ (function () {\r\n    /**\r\n     * @param {!NodeFilter} filter_\r\n     */\r\n    function ViewProcessor(filter_) {\r\n        this.filter_ = filter_;\r\n    }\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     */\r\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\r\n        util.assert(viewCache\r\n            .getEventCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\r\n        util.assert(viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @return {!ProcessorResult}\r\n     */\r\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\r\n        var accumulator = new ChildChangeAccumulator();\r\n        var newViewCache, filterServerNode;\r\n        if (operation.type === OperationType.OVERWRITE) {\r\n            var overwrite = operation;\r\n            if (overwrite.source.fromUser) {\r\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(overwrite.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n                // again\r\n                filterServerNode =\r\n                    overwrite.source.tagged ||\r\n                        (oldViewCache.getServerCache().isFiltered() &&\r\n                            !overwrite.path.isEmpty());\r\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.MERGE) {\r\n            var merge = operation;\r\n            if (merge.source.fromUser) {\r\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                util.assert(merge.source.fromServer, 'Unknown source.');\r\n                // We filter the node if it's a tagged update or the node has been previously filtered\r\n                filterServerNode =\r\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\r\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n            var ackUserWrite = operation;\r\n            if (!ackUserWrite.revert) {\r\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n            }\r\n            else {\r\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n            }\r\n        }\r\n        else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\r\n        }\r\n        else {\r\n            throw util.assertionError('Unknown operation type: ' + operation.type);\r\n        }\r\n        var changes = accumulator.getChanges();\r\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\r\n        return new ProcessorResult(newViewCache, changes);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!ViewCache} newViewCache\r\n     * @param {!Array.<!Change>} accumulator\r\n     * @private\r\n     */\r\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\r\n        var eventSnap = newViewCache.getEventCache();\r\n        if (eventSnap.isFullyInitialized()) {\r\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\r\n            if (accumulator.length > 0 ||\r\n                !oldViewCache.getEventCache().isFullyInitialized() ||\r\n                (isLeafOrEmpty &&\r\n                    !eventSnap\r\n                        .getNode()\r\n                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\r\n                !eventSnap\r\n                    .getNode()\r\n                    .getPriority()\r\n                    .equals(oldCompleteSnap.getPriority())) {\r\n                accumulator.push(Change.valueChange(\r\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} changePath\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!CompleteChildSource} source\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\r\n        var oldEventSnap = viewCache.getEventCache();\r\n        if (writesCache.shadowingWrite(changePath) != null) {\r\n            // we have a shadowing write, ignore changes\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var newEventCache = void 0, serverNode = void 0;\r\n            if (changePath.isEmpty()) {\r\n                // TODO: figure out how this plays with \"sliding ack windows\"\r\n                util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n                if (viewCache.getServerCache().isFiltered()) {\r\n                    // We need to special case this, because we need to only apply writes to complete children, or\r\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                    // writes cannot be guaranteed to be complete\r\n                    var serverCache = viewCache.getCompleteServerSnap();\r\n                    var completeChildren = serverCache instanceof ChildrenNode\r\n                        ? serverCache\r\n                        : ChildrenNode.EMPTY_NODE;\r\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\r\n                }\r\n                else {\r\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\r\n                }\r\n            }\r\n            else {\r\n                var childKey = changePath.getFront();\r\n                if (childKey == '.priority') {\r\n                    util.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\r\n                    var oldEventNode = oldEventSnap.getNode();\r\n                    serverNode = viewCache.getServerCache().getNode();\r\n                    // we might have overwrites for this priority\r\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\r\n                    if (updatedPriority != null) {\r\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\r\n                    }\r\n                    else {\r\n                        // priority didn't change, keep old node\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n                else {\r\n                    var childChangePath = changePath.popFront();\r\n                    // update child\r\n                    var newEventChild = void 0;\r\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                        serverNode = viewCache.getServerCache().getNode();\r\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\r\n                        if (eventChildUpdate != null) {\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey)\r\n                                .updateChild(childChangePath, eventChildUpdate);\r\n                        }\r\n                        else {\r\n                            // Nothing changed, just keep the old child\r\n                            newEventChild = oldEventSnap\r\n                                .getNode()\r\n                                .getImmediateChild(childKey);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                    }\r\n                    if (newEventChild != null) {\r\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                    }\r\n                    else {\r\n                        // no complete child available or no change\r\n                        newEventCache = oldEventSnap.getNode();\r\n                    }\r\n                }\r\n            }\r\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n        var oldServerSnap = oldViewCache.getServerCache();\r\n        var newServerCache;\r\n        var serverFilter = filterServerNode\r\n            ? this.filter_\r\n            : this.filter_.getIndexedFilter();\r\n        if (changePath.isEmpty()) {\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n        }\r\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n            var newServerNode = oldServerSnap\r\n                .getNode()\r\n                .updateChild(changePath, changedSnap);\r\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n                changePath.getLength() > 1) {\r\n                // We don't update incomplete nodes with updates intended for other listeners\r\n                return oldViewCache;\r\n            }\r\n            var childChangePath = changePath.popFront();\r\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n            if (childKey == '.priority') {\r\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n            }\r\n            else {\r\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n            }\r\n        }\r\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\r\n        var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} oldViewCache\r\n     * @param {!Path} changePath\r\n     * @param {!Node} changedSnap\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n        var oldEventSnap = oldViewCache.getEventCache();\r\n        var newViewCache, newEventCache;\r\n        var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n        if (changePath.isEmpty()) {\r\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\r\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\r\n        }\r\n        else {\r\n            var childKey = changePath.getFront();\r\n            if (childKey === '.priority') {\r\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\r\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n            }\r\n            else {\r\n                var childChangePath = changePath.popFront();\r\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                var newChild = void 0;\r\n                if (childChangePath.isEmpty()) {\r\n                    // Child overwrite, we can replace the child\r\n                    newChild = changedSnap;\r\n                }\r\n                else {\r\n                    var childNode = source.getCompleteChild(childKey);\r\n                    if (childNode != null) {\r\n                        if (childChangePath.getBack() === '.priority' &&\r\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\r\n                            // This is a priority update on an empty node. If this node exists on the server, the\r\n                            // server will send down the priority in the update, so ignore for now\r\n                            newChild = childNode;\r\n                        }\r\n                        else {\r\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no complete child node available\r\n                        newChild = ChildrenNode.EMPTY_NODE;\r\n                    }\r\n                }\r\n                if (!oldChild.equals(newChild)) {\r\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\r\n                }\r\n                else {\r\n                    newViewCache = oldViewCache;\r\n                }\r\n            }\r\n        }\r\n        return newViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {string} childKey\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\r\n        return viewCache.getEventCache().isCompleteForChild(childKey);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n        var _this = this;\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        changedChildren.foreach(function (relativePath, childNode) {\r\n            var writePath = path.child(relativePath);\r\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\r\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!Node} node\r\n     * @param {ImmutableTree.<!Node>} merge\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\r\n        merge.foreach(function (relativePath, childNode) {\r\n            node = node.updateChild(relativePath, childNode);\r\n        });\r\n        return node;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!ImmutableTree.<!Node>} changedChildren\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache\r\n     * @param {boolean} filterServerNode\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n        var _this = this;\r\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n        // wait for the complete data update coming soon.\r\n        if (viewCache\r\n            .getServerCache()\r\n            .getNode()\r\n            .isEmpty() &&\r\n            !viewCache.getServerCache().isFullyInitialized()) {\r\n            return viewCache;\r\n        }\r\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n        // window leaving room for new items.  It's important we process these changes first, so we\r\n        // iterate the changes twice, first processing any that affect items currently in view.\r\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n        // not the other.\r\n        var curViewCache = viewCache;\r\n        var viewMergeTree;\r\n        if (path.isEmpty()) {\r\n            viewMergeTree = changedChildren;\r\n        }\r\n        else {\r\n            viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\r\n        }\r\n        var serverNode = viewCache.getServerCache().getNode();\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\r\n            if (serverNode.hasChild(childKey)) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\r\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\r\n                childMergeTree.value == null;\r\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n                var serverChild = viewCache\r\n                    .getServerCache()\r\n                    .getNode()\r\n                    .getImmediateChild(childKey);\r\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\r\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n            }\r\n        });\r\n        return curViewCache;\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} ackPath\r\n     * @param {!ImmutableTree<!boolean>} affectedTree\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n        if (writesCache.shadowingWrite(ackPath) != null) {\r\n            return viewCache;\r\n        }\r\n        // Only filter server node if it is currently filtered\r\n        var filterServerNode = viewCache.getServerCache().isFiltered();\r\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n        // now that it won't be shadowed.\r\n        var serverCache = viewCache.getServerCache();\r\n        if (affectedTree.value != null) {\r\n            // This is an overwrite.\r\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\r\n                serverCache.isCompleteForPath(ackPath)) {\r\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else if (ackPath.isEmpty()) {\r\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n                // should just re-apply whatever we have in our cache as a merge.\r\n                var changedChildren_1 = ImmutableTree.Empty;\r\n                serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\r\n                    changedChildren_1 = changedChildren_1.set(new Path(name), node);\r\n                });\r\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\r\n            }\r\n            else {\r\n                return viewCache;\r\n            }\r\n        }\r\n        else {\r\n            // This is a merge.\r\n            var changedChildren_2 = ImmutableTree.Empty;\r\n            affectedTree.foreach(function (mergePath, value) {\r\n                var serverCachePath = ackPath.child(mergePath);\r\n                if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n                }\r\n            });\r\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\r\n        var oldServerNode = viewCache.getServerCache();\r\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\r\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n    };\r\n    /**\r\n     * @param {!ViewCache} viewCache\r\n     * @param {!Path} path\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @param {!ChildChangeAccumulator} accumulator\r\n     * @return {!ViewCache}\r\n     * @private\r\n     */\r\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\r\n        var complete;\r\n        if (writesCache.shadowingWrite(path) != null) {\r\n            return viewCache;\r\n        }\r\n        else {\r\n            var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n            var oldEventCache = viewCache.getEventCache().getNode();\r\n            var newEventCache = void 0;\r\n            if (path.isEmpty() || path.getFront() === '.priority') {\r\n                var newNode = void 0;\r\n                if (viewCache.getServerCache().isFullyInitialized()) {\r\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                }\r\n                else {\r\n                    var serverChildren = viewCache.getServerCache().getNode();\r\n                    util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\r\n                }\r\n                newNode = newNode;\r\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\r\n            }\r\n            else {\r\n                var childKey = path.getFront();\r\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\r\n                if (newChild == null &&\r\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\r\n                    newChild = oldEventCache.getImmediateChild(childKey);\r\n                }\r\n                if (newChild != null) {\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\r\n                }\r\n                else if (viewCache\r\n                    .getEventCache()\r\n                    .getNode()\r\n                    .hasChild(childKey)) {\r\n                    // No complete child available, delete the existing one, if any\r\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\r\n                }\r\n                else {\r\n                    newEventCache = oldEventCache;\r\n                }\r\n                if (newEventCache.isEmpty() &&\r\n                    viewCache.getServerCache().isFullyInitialized()) {\r\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\r\n                    if (complete.isLeafNode()) {\r\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\r\n                    }\r\n                }\r\n            }\r\n            complete =\r\n                viewCache.getServerCache().isFullyInitialized() ||\r\n                    writesCache.shadowingWrite(Path.Empty) != null;\r\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\r\n        }\r\n    };\r\n    return ViewProcessor;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\r\nvar EventGenerator = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     */\r\n    function EventGenerator(query_) {\r\n        this.query_ = query_;\r\n        /**\r\n         * @private\r\n         * @type {!Index}\r\n         */\r\n        this.index_ = this.query_.getQueryParams().getIndex();\r\n    }\r\n    /**\r\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n     *\r\n     * Notes:\r\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n     *    our index.\r\n     *  - prevName will be calculated based on the index ordering.\r\n     *\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {!Array.<!EventRegistration>} eventRegistrations\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\r\n        var _this = this;\r\n        var events = [];\r\n        var moves = [];\r\n        changes.forEach(function (change) {\r\n            if (change.type === Change.CHILD_CHANGED &&\r\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n                moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\r\n            }\r\n        });\r\n        this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\r\n        this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\r\n        return events;\r\n    };\r\n    /**\r\n     * Given changes of a single change type, generate the corresponding events.\r\n     *\r\n     * @param {!Array.<!Event>} events\r\n     * @param {!string} eventType\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Array.<!EventRegistration>} registrations\r\n     * @param {!Node} eventCache\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\r\n        var _this = this;\r\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\r\n        filteredChanges.sort(this.compareChanges_.bind(this));\r\n        filteredChanges.forEach(function (change) {\r\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\r\n            registrations.forEach(function (registration) {\r\n                if (registration.respondsTo(change.type)) {\r\n                    events.push(registration.createEvent(materializedChange, _this.query_));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Change} change\r\n     * @param {!Node} eventCache\r\n     * @return {!Change}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\r\n        if (change.type === 'value' || change.type === 'child_removed') {\r\n            return change;\r\n        }\r\n        else {\r\n            change.prevName = eventCache.getPredecessorChildName(\r\n            /** @type {!string} */\r\n            change.childName, change.snapshotNode, this.index_);\r\n            return change;\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Change} a\r\n     * @param {!Change} b\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\r\n        if (a.childName == null || b.childName == null) {\r\n            throw util.assertionError('Should only compare child_ events.');\r\n        }\r\n        var aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n        var bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n        return this.index_.compare(aWrapped, bWrapped);\r\n    };\r\n    return EventGenerator;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\r\nvar View = /** @class */ (function () {\r\n    /**\r\n     *\r\n     * @param {!Query} query_\r\n     * @param {!ViewCache} initialViewCache\r\n     */\r\n    function View(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        var params = this.query_.getQueryParams();\r\n        var indexFilter = new IndexedFilter(params.getIndex());\r\n        var filter = params.getNodeFilter();\r\n        /**\r\n         * @type {ViewProcessor}\r\n         * @private\r\n         */\r\n        this.processor_ = new ViewProcessor(filter);\r\n        var initialServerCache = initialViewCache.getServerCache();\r\n        var initialEventCache = initialViewCache.getEventCache();\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        /**\r\n         * @type {!ViewCache}\r\n         * @private\r\n         */\r\n        this.viewCache_ = new ViewCache(newEventCache, newServerCache);\r\n        /**\r\n         * @type {!EventGenerator}\r\n         * @private\r\n         */\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    /**\r\n     * @return {!Query}\r\n     */\r\n    View.prototype.getQuery = function () {\r\n        return this.query_;\r\n    };\r\n    /**\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getServerCache = function () {\r\n        return this.viewCache_.getServerCache().getNode();\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    View.prototype.getCompleteServerCache = function (path) {\r\n        var cache = this.viewCache_.getCompleteServerSnap();\r\n        if (cache) {\r\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n            // we need to see if it contains the child we're interested in.\r\n            if (this.query_.getQueryParams().loadsAllData() ||\r\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\r\n                return cache.getChild(path);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    View.prototype.isEmpty = function () {\r\n        return this.eventRegistrations_.length === 0;\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    View.prototype.addEventRegistration = function (eventRegistration) {\r\n        this.eventRegistrations_.push(eventRegistration);\r\n    };\r\n    /**\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\r\n        var cancelEvents = [];\r\n        if (cancelError) {\r\n            util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n            var path_1 = this.query_.path;\r\n            this.eventRegistrations_.forEach(function (registration) {\r\n                cancelError /** @type {!Error} */ = cancelError;\r\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\r\n                if (maybeEvent) {\r\n                    cancelEvents.push(maybeEvent);\r\n                }\r\n            });\r\n        }\r\n        if (eventRegistration) {\r\n            var remaining = [];\r\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\r\n                var existing = this.eventRegistrations_[i];\r\n                if (!existing.matches(eventRegistration)) {\r\n                    remaining.push(existing);\r\n                }\r\n                else if (eventRegistration.hasAnyCallback()) {\r\n                    // We're removing just this one\r\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\r\n                    break;\r\n                }\r\n            }\r\n            this.eventRegistrations_ = remaining;\r\n        }\r\n        else {\r\n            this.eventRegistrations_ = [];\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} completeServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\r\n        if (operation.type === OperationType.MERGE &&\r\n            operation.source.queryId !== null) {\r\n            util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\r\n            util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\r\n        }\r\n        var oldViewCache = this.viewCache_;\r\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\r\n        this.processor_.assertIndexed(result.viewCache);\r\n        util.assert(result.viewCache.getServerCache().isFullyInitialized() ||\r\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n        this.viewCache_ = result.viewCache;\r\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\r\n    };\r\n    /**\r\n     * @param {!EventRegistration} registration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.getInitialEvents = function (registration) {\r\n        var eventSnap = this.viewCache_.getEventCache();\r\n        var initialChanges = [];\r\n        if (!eventSnap.getNode().isLeafNode()) {\r\n            var eventNode = eventSnap.getNode();\r\n            eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n                initialChanges.push(Change.childAddedChange(key, childNode));\r\n            });\r\n        }\r\n        if (eventSnap.isFullyInitialized()) {\r\n            initialChanges.push(Change.valueChange(eventSnap.getNode()));\r\n        }\r\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {!Array.<!Change>} changes\r\n     * @param {!Node} eventCache\r\n     * @param {EventRegistration=} eventRegistration\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\r\n        var registrations = eventRegistration\r\n            ? [eventRegistration]\r\n            : this.eventRegistrations_;\r\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\r\n    };\r\n    return View;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar __referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nvar SyncPoint = /** @class */ (function () {\r\n    function SyncPoint() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         *\r\n         * @type {!Object.<!string, !View>}\r\n         * @private\r\n         */\r\n        this.views_ = {};\r\n    }\r\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\r\n        get: function () {\r\n            util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\r\n            return __referenceConstructor$1;\r\n        },\r\n        set: function (val) {\r\n            util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\r\n            __referenceConstructor$1 = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.isEmpty = function () {\r\n        return util.isEmpty(this.views_);\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Operation} operation\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} optCompleteServerCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\r\n        var queryId = operation.source.queryId;\r\n        if (queryId !== null) {\r\n            var view = util.safeGet(this.views_, queryId);\r\n            util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\r\n        }\r\n        else {\r\n            var events_1 = [];\r\n            util.forEach(this.views_, function (key, view) {\r\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\r\n            });\r\n            return events_1;\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @param {?Node} serverCache Complete server cache, if we have it.\r\n     * @param {boolean} serverCacheComplete\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var view = util.safeGet(this.views_, queryId);\r\n        if (!view) {\r\n            // TODO: make writesCache take flag for complete server node\r\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\r\n            var eventCacheComplete = false;\r\n            if (eventCache) {\r\n                eventCacheComplete = true;\r\n            }\r\n            else if (serverCache instanceof ChildrenNode) {\r\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\r\n                eventCacheComplete = false;\r\n            }\r\n            else {\r\n                eventCache = ChildrenNode.EMPTY_NODE;\r\n                eventCacheComplete = false;\r\n            }\r\n            var viewCache = new ViewCache(new CacheNode(\r\n            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode(\r\n            /** @type {!Node} */ (serverCache), serverCacheComplete, false));\r\n            view = new View(query, viewCache);\r\n            this.views_[queryId] = view;\r\n        }\r\n        // This is guaranteed to exist now, we just created anything that was missing\r\n        view.addEventRegistration(eventRegistration);\r\n        return view.getInitialEvents(eventRegistration);\r\n    };\r\n    /**\r\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n     *\r\n     * If query is the default query, we'll check all views for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n     */\r\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var queryId = query.queryIdentifier();\r\n        var removed = [];\r\n        var cancelEvents = [];\r\n        var hadCompleteView = this.hasCompleteView();\r\n        if (queryId === 'default') {\r\n            // When you do ref.off(...), we search all views for the registration to remove.\r\n            var self_1 = this;\r\n            util.forEach(this.views_, function (viewQueryId, view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete self_1.views_[viewQueryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // remove the callback from the specific view.\r\n            var view = util.safeGet(this.views_, queryId);\r\n            if (view) {\r\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\r\n                if (view.isEmpty()) {\r\n                    delete this.views_[queryId];\r\n                    // We'll deal with complete views later.\r\n                    if (!view\r\n                        .getQuery()\r\n                        .getQueryParams()\r\n                        .loadsAllData()) {\r\n                        removed.push(view.getQuery());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (hadCompleteView && !this.hasCompleteView()) {\r\n            // We removed our last complete view.\r\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\r\n        }\r\n        return { removed: removed, events: cancelEvents };\r\n    };\r\n    /**\r\n     * @return {!Array.<!View>}\r\n     */\r\n    SyncPoint.prototype.getQueryViews = function () {\r\n        var _this = this;\r\n        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });\r\n        return values.filter(function (view) {\r\n            return !view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!Path} path The path to the desired complete snapshot\r\n     * @return {?Node} A complete cache, if it exists\r\n     */\r\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\r\n        var serverCache = null;\r\n        util.forEach(this.views_, function (key, view) {\r\n            serverCache = serverCache || view.getCompleteServerCache(path);\r\n        });\r\n        return serverCache;\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.viewForQuery = function (query) {\r\n        var params = query.getQueryParams();\r\n        if (params.loadsAllData()) {\r\n            return this.getCompleteView();\r\n        }\r\n        else {\r\n            var queryId = query.queryIdentifier();\r\n            return util.safeGet(this.views_, queryId);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\r\n        return this.viewForQuery(query) != null;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    SyncPoint.prototype.hasCompleteView = function () {\r\n        return this.getCompleteView() != null;\r\n    };\r\n    /**\r\n     * @return {?View}\r\n     */\r\n    SyncPoint.prototype.getCompleteView = function () {\r\n        var completeView = util.findValue(this.views_, function (view) {\r\n            return view\r\n                .getQuery()\r\n                .getQueryParams()\r\n                .loadsAllData();\r\n        });\r\n        return completeView || null;\r\n    };\r\n    return SyncPoint;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n *\r\n * @constructor\r\n * @param {!ImmutableTree.<!Node>} writeTree\r\n */\r\nvar CompoundWrite = /** @class */ (function () {\r\n    function CompoundWrite(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Node} node\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrite = function (path, node) {\r\n        if (path.isEmpty()) {\r\n            return new CompoundWrite(new ImmutableTree(node));\r\n        }\r\n        else {\r\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n            if (rootmost != null) {\r\n                var rootMostPath = rootmost.path;\r\n                var value = rootmost.value;\r\n                var relativePath = Path.relativePath(rootMostPath, path);\r\n                value = value.updateChild(relativePath, node);\r\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\r\n            }\r\n            else {\r\n                var subtree = new ImmutableTree(node);\r\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\r\n                return new CompoundWrite(newWriteTree);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} updates\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.addWrites = function (path, updates) {\r\n        var newWrite = this;\r\n        util.forEach(updates, function (childKey, node) {\r\n            newWrite = newWrite.addWrite(path.child(childKey), node);\r\n        });\r\n        return newWrite;\r\n    };\r\n    /**\r\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n     * location, which must be removed by calling this method with that path.\r\n     *\r\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\r\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n     */\r\n    CompoundWrite.prototype.removeWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return CompoundWrite.Empty;\r\n        }\r\n        else {\r\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n     * considered \"complete\".\r\n     *\r\n     * @param {!Path} path The path to check for\r\n     * @return {boolean} Whether there is a complete write at that path\r\n     */\r\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\r\n        return this.getCompleteNode(path) != null;\r\n    };\r\n    /**\r\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n     * writes from deeper paths, but will return child nodes from a more shallow path.\r\n     *\r\n     * @param {!Path} path The path to get a complete write\r\n     * @return {?Node} The node if complete at that path, or null otherwise.\r\n     */\r\n    CompoundWrite.prototype.getCompleteNode = function (path) {\r\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            return this.writeTree_\r\n                .get(rootmost.path)\r\n                .getChild(Path.relativePath(rootmost.path, path));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Returns all children that are guaranteed to be a complete overwrite.\r\n     *\r\n     * @return {!Array.<NamedNode>} A list of all complete children.\r\n     */\r\n    CompoundWrite.prototype.getCompleteChildren = function () {\r\n        var children = [];\r\n        var node = this.writeTree_.value;\r\n        if (node != null) {\r\n            // If it's a leaf node, it has no children; so nothing to do.\r\n            if (!node.isLeafNode()) {\r\n                node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                    children.push(new NamedNode(childName, childNode));\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\r\n                if (childTree.value != null) {\r\n                    children.push(new NamedNode(childName, childTree.value));\r\n                }\r\n            });\r\n        }\r\n        return children;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @return {!CompoundWrite}\r\n     */\r\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\r\n        if (path.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            var shadowingNode = this.getCompleteNode(path);\r\n            if (shadowingNode != null) {\r\n                return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n            }\r\n            else {\r\n                return new CompoundWrite(this.writeTree_.subtree(path));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n     * @return {boolean} Whether this CompoundWrite is empty\r\n     */\r\n    CompoundWrite.prototype.isEmpty = function () {\r\n        return this.writeTree_.isEmpty();\r\n    };\r\n    /**\r\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n     * node\r\n     * @param {!Node} node The node to apply this CompoundWrite to\r\n     * @return {!Node} The node with all writes applied\r\n     */\r\n    CompoundWrite.prototype.apply = function (node) {\r\n        return CompoundWrite.applySubtreeWrite_(Path.Empty, this.writeTree_, node);\r\n    };\r\n    /**\r\n     * @type {!CompoundWrite}\r\n     */\r\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\r\n    /**\r\n     * @param {!Path} relativePath\r\n     * @param {!ImmutableTree.<!Node>} writeTree\r\n     * @param {!Node} node\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\r\n        if (writeTree.value != null) {\r\n            // Since there a write is always a leaf, we're done here\r\n            return node.updateChild(relativePath, writeTree.value);\r\n        }\r\n        else {\r\n            var priorityWrite_1 = null;\r\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\r\n                if (childKey === '.priority') {\r\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                    // to apply priorities to empty nodes that are later filled\r\n                    util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                    priorityWrite_1 = childTree.value;\r\n                }\r\n                else {\r\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\r\n                }\r\n            });\r\n            // If there was a priority write, we only apply it if the node is not empty\r\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\r\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\r\n            }\r\n            return node;\r\n        }\r\n    };\r\n    return CompoundWrite;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\r\nvar WriteTree = /** @class */ (function () {\r\n    function WriteTree() {\r\n        /**\r\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n         * applyLocally=false or writes that are completely shadowed by other writes.\r\n         *\r\n         * @type {!CompoundWrite}\r\n         * @private\r\n         */\r\n        this.visibleWrites_ = CompoundWrite.Empty;\r\n        /**\r\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n         * used by transactions).\r\n         *\r\n         * @type {!Array.<!WriteRecord>}\r\n         * @private\r\n         */\r\n        this.allWrites_ = [];\r\n        this.lastWriteId_ = -1;\r\n    }\r\n    /**\r\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTree.prototype.childWrites = function (path) {\r\n        return new WriteTreeRef(path, this);\r\n    };\r\n    /**\r\n     * Record a new overwrite from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} writeId\r\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n     */\r\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\r\n        if (visible === undefined) {\r\n            visible = true;\r\n        }\r\n        this.allWrites_.push({\r\n            path: path,\r\n            snap: snap,\r\n            writeId: writeId,\r\n            visible: visible\r\n        });\r\n        if (visible) {\r\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\r\n        }\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * Record a new merge from user code.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     */\r\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\r\n        util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\r\n        this.allWrites_.push({\r\n            path: path,\r\n            children: changedChildren,\r\n            writeId: writeId,\r\n            visible: true\r\n        });\r\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\r\n        this.lastWriteId_ = writeId;\r\n    };\r\n    /**\r\n     * @param {!number} writeId\r\n     * @return {?WriteRecord}\r\n     */\r\n    WriteTree.prototype.getWrite = function (writeId) {\r\n        for (var i = 0; i < this.allWrites_.length; i++) {\r\n            var record = this.allWrites_[i];\r\n            if (record.writeId === writeId) {\r\n                return record;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n     *\r\n     * @param {!number} writeId\r\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n     * events as a result).\r\n     */\r\n    WriteTree.prototype.removeWrite = function (writeId) {\r\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n        // out of order.\r\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n        var _this = this;\r\n        var idx = this.allWrites_.findIndex(function (s) {\r\n            return s.writeId === writeId;\r\n        });\r\n        util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n        var writeToRemove = this.allWrites_[idx];\r\n        this.allWrites_.splice(idx, 1);\r\n        var removedWriteWasVisible = writeToRemove.visible;\r\n        var removedWriteOverlapsWithOtherWrites = false;\r\n        var i = this.allWrites_.length - 1;\r\n        while (removedWriteWasVisible && i >= 0) {\r\n            var currentWrite = this.allWrites_[i];\r\n            if (currentWrite.visible) {\r\n                if (i >= idx &&\r\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                    // The removed write was completely shadowed by a subsequent write.\r\n                    removedWriteWasVisible = false;\r\n                }\r\n                else if (writeToRemove.path.contains(currentWrite.path)) {\r\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                    removedWriteOverlapsWithOtherWrites = true;\r\n                }\r\n            }\r\n            i--;\r\n        }\r\n        if (!removedWriteWasVisible) {\r\n            return false;\r\n        }\r\n        else if (removedWriteOverlapsWithOtherWrites) {\r\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n            this.resetTree_();\r\n            return true;\r\n        }\r\n        else {\r\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n            if (writeToRemove.snap) {\r\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\r\n            }\r\n            else {\r\n                var children = writeToRemove.children;\r\n                util.forEach(children, function (childName) {\r\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\r\n                });\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n    /**\r\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n     * No server data is considered.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.getCompleteWriteData = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n     * writes), attempt to calculate a complete snapshot for the given path\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        if (!writeIdsToExclude && !includeHiddenWrites) {\r\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\r\n            if (shadowingNode != null) {\r\n                return shadowingNode;\r\n            }\r\n            else {\r\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\r\n                if (subMerge.isEmpty()) {\r\n                    return completeServerCache;\r\n                }\r\n                else if (completeServerCache == null &&\r\n                    !subMerge.hasCompleteWrite(Path.Empty)) {\r\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                    return null;\r\n                }\r\n                else {\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return subMerge.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            if (!includeHiddenWrites && merge.isEmpty()) {\r\n                return completeServerCache;\r\n            }\r\n            else {\r\n                // If the server cache is null, and we don't have a complete cache, we need to return null\r\n                if (!includeHiddenWrites &&\r\n                    completeServerCache == null &&\r\n                    !merge.hasCompleteWrite(Path.Empty)) {\r\n                    return null;\r\n                }\r\n                else {\r\n                    var filter = function (write) {\r\n                        return ((write.visible || includeHiddenWrites) &&\r\n                            (!writeIdsToExclude ||\r\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\r\n                    };\r\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\r\n                    var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                    return mergeAtPath.apply(layeredCache);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n     * Used when creating new views, to pre-fill their complete event children snapshot.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\r\n        var completeChildren = ChildrenNode.EMPTY_NODE;\r\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\r\n        if (topLevelSet) {\r\n            if (!topLevelSet.isLeafNode()) {\r\n                // we're shadowing everything. Return the children.\r\n                topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\r\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n                });\r\n            }\r\n            return completeChildren;\r\n        }\r\n        else if (completeServerChildren) {\r\n            // Layer any children we have on top of this\r\n            // We know we don't have a top-level set, so just enumerate existing children\r\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\r\n            completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\r\n                var node = merge_1\r\n                    .childCompoundWrite(new Path(childName))\r\n                    .apply(childNode);\r\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n            });\r\n            // Add any complete children we have from the set\r\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n        else {\r\n            // We don't have anything to layer on top of. Layer on any children we have\r\n            // Note that we can return an empty snap if we have a defined delete\r\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n            merge.getCompleteChildren().forEach(function (namedNode) {\r\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n            });\r\n            return completeChildren;\r\n        }\r\n    };\r\n    /**\r\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n     * applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!Path} childPath\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\r\n        util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n        var path = treePath.child(childPath);\r\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\r\n            // At this point we can probably guarantee that we're in case 2, meaning no events\r\n            // May need to check visibility while doing the findRootMostValueAndPath call\r\n            return null;\r\n        }\r\n        else {\r\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n            if (childMerge.isEmpty()) {\r\n                // We're not shadowing at all. Case 1\r\n                return existingServerSnap.getChild(childPath);\r\n            }\r\n            else {\r\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n                // However this is tricky to find out, since user updates don't necessary change the server\r\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n                // only check if the updates change the serverNode.\r\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n                return childMerge.apply(existingServerSnap.getChild(childPath));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\r\n        var path = treePath.child(childKey);\r\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            if (existingServerSnap.isCompleteForChild(childKey)) {\r\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\r\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTree.prototype.shadowingWrite = function (path) {\r\n        return this.visibleWrites_.getCompleteNode(path);\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window.\r\n     *\r\n     * @param {!Path} treePath\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\r\n        var toIterate;\r\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\r\n        var shadowingNode = merge.getCompleteNode(Path.Empty);\r\n        if (shadowingNode != null) {\r\n            toIterate = shadowingNode;\r\n        }\r\n        else if (completeServerData != null) {\r\n            toIterate = merge.apply(completeServerData);\r\n        }\r\n        else {\r\n            // no children to iterate on\r\n            return [];\r\n        }\r\n        toIterate = toIterate.withIndex(index);\r\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n            var nodes = [];\r\n            var cmp = index.getCompare();\r\n            var iter = reverse\r\n                ? toIterate.getReverseIteratorFrom(startPost, index)\r\n                : toIterate.getIteratorFrom(startPost, index);\r\n            var next = iter.getNext();\r\n            while (next && nodes.length < count) {\r\n                if (cmp(next, startPost) !== 0) {\r\n                    nodes.push(next);\r\n                }\r\n                next = iter.getNext();\r\n            }\r\n            return nodes;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * @param {!WriteRecord} writeRecord\r\n     * @param {!Path} path\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\r\n        if (writeRecord.snap) {\r\n            return writeRecord.path.contains(path);\r\n        }\r\n        else {\r\n            // findKey can return undefined, so use !! to coerce to boolean\r\n            return !!util.findKey(writeRecord.children, function (childSnap, childName) {\r\n                return writeRecord.path.child(childName).contains(path);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n     * @private\r\n     */\r\n    WriteTree.prototype.resetTree_ = function () {\r\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\r\n        if (this.allWrites_.length > 0) {\r\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\r\n        }\r\n        else {\r\n            this.lastWriteId_ = -1;\r\n        }\r\n    };\r\n    /**\r\n     * The default filter used when constructing the tree. Keep everything that's visible.\r\n     *\r\n     * @param {!WriteRecord} write\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    WriteTree.DefaultFilter_ = function (write) {\r\n        return write.visible;\r\n    };\r\n    /**\r\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n     * event data at that path.\r\n     *\r\n     * @param {!Array.<!WriteRecord>} writes\r\n     * @param {!function(!WriteRecord):boolean} filter\r\n     * @param {!Path} treeRoot\r\n     * @return {!CompoundWrite}\r\n     * @private\r\n     */\r\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\r\n        var compoundWrite = CompoundWrite.Empty;\r\n        for (var i = 0; i < writes.length; ++i) {\r\n            var write = writes[i];\r\n            // Theory, a later set will either:\r\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n            if (filter(write)) {\r\n                var writePath = write.path;\r\n                var relativePath = void 0;\r\n                if (write.snap) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else if (write.children) {\r\n                    if (treeRoot.contains(writePath)) {\r\n                        relativePath = Path.relativePath(treeRoot, writePath);\r\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\r\n                    }\r\n                    else if (writePath.contains(treeRoot)) {\r\n                        relativePath = Path.relativePath(writePath, treeRoot);\r\n                        if (relativePath.isEmpty()) {\r\n                            compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\r\n                        }\r\n                        else {\r\n                            var child = util.safeGet(write.children, relativePath.getFront());\r\n                            if (child) {\r\n                                // There exists a child in this node that matches the root path\r\n                                var deepNode = child.getChild(relativePath.popFront());\r\n                                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // There is no overlap between root path and write path, ignore write\r\n                    }\r\n                }\r\n                else {\r\n                    throw util.assertionError('WriteRecord should have .snap or .children');\r\n                }\r\n            }\r\n        }\r\n        return compoundWrite;\r\n    };\r\n    return WriteTree;\r\n}());\r\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\r\nvar WriteTreeRef = /** @class */ (function () {\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!WriteTree} writeTree\r\n     */\r\n    function WriteTreeRef(path, writeTree) {\r\n        this.treePath_ = path;\r\n        this.writeTree_ = writeTree;\r\n    }\r\n    /**\r\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n     * can lead to a more expensive calculation.\r\n     *\r\n     * @param {?Node} completeServerCache\r\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n    };\r\n    /**\r\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n     * mix of the given server data and write data.\r\n     *\r\n     * @param {?ChildrenNode} completeServerChildren\r\n     * @return {!ChildrenNode}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\r\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\r\n    };\r\n    /**\r\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n     * if anything, needs to be applied to the event cache.\r\n     *\r\n     * Possibilities:\r\n     *\r\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n     *\r\n     * 2. Some write is completely shadowing. No events to be raised\r\n     *\r\n     * 3. Is partially shadowed. Events should be raised\r\n     *\r\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n     *\r\n     * @param {!Path} path\r\n     * @param {?Node} existingEventSnap\r\n     * @param {?Node} existingServerSnap\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\r\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\r\n    };\r\n    /**\r\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n     * a higher path, this will return the child of that write relative to the write and this path.\r\n     * Returns null if there is no write at this path.\r\n     *\r\n     * @param {!Path} path\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\r\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\r\n    };\r\n    /**\r\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n     * the window, but may now be in the window\r\n     *\r\n     * @param {?Node} completeServerData\r\n     * @param {!NamedNode} startPost\r\n     * @param {!number} count\r\n     * @param {boolean} reverse\r\n     * @param {!Index} index\r\n     * @return {!Array.<!NamedNode>}\r\n     */\r\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\r\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\r\n    };\r\n    /**\r\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n     * complete child for this ChildKey.\r\n     *\r\n     * @param {!string} childKey\r\n     * @param {!CacheNode} existingServerCache\r\n     * @return {?Node}\r\n     */\r\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\r\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\r\n    };\r\n    /**\r\n     * Return a WriteTreeRef for a child.\r\n     *\r\n     * @param {string} childName\r\n     * @return {!WriteTreeRef}\r\n     */\r\n    WriteTreeRef.prototype.child = function (childName) {\r\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\r\n    };\r\n    return WriteTreeRef;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\r\nvar SyncTree = /** @class */ (function () {\r\n    /**\r\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    function SyncTree(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         * @type {!ImmutableTree.<!SyncPoint>}\r\n         * @private\r\n         */\r\n        this.syncPointTree_ = ImmutableTree.Empty;\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         * @type {!WriteTree}\r\n         * @private\r\n         */\r\n        this.pendingWriteTree_ = new WriteTree();\r\n        this.tagToQueryMap_ = {};\r\n        this.queryToTagMap_ = {};\r\n    }\r\n    /**\r\n     * Apply the data changes for a user-generated set() or transaction() call.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @param {number} writeId\r\n     * @param {boolean=} visible\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\r\n        // Record pending write.\r\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\r\n        if (!visible) {\r\n            return [];\r\n        }\r\n        else {\r\n            return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\r\n        }\r\n    };\r\n    /**\r\n     * Apply the data from a user-generated update() call\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} writeId\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\r\n        // Record pending merge.\r\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\r\n    };\r\n    /**\r\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n     *\r\n     * @param {!number} writeId\r\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\r\n        if (revert === void 0) { revert = false; }\r\n        var write = this.pendingWriteTree_.getWrite(writeId);\r\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\r\n        if (!needToReevaluate) {\r\n            return [];\r\n        }\r\n        else {\r\n            var affectedTree_1 = ImmutableTree.Empty;\r\n            if (write.snap != null) {\r\n                // overwrite\r\n                affectedTree_1 = affectedTree_1.set(Path.Empty, true);\r\n            }\r\n            else {\r\n                util.forEach(write.children, function (pathString, node) {\r\n                    affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\r\n                });\r\n            }\r\n            return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\r\n        }\r\n    };\r\n    /**\r\n     * Apply new server data for the specified path..\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} newData\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\r\n        return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\r\n    };\r\n    /**\r\n     * Apply new server data to be merged in at the specified path.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\r\n        var changeTree = ImmutableTree.fromObject(changedChildren);\r\n        return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\r\n    };\r\n    /**\r\n     * Apply a listen complete for a query\r\n     *\r\n     * @param {!Path} path\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyListenComplete = function (path) {\r\n        return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\r\n    };\r\n    /**\r\n     * Apply new server data for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Node} snap\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey != null) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // Query must have been removed already\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply server data to be merged in for the specified tagged query.\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!Object.<string, !Node>} changedChildren\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var changeTree = ImmutableTree.fromObject(changedChildren);\r\n            var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Apply a listen complete for a tagged query\r\n     *\r\n     * @param {!Path} path\r\n     * @param {!number} tag\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\r\n        var queryKey = this.queryKeyForTag_(tag);\r\n        if (queryKey) {\r\n            var r = SyncTree.parseQueryKey_(queryKey);\r\n            var queryPath = r.path, queryId = r.queryId;\r\n            var relativePath = Path.relativePath(queryPath, path);\r\n            var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\r\n            return this.applyTaggedOperation_(queryPath, op);\r\n        }\r\n        else {\r\n            // We've already removed the query. No big deal, ignore the update\r\n            return [];\r\n        }\r\n    };\r\n    /**\r\n     * Add an event callback for the specified query.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     * @return {!Array.<!Event>} Events to raise.\r\n     */\r\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\r\n        var path = query.path;\r\n        var serverCache = null;\r\n        var foundAncestorDefaultView = false;\r\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\r\n            var relativePath = Path.relativePath(pathToSyncPoint, path);\r\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || sp.hasCompleteView();\r\n        });\r\n        var syncPoint = this.syncPointTree_.get(path);\r\n        if (!syncPoint) {\r\n            syncPoint = new SyncPoint();\r\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\r\n        }\r\n        else {\r\n            foundAncestorDefaultView =\r\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\r\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var serverCacheComplete;\r\n        if (serverCache != null) {\r\n            serverCacheComplete = true;\r\n        }\r\n        else {\r\n            serverCacheComplete = false;\r\n            serverCache = ChildrenNode.EMPTY_NODE;\r\n            var subtree = this.syncPointTree_.subtree(path);\r\n            subtree.foreachChild(function (childName, childSyncPoint) {\r\n                var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\r\n                if (completeCache) {\r\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n                }\r\n            });\r\n        }\r\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\r\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\r\n            // We need to track a tag for this query\r\n            var queryKey = SyncTree.makeQueryKey_(query);\r\n            util.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\r\n            var tag = SyncTree.getNextQueryTag_();\r\n            this.queryToTagMap_[queryKey] = tag;\r\n            // Coerce to string to avoid sparse arrays.\r\n            this.tagToQueryMap_['_' + tag] = queryKey;\r\n        }\r\n        var writesCache = this.pendingWriteTree_.childWrites(path);\r\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\r\n            events = events.concat(this.setupListener_(query, view));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Remove event callback(s).\r\n     *\r\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\r\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n     */\r\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\r\n        var _this = this;\r\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n        var path = query.path;\r\n        var maybeSyncPoint = this.syncPointTree_.get(path);\r\n        var cancelEvents = [];\r\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n        // not loadsAllData().\r\n        if (maybeSyncPoint &&\r\n            (query.queryIdentifier() === 'default' ||\r\n                maybeSyncPoint.viewExistsForQuery(query))) {\r\n            /**\r\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n             */\r\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\r\n            if (maybeSyncPoint.isEmpty()) {\r\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\r\n            }\r\n            var removed = removedAndEvents.removed;\r\n            cancelEvents = removedAndEvents.events;\r\n            // We may have just removed one of many listeners and can short-circuit this whole process\r\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n            // properly set up.\r\n            //\r\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n            // queryId === 'default'\r\n            var removingDefault = -1 !==\r\n                removed.findIndex(function (query) {\r\n                    return query.getQueryParams().loadsAllData();\r\n                });\r\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\r\n                return parentSyncPoint.hasCompleteView();\r\n            });\r\n            if (removingDefault && !covered) {\r\n                var subtree = this.syncPointTree_.subtree(path);\r\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n                // removal\r\n                if (!subtree.isEmpty()) {\r\n                    // We need to fold over our subtree and collect the listeners to send\r\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\r\n                    // Ok, we've collected all the listens we need. Set them up.\r\n                    for (var i = 0; i < newViews.length; ++i) {\r\n                        var view = newViews[i], newQuery = view.getQuery();\r\n                        var listener = this.createListenerForView_(view);\r\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\r\n                    }\r\n                }\r\n                else {\r\n                    // There's nothing below us, so nothing we need to start listening on\r\n                }\r\n            }\r\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n            if (!covered && removed.length > 0 && !cancelError) {\r\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n                // default. Otherwise, we need to iterate through and cancel each individual query\r\n                if (removingDefault) {\r\n                    // We don't tag default listeners\r\n                    var defaultTag = null;\r\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\r\n                }\r\n                else {\r\n                    removed.forEach(function (queryToRemove) {\r\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\r\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\r\n                    });\r\n                }\r\n            }\r\n            // Now, clear all of the tags we're tracking for the removed listens\r\n            this.removeTags_(removed);\r\n        }\r\n        else {\r\n            // No-op, this listener must've been already removed\r\n        }\r\n        return cancelEvents;\r\n    };\r\n    /**\r\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\r\n     * it, but as this is only used by transaction code, that should always be the case anyways.\r\n     *\r\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n     * @param {!Path} path The path to the data we want\r\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\r\n     * @return {?Node}\r\n     */\r\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\r\n        var includeHiddenSets = true;\r\n        var writeTree = this.pendingWriteTree_;\r\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\r\n            var relativePath = Path.relativePath(pathSoFar, path);\r\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\r\n            if (serverCache) {\r\n                return serverCache;\r\n            }\r\n        });\r\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n    };\r\n    /**\r\n     * This collapses multiple unfiltered views into a single view, since we only need a single\r\n     * listener for them.\r\n     *\r\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\r\n     * @return {!Array.<!View>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\r\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\r\n                var completeView = maybeChildSyncPoint.getCompleteView();\r\n                return [completeView];\r\n            }\r\n            else {\r\n                // No complete view here, flatten any deeper listens into an array\r\n                var views_1 = [];\r\n                if (maybeChildSyncPoint) {\r\n                    views_1 = maybeChildSyncPoint.getQueryViews();\r\n                }\r\n                util.forEach(childMap, function (key, childViews) {\r\n                    views_1 = views_1.concat(childViews);\r\n                });\r\n                return views_1;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Array.<!Query>} queries\r\n     * @private\r\n     */\r\n    SyncTree.prototype.removeTags_ = function (queries) {\r\n        for (var j = 0; j < queries.length; ++j) {\r\n            var removedQuery = queries[j];\r\n            if (!removedQuery.getQueryParams().loadsAllData()) {\r\n                // We should have a tag for this\r\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\r\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\r\n                delete this.queryToTagMap_[removedQueryKey];\r\n                delete this.tagToQueryMap_['_' + removedQueryTag];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Normalizes a query to a query we send the server for listening\r\n     * @param {!Query} query\r\n     * @return {!Query} The normalized query\r\n     * @private\r\n     */\r\n    SyncTree.queryForListening_ = function (query) {\r\n        if (query.getQueryParams().loadsAllData() &&\r\n            !query.getQueryParams().isDefault()) {\r\n            // We treat queries that load all data as default queries\r\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n            // from Query\r\n            return /** @type {!Query} */ query.getRef();\r\n        }\r\n        else {\r\n            return query;\r\n        }\r\n    };\r\n    /**\r\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n     *\r\n     * @param {!Query} query\r\n     * @param {!View} view\r\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\r\n     * @private\r\n     */\r\n    SyncTree.prototype.setupListener_ = function (query, view) {\r\n        var path = query.path;\r\n        var tag = this.tagForQuery_(query);\r\n        var listener = this.createListenerForView_(view);\r\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n        var subtree = this.syncPointTree_.subtree(path);\r\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n        // may need to shadow other listens as well.\r\n        if (tag) {\r\n            util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\r\n        }\r\n        else {\r\n            // Shadow everything at or below this location, this is a default listener.\r\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\r\n                if (!relativePath.isEmpty() &&\r\n                    maybeChildSyncPoint &&\r\n                    maybeChildSyncPoint.hasCompleteView()) {\r\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\r\n                }\r\n                else {\r\n                    // No default listener here, flatten any deeper queries into an array\r\n                    var queries_1 = [];\r\n                    if (maybeChildSyncPoint) {\r\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\r\n                    }\r\n                    util.forEach(childMap, function (key, childQueries) {\r\n                        queries_1 = queries_1.concat(childQueries);\r\n                    });\r\n                    return queries_1;\r\n                }\r\n            });\r\n            for (var i = 0; i < queriesToStop.length; ++i) {\r\n                var queryToStop = queriesToStop[i];\r\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\r\n            }\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     *\r\n     * @param {!View} view\r\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.createListenerForView_ = function (view) {\r\n        var _this = this;\r\n        var query = view.getQuery();\r\n        var tag = this.tagForQuery_(query);\r\n        return {\r\n            hashFn: function () {\r\n                var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\r\n                return cache.hash();\r\n            },\r\n            onComplete: function (status) {\r\n                if (status === 'ok') {\r\n                    if (tag) {\r\n                        return _this.applyTaggedListenComplete(query.path, tag);\r\n                    }\r\n                    else {\r\n                        return _this.applyListenComplete(query.path);\r\n                    }\r\n                }\r\n                else {\r\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                    var error$$1 = errorForServerCode(status, query);\r\n                    return _this.removeEventRegistration(query, \r\n                    /*eventRegistration*/ null, error$$1);\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n     * @private\r\n     * @param {!Query} query\r\n     * @return {string}\r\n     */\r\n    SyncTree.makeQueryKey_ = function (query) {\r\n        return query.path.toString() + '$' + query.queryIdentifier();\r\n    };\r\n    /**\r\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n     * @private\r\n     * @param {!string} queryKey\r\n     * @return {{queryId: !string, path: !Path}}\r\n     */\r\n    SyncTree.parseQueryKey_ = function (queryKey) {\r\n        var splitIndex = queryKey.indexOf('$');\r\n        util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n        return {\r\n            queryId: queryKey.substr(splitIndex + 1),\r\n            path: new Path(queryKey.substr(0, splitIndex))\r\n        };\r\n    };\r\n    /**\r\n     * Return the query associated with the given tag, if we have one\r\n     * @param {!number} tag\r\n     * @return {?string}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\r\n        return this.tagToQueryMap_['_' + tag];\r\n    };\r\n    /**\r\n     * Return the tag associated with the given query.\r\n     * @param {!Query} query\r\n     * @return {?number}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.tagForQuery_ = function (query) {\r\n        var queryKey = SyncTree.makeQueryKey_(query);\r\n        return util.safeGet(this.queryToTagMap_, queryKey);\r\n    };\r\n    /**\r\n     * Static accessor for query tags.\r\n     * @return {number}\r\n     * @private\r\n     */\r\n    SyncTree.getNextQueryTag_ = function () {\r\n        return SyncTree.nextQueryTag_++;\r\n    };\r\n    /**\r\n     * A helper method to apply tagged operations\r\n     *\r\n     * @param {!Path} queryPath\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\r\n        var syncPoint = this.syncPointTree_.get(queryPath);\r\n        util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\r\n        return syncPoint.applyOperation(operation, writesCache, \r\n        /*serverCache=*/ null);\r\n    };\r\n    /**\r\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n     *\r\n     * NOTES:\r\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\r\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n     *   3. A snapshot Node with cached server data, if we have it.\r\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n     *\r\n     * @param {!Operation} operation\r\n     * @return {!Array.<!Event>}\r\n     * @private\r\n     */\r\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\r\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \r\n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path.Empty));\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        if (operation.path.isEmpty()) {\r\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n        }\r\n        else {\r\n            var syncPoint = syncPointTree.get(Path.Empty);\r\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n            if (serverCache == null && syncPoint != null) {\r\n                serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n            }\r\n            var events = [];\r\n            var childName = operation.path.getFront();\r\n            var childOperation = operation.operationForChild(childName);\r\n            var childTree = syncPointTree.children.get(childName);\r\n            if (childTree && childOperation) {\r\n                var childServerCache = serverCache\r\n                    ? serverCache.getImmediateChild(childName)\r\n                    : null;\r\n                var childWritesCache = writesCache.child(childName);\r\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n            if (syncPoint) {\r\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n            }\r\n            return events;\r\n        }\r\n    };\r\n    /**\r\n     * Recursive helper for applyOperationToSyncPoints_\r\n     *\r\n     * @private\r\n     * @param {!Operation} operation\r\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\r\n     * @param {?Node} serverCache\r\n     * @param {!WriteTreeRef} writesCache\r\n     * @return {!Array.<!Event>}\r\n     */\r\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\r\n        var _this = this;\r\n        var syncPoint = syncPointTree.get(Path.Empty);\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPoint.getCompleteServerCache(Path.Empty);\r\n        }\r\n        var events = [];\r\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\r\n            var childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            var childWritesCache = writesCache.child(childName);\r\n            var childOperation = operation.operationForChild(childName);\r\n            if (childOperation) {\r\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n            }\r\n        });\r\n        if (syncPoint) {\r\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    };\r\n    /**\r\n     * Static tracker for next query tag.\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    SyncTree.nextQueryTag_ = 1;\r\n    return SyncTree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\r\nvar SnapshotHolder = /** @class */ (function () {\r\n    function SnapshotHolder() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    SnapshotHolder.prototype.getNode = function (path) {\r\n        return this.rootNode_.getChild(path);\r\n    };\r\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    };\r\n    return SnapshotHolder;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nvar AuthTokenProvider = /** @class */ (function () {\r\n    /**\r\n     * @param {!FirebaseApp} app_\r\n     */\r\n    function AuthTokenProvider(app_) {\r\n        this.app_ = app_;\r\n    }\r\n    /**\r\n     * @param {boolean} forceRefresh\r\n     * @return {!Promise<FirebaseAuthTokenData>}\r\n     */\r\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\r\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \r\n        // .catch\r\n        function (error$$1) {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error$$1 && error$$1.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error$$1);\r\n            }\r\n        });\r\n    };\r\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\r\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\r\n    };\r\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\r\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.app_.name +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.app_.options) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    };\r\n    return AuthTokenProvider;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\r\nvar StatsCollection = /** @class */ (function () {\r\n    function StatsCollection() {\r\n        this.counters_ = {};\r\n    }\r\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\r\n        if (amount === void 0) { amount = 1; }\r\n        if (!util.contains(this.counters_, name))\r\n            this.counters_[name] = 0;\r\n        this.counters_[name] += amount;\r\n    };\r\n    StatsCollection.prototype.get = function () {\r\n        return util.deepCopy(this.counters_);\r\n    };\r\n    return StatsCollection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar StatsManager = /** @class */ (function () {\r\n    function StatsManager() {\r\n    }\r\n    StatsManager.getCollection = function (repoInfo) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.collections_[hashString]) {\r\n            this.collections_[hashString] = new StatsCollection();\r\n        }\r\n        return this.collections_[hashString];\r\n    };\r\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\r\n        var hashString = repoInfo.toString();\r\n        if (!this.reporters_[hashString]) {\r\n            this.reporters_[hashString] = creatorFunction();\r\n        }\r\n        return this.reporters_[hashString];\r\n    };\r\n    StatsManager.collections_ = {};\r\n    StatsManager.reporters_ = {};\r\n    return StatsManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\r\nvar StatsListener = /** @class */ (function () {\r\n    function StatsListener(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    StatsListener.prototype.get = function () {\r\n        var newStats = this.collection_.get();\r\n        var delta = util.clone(newStats);\r\n        if (this.last_) {\r\n            util.forEach(this.last_, function (stat, value) {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    };\r\n    return StatsListener;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\r\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\n/**\r\n * @constructor\r\n */\r\nvar StatsReporter = /** @class */ (function () {\r\n    /**\r\n     * @param collection\r\n     * @param server_\r\n     */\r\n    function StatsReporter(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        var timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    StatsReporter.prototype.includeStat = function (stat) {\r\n        this.statsToReport_[stat] = true;\r\n    };\r\n    StatsReporter.prototype.reportStats_ = function () {\r\n        var _this = this;\r\n        var stats = this.statsListener_.get();\r\n        var reportedStats = {};\r\n        var haveStatsToReport = false;\r\n        util.forEach(stats, function (stat, value) {\r\n            if (value > 0 && util.contains(_this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    };\r\n    return StatsReporter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\r\nvar EventQueue = /** @class */ (function () {\r\n    function EventQueue() {\r\n        /**\r\n         * @private\r\n         * @type {!Array.<EventList>}\r\n         */\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         * @private\r\n         * @type {!number}\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n    /**\r\n     * @param {!Array.<Event>} eventDataList The new events to queue.\r\n     */\r\n    EventQueue.prototype.queueEvents = function (eventDataList) {\r\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n        var currList = null;\r\n        for (var i = 0; i < eventDataList.length; i++) {\r\n            var eventData = eventDataList[i];\r\n            var eventPath = eventData.getPath();\r\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\r\n                this.eventLists_.push(currList);\r\n                currList = null;\r\n            }\r\n            if (currList === null) {\r\n                currList = new EventList(eventPath);\r\n            }\r\n            currList.add(eventData);\r\n        }\r\n        if (currList) {\r\n            this.eventLists_.push(currList);\r\n        }\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n     * for the specified path.\r\n     *\r\n     * It is assumed that the new events are all for the specified path.\r\n     *\r\n     * @param {!Path} path The path to raise events for.\r\n     * @param {!Array.<Event>} eventDataList The new events to raise.\r\n     */\r\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.equals(path);\r\n        });\r\n    };\r\n    /**\r\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n     * locations related to the specified change path (i.e. all ancestors and descendants).\r\n     *\r\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n     *\r\n     * @param {!Path} changedPath The path to raise events for.\r\n     * @param {!Array.<!Event>} eventDataList The events to raise\r\n     */\r\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\r\n        this.queueEvents(eventDataList);\r\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\r\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!function(!Path):boolean} predicate\r\n     * @private\r\n     */\r\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\r\n        this.recursionDepth_++;\r\n        var sentAll = true;\r\n        for (var i = 0; i < this.eventLists_.length; i++) {\r\n            var eventList = this.eventLists_[i];\r\n            if (eventList) {\r\n                var eventPath = eventList.getPath();\r\n                if (predicate(eventPath)) {\r\n                    this.eventLists_[i].raise();\r\n                    this.eventLists_[i] = null;\r\n                }\r\n                else {\r\n                    sentAll = false;\r\n                }\r\n            }\r\n        }\r\n        if (sentAll) {\r\n            this.eventLists_ = [];\r\n        }\r\n        this.recursionDepth_--;\r\n    };\r\n    return EventQueue;\r\n}());\r\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\r\nvar EventList = /** @class */ (function () {\r\n    function EventList(path_) {\r\n        this.path_ = path_;\r\n        /**\r\n         * @type {!Array.<Event>}\r\n         * @private\r\n         */\r\n        this.events_ = [];\r\n    }\r\n    /**\r\n     * @param {!Event} eventData\r\n     */\r\n    EventList.prototype.add = function (eventData) {\r\n        this.events_.push(eventData);\r\n    };\r\n    /**\r\n     * Iterates through the list and raises each event\r\n     */\r\n    EventList.prototype.raise = function () {\r\n        for (var i = 0; i < this.events_.length; i++) {\r\n            var eventData = this.events_[i];\r\n            if (eventData !== null) {\r\n                this.events_[i] = null;\r\n                var eventFn = eventData.getEventRunner();\r\n                if (logger$1) {\r\n                    log('event: ' + eventData.toString());\r\n                }\r\n                exceptionGuard(eventFn);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Path}\r\n     */\r\n    EventList.prototype.getPath = function () {\r\n        return this.path_;\r\n    };\r\n    return EventList;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nvar EventEmitter = /** @class */ (function () {\r\n    /**\r\n     * @param {!Array.<string>} allowedEvents_\r\n     */\r\n    function EventEmitter(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     * @param {!string} eventType\r\n     * @param {...*} var_args\r\n     */\r\n    EventEmitter.prototype.trigger = function (eventType) {\r\n        var var_args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            var_args[_i - 1] = arguments[_i];\r\n        }\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            var listeners = this.listeners_[eventType].slice();\r\n            for (var i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, var_args);\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.on = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback: callback, context: context });\r\n        var eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    };\r\n    EventEmitter.prototype.off = function (eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        var listeners = this.listeners_[eventType] || [];\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\r\n        util.assert(this.allowedEvents_.find(function (et) {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    };\r\n    return EventEmitter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @extends {EventEmitter}\r\n */\r\nvar VisibilityMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(VisibilityMonitor, _super);\r\n    function VisibilityMonitor() {\r\n        var _this = _super.call(this, ['visible']) || this;\r\n        var hidden;\r\n        var visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        _this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, function () {\r\n                var visible = !document[hidden];\r\n                if (visible !== _this.visible_) {\r\n                    _this.visible_ = visible;\r\n                    _this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    VisibilityMonitor.getInstance = function () {\r\n        return new VisibilityMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    };\r\n    return VisibilityMonitor;\r\n}(EventEmitter));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\r\nvar OnlineMonitor = /** @class */ (function (_super) {\r\n    tslib_1.__extends(OnlineMonitor, _super);\r\n    function OnlineMonitor() {\r\n        var _this = _super.call(this, ['online']) || this;\r\n        _this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !util.isMobileCordova()) {\r\n            window.addEventListener('online', function () {\r\n                if (!_this.online_) {\r\n                    _this.online_ = true;\r\n                    _this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', function () {\r\n                if (_this.online_) {\r\n                    _this.online_ = false;\r\n                    _this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n        return _this;\r\n    }\r\n    OnlineMonitor.getInstance = function () {\r\n        return new OnlineMonitor();\r\n    };\r\n    /**\r\n     * @param {!string} eventType\r\n     * @return {Array.<boolean>}\r\n     */\r\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\r\n        util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    OnlineMonitor.prototype.currentlyOnline = function () {\r\n        return this.online_;\r\n    };\r\n    return OnlineMonitor;\r\n}(EventEmitter));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\r\nvar PacketReceiver = /** @class */ (function () {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    function PacketReceiver(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    };\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     * @param {number} requestNum\r\n     * @param {Array} data\r\n     */\r\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\r\n        var _this = this;\r\n        this.pendingResponses[requestNum] = data;\r\n        var _loop_1 = function () {\r\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\r\n            delete this_1.pendingResponses[this_1.currentResponseNum];\r\n            var _loop_2 = function (i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(function () {\r\n                        _this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            };\r\n            for (var i = 0; i < toProcess.length; ++i) {\r\n                _loop_2(i);\r\n            }\r\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\r\n                if (this_1.onClose) {\r\n                    this_1.onClose();\r\n                    this_1.onClose = null;\r\n                }\r\n                return \"break\";\r\n            }\r\n            this_1.currentResponseNum++;\r\n        };\r\n        var this_1 = this;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            var state_1 = _loop_1();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    return PacketReceiver;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\r\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nvar MAX_URL_DATA_SIZE = 1870;\r\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\r\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\r\nvar LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar BrowserPollConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId An identifier for this connection, used for logging\r\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n     *                                         transport session\r\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n     *                                     connection previously\r\n     */\r\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.urlFn = function (params) {\r\n            return repoInfo.connectionURL(LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param {function(Object)} onMessage Callback when messages arrive\r\n     * @param {function()} onDisconnect Callback with connection lost.\r\n     */\r\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(function () {\r\n            _this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            _this.onClosed_();\r\n            _this.connectTimeoutTimer_ = null;\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(function () {\r\n            if (_this.isClosed_)\r\n                return;\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var command = args[0], arg1 = args[1], arg2 = args[2];\r\n                _this.incrementIncomingBytes_(args);\r\n                if (!_this.scriptTagHolder)\r\n                    return; // we closed the connection.\r\n                if (_this.connectTimeoutTimer_) {\r\n                    clearTimeout(_this.connectTimeoutTimer_);\r\n                    _this.connectTimeoutTimer_ = null;\r\n                }\r\n                _this.everConnected_ = true;\r\n                if (command == FIREBASE_LONGPOLL_START_PARAM) {\r\n                    _this.id = arg1;\r\n                    _this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        _this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\r\n                            _this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        _this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, function () {\r\n                var args = [];\r\n                for (var _i = 0; _i < arguments.length; _i++) {\r\n                    args[_i] = arguments[_i];\r\n                }\r\n                var pN = args[0], data = args[1];\r\n                _this.incrementIncomingBytes_(args);\r\n                _this.myPacketOrderer.handleResponse(pN, data);\r\n            }, function () {\r\n                _this.onClosed_();\r\n            }, _this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (_this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\r\n            }\r\n            if (_this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\r\n            }\r\n            if (!util.isNodeSdk() &&\r\n                typeof location !== 'undefined' &&\r\n                location.href &&\r\n                location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            var connectURL = _this.urlFn(urlParams);\r\n            _this.log_('Connecting via long-poll to ' + connectURL);\r\n            _this.scriptTagHolder.addTag(connectURL, function () {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    BrowserPollConnection.prototype.start = function () {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    };\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceAllow = function () {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    };\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    BrowserPollConnection.forceDisallow = function () {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    };\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    BrowserPollConnection.isAvailable = function () {\r\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n        return (BrowserPollConnection.forceAllow_ ||\r\n            (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp() &&\r\n                !util.isNodeSdk()));\r\n    };\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Triggered when this transport is closed\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    BrowserPollConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param {!Object} data The JSON data to transmit.\r\n     */\r\n    BrowserPollConnection.prototype.send = function (data) {\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        var base64data = util.base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    };\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     * @param {!string} id\r\n     * @param {!string} pw\r\n     */\r\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\r\n        if (util.isNodeSdk())\r\n            return;\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        var urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    };\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     * @param {*} args\r\n     * @private\r\n     */\r\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        var bytesReceived = util.stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    };\r\n    return BrowserPollConnection;\r\n}());\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\r\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        /**\r\n         * @type {CountedSet.<number, number>}\r\n         */\r\n        this.outstandingRequests = new CountedSet();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!util.isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            var script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                var currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            var iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     * @private\r\n     * @return {Element}\r\n     */\r\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                var a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                var domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n        }\r\n        else if (iframe.document) {\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    };\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.close = function () {\r\n        var _this = this;\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(function () {\r\n                if (_this.myIFrame !== null) {\r\n                    document.body.removeChild(_this.myIFrame);\r\n                    _this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        if (util.isNodeSdk() && this.myID) {\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            var theURL = this.urlFn(urlParams);\r\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\r\n        }\r\n        // Protect from being called recursively.\r\n        var onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    };\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param {!string} id - The ID of this connection\r\n     * @param {!string} pw - The password for this connection\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    };\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            var urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            var theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            var curDataString = '';\r\n            var i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                var nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    var theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    };\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param {!string} url - The URL of the script tag.\r\n     * @param {!number} serial - The serial number of the request.\r\n     * @private\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\r\n        var _this = this;\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial, 1);\r\n        var doNewRequest = function () {\r\n            _this.outstandingRequests.remove(serial);\r\n            _this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        var readyStateCB = function () {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    };\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param {!string} url - The URL for the script tag source.\r\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\r\n        var _this = this;\r\n        if (util.isNodeSdk()) {\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(function () {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!_this.sendNewPolls)\r\n                        return;\r\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\r\n                    newScript_1.type = 'text/javascript';\r\n                    newScript_1.async = true;\r\n                    newScript_1.src = url;\r\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\r\n                        var rstate = newScript_1.readyState;\r\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\r\n                            if (newScript_1.parentNode) {\r\n                                newScript_1.parentNode.removeChild(newScript_1);\r\n                            }\r\n                            loadCB();\r\n                        }\r\n                    };\r\n                    newScript_1.onerror = function () {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        _this.sendNewPolls = false;\r\n                        _this.close();\r\n                    };\r\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    };\r\n    return FirebaseIFrameScriptHolder;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nvar WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\r\nvar WebSocketConnection = /** @class */ (function () {\r\n    /**\r\n     * @param {string} connId identifier for this transport\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     */\r\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = StatsManager.getCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\r\n    }\r\n    /**\r\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n     * @return {string} connection url\r\n     * @private\r\n     */\r\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\r\n        var urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!util.isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.href &&\r\n            location.href.indexOf(FORGE_DOMAIN) !== -1) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        return repoInfo.connectionURL(WEBSOCKET, urlParams);\r\n    };\r\n    /**\r\n     *\r\n     * @param onMessage Callback when messages arrive\r\n     * @param onDisconnect Callback with connection lost.\r\n     */\r\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\r\n        var _this = this;\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            if (util.isNodeSdk()) {\r\n                var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                var options = {\r\n                    headers: {\r\n                        'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + firebase.SDK_VERSION + \"/\" + process.platform + \"/\" + device\r\n                    }\r\n                };\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                var env = process['env'];\r\n                var proxy = this.connURL.indexOf('wss://') == 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n            }\r\n            else {\r\n                this.mySock = new WebSocketImpl(this.connURL);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                this.log_(error$$1);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = function () {\r\n            _this.log_('Websocket connected.');\r\n            _this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = function () {\r\n            _this.log_('Websocket connection was disconnected.');\r\n            _this.mySock = null;\r\n            _this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = function (m) {\r\n            _this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = function (e) {\r\n            _this.log_('WebSocket error.  Closing connection.');\r\n            var error$$1 = e.message || e.data;\r\n            if (error$$1) {\r\n                _this.log_(error$$1);\r\n            }\r\n            _this.onClosed_();\r\n        };\r\n    };\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    WebSocketConnection.prototype.start = function () { };\r\n    WebSocketConnection.forceDisallow = function () {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    };\r\n    WebSocketConnection.isAvailable = function () {\r\n        var isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    };\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     * @return {boolean}\r\n     */\r\n    WebSocketConnection.previouslyFailed = function () {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    };\r\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    };\r\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length == this.totalFrames) {\r\n            var fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            var jsonMess = util.jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    };\r\n    /**\r\n     * @param {number} frameCount The number of frames we are expecting from the server\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    };\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @param {!String} data\r\n     * @return {?String} Any remaining data to be process, or null if there is none\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\r\n        util.assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            var frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    };\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess The frame data\r\n     */\r\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\r\n        if (this.mySock === null)\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        var data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            var remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Send a message to the server\r\n     * @param {Object} data The JSON object to transmit\r\n     */\r\n    WebSocketConnection.prototype.send = function (data) {\r\n        this.resetKeepAlive();\r\n        var dataStr = util.stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (var i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.shutdown_ = function () {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    };\r\n    WebSocketConnection.prototype.onClosed_ = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    WebSocketConnection.prototype.close = function () {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    };\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    WebSocketConnection.prototype.resetKeepAlive = function () {\r\n        var _this = this;\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(function () {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (_this.mySock) {\r\n                _this.sendString_('0');\r\n            }\r\n            _this.resetKeepAlive();\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    };\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param {string} str String to send.\r\n     * @private\r\n     */\r\n    WebSocketConnection.prototype.sendString_ = function (str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    };\r\n    /**\r\n     * Number of response before we consider the connection \"healthy.\"\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n    /**\r\n     * Time to wait for the connection te become healthy before giving up.\r\n     * @type {number}\r\n     */\r\n    WebSocketConnection.healthyTimeout = 30000;\r\n    return WebSocketConnection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\r\nvar TransportManager = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n     */\r\n    function TransportManager(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\r\n        /**\r\n         * @const\r\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n         */\r\n        get: function () {\r\n            return [BrowserPollConnection, WebSocketConnection];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {!RepoInfo} repoInfo\r\n     * @private\r\n     */\r\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\r\n        var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable)\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            var transports_1 = (this.transports_ = []);\r\n            each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports_1.push(transport);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n     * initial transport to use\r\n     */\r\n    TransportManager.prototype.initialTransport = function () {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n     * transport, or null\r\n     */\r\n    TransportManager.prototype.upgradeTransport = function () {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return TransportManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nvar UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nvar MESSAGE_TYPE = 't';\r\nvar MESSAGE_DATA = 'd';\r\nvar CONTROL_SHUTDOWN = 's';\r\nvar CONTROL_RESET = 'r';\r\nvar CONTROL_ERROR = 'e';\r\nvar CONTROL_PONG = 'o';\r\nvar SWITCH_ACK = 'a';\r\nvar END_TRANSMISSION = 'n';\r\nvar PING = 'p';\r\nvar SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\r\nvar Connection = /** @class */ (function () {\r\n    /**\r\n     * @param {!string} id - an id for this connection\r\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     * @private\r\n     */\r\n    Connection.prototype.start_ = function () {\r\n        var _this = this;\r\n        var conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessageReceived = this.connReceiver_(this.conn_);\r\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(function () {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeout_ms > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(function () {\r\n                _this.healthyTimeout_ = null;\r\n                if (!_this.isHealthy_) {\r\n                    if (_this.conn_ &&\r\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            _this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        _this.isHealthy_ = true;\r\n                        _this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (_this.conn_ &&\r\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            _this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        _this.log_('Closing unhealthy connection after timeout.');\r\n                        _this.close();\r\n                    }\r\n                }\r\n            }, Math.floor(healthyTimeout_ms));\r\n        }\r\n    };\r\n    /**\r\n     * @return {!string}\r\n     * @private\r\n     */\r\n    Connection.prototype.nextTransportId_ = function () {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    };\r\n    Connection.prototype.disconnReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (everConnected) {\r\n            if (conn === _this.conn_) {\r\n                _this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === _this.secondaryConn_) {\r\n                _this.log_('Secondary connection lost.');\r\n                _this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                _this.log_('closing an old connection');\r\n            }\r\n        };\r\n    };\r\n    Connection.prototype.connReceiver_ = function (conn) {\r\n        var _this = this;\r\n        return function (message) {\r\n            if (_this.state_ != 2 /* DISCONNECTED */) {\r\n                if (conn === _this.rx_) {\r\n                    _this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === _this.secondaryConn_) {\r\n                    _this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    _this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n     */\r\n    Connection.prototype.sendRequest = function (dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        var msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    };\r\n    Connection.prototype.tryCleanupConnection = function () {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            var cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    };\r\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.proceedWithUpgrade_ = function () {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    };\r\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        var layer = requireKey('t', parsedData);\r\n        var data = requireKey('d', parsedData);\r\n        if (layer == 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer == 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    };\r\n    Connection.prototype.onDataMessage_ = function (message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    };\r\n    Connection.prototype.onPrimaryResponse_ = function () {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    };\r\n    Connection.prototype.onControl_ = function (controlData) {\r\n        var cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            var payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} handshake The handshake data returned from the server\r\n     * @private\r\n     */\r\n    Connection.prototype.onHandshake_ = function (handshake) {\r\n        var timestamp = handshake.ts;\r\n        var version = handshake.v;\r\n        var host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.updateHost(host);\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ == 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    };\r\n    Connection.prototype.tryStartUpgrade_ = function () {\r\n        var conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    };\r\n    Connection.prototype.startUpgrade_ = function (conn) {\r\n        var _this = this;\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        var onMessage = this.connReceiver_(this.secondaryConn_);\r\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(function () {\r\n            if (_this.secondaryConn_) {\r\n                _this.log_('Timed out trying to upgrade.');\r\n                _this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    };\r\n    Connection.prototype.onReset_ = function (host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.updateHost(host);\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    };\r\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\r\n        var _this = this;\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(function () {\r\n                _this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    };\r\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    };\r\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\r\n        var conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    };\r\n    /**\r\n     *\r\n     * @param {string} reason\r\n     * @private\r\n     */\r\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    };\r\n    Connection.prototype.sendData_ = function (data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    Connection.prototype.close = function () {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @private\r\n     */\r\n    Connection.prototype.closeConnections_ = function () {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    };\r\n    return Connection;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nvar ServerActions = /** @class */ (function () {\r\n    function ServerActions() {\r\n    }\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, ?string)} onComplete\r\n     * @param {string=} hash\r\n     */\r\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param {string} token The authentication token\r\n     */\r\n    ServerActions.prototype.refreshAuthToken = function (token) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\r\n    /**\r\n     * @param {string} pathString\r\n     * @param {function(string, string)=} onComplete\r\n     */\r\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\r\n    /**\r\n     * @param {Object.<string, *>} stats\r\n     */\r\n    ServerActions.prototype.reportStats = function (stats) { };\r\n    return ServerActions;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar RECONNECT_MIN_DELAY = 1000;\r\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nvar PersistentConnection = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PersistentConnection, _super);\r\n    /**\r\n     * @implements {ServerActions}\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param onConnectStatus_\r\n     * @param onServerInfoUpdate_\r\n     * @param authTokenProvider_\r\n     * @param authOverride_\r\n     */\r\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.onConnectStatus_ = onConnectStatus_;\r\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        _this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        _this.log_ = logWrapper('p:' + _this.id + ':');\r\n        /** @private {Object} */\r\n        _this.interruptReasons_ = {};\r\n        _this.listens_ = {};\r\n        _this.outstandingPuts_ = [];\r\n        _this.outstandingPutCount_ = 0;\r\n        _this.onDisconnectRequestQueue_ = [];\r\n        _this.connected_ = false;\r\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        _this.securityDebugCallback_ = null;\r\n        _this.lastSessionId = null;\r\n        /** @private {number|null} */\r\n        _this.establishConnectionTimer_ = null;\r\n        /** @private {boolean} */\r\n        _this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        _this.requestCBHash_ = {};\r\n        _this.requestNumber_ = 0;\r\n        /** @private {?{\r\n         *   sendRequest(Object),\r\n         *   close()\r\n         * }} */\r\n        _this.realtime_ = null;\r\n        /** @private {string|null} */\r\n        _this.authToken_ = null;\r\n        _this.forceTokenRefresh_ = false;\r\n        _this.invalidAuthTokenCount_ = 0;\r\n        _this.firstConnection_ = true;\r\n        _this.lastConnectionAttemptTime_ = null;\r\n        _this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !util.isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        _this.scheduleConnect_(0);\r\n        VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {!string} action\r\n     * @param {*} body\r\n     * @param {function(*)=} onResponse\r\n     * @protected\r\n     */\r\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\r\n        var curReqNum = ++this.requestNumber_;\r\n        var msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(util.stringify(msg));\r\n        util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var queryId = query.queryIdentifier();\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        this.listens_[pathString] = this.listens_[pathString] || {};\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\r\n        util.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\r\n        var listenSpec = {\r\n            onComplete: onComplete,\r\n            hashFn: currentHashFn,\r\n            query: query,\r\n            tag: tag\r\n        };\r\n        this.listens_[pathString][queryId] = listenSpec;\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    };\r\n    /**\r\n     * @param {!{onComplete(),\r\n     *           hashFn():!string,\r\n     *           query: !Query,\r\n     *           tag: ?number}} listenSpec\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\r\n        var _this = this;\r\n        var query = listenSpec.query;\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query.queryObject();\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, function (message) {\r\n            var payload = message[ /*data*/'d'];\r\n            var status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                _this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    _this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @param {*} payload\r\n     * @param {!Query} query\r\n     * @private\r\n     */\r\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\r\n        if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\r\n            var warnings = util.safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                var indexSpec = '\".indexOn\": \"' +\r\n                    query\r\n                        .getQueryParams()\r\n                        .getIndex()\r\n                        .toString() +\r\n                    '\"';\r\n                var indexPath = query.path.toString();\r\n                warn(\"Using an unspecified index. Your data will be downloaded and \" +\r\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\r\n                    (indexPath + \" to your security rules for better performance.\"));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, function () { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    };\r\n    /**\r\n     * @param {!string} credential\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        var isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || util.isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    PersistentConnection.prototype.tryAuth = function () {\r\n        var _this = this;\r\n        if (this.connected_ && this.authToken_) {\r\n            var token_1 = this.authToken_;\r\n            var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\r\n            var requestData = { cred: token_1 };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, function (res) {\r\n                var status = res[ /*status*/'s'];\r\n                var data = res[ /*data*/'d'] || 'error';\r\n                if (_this.authToken_ === token_1) {\r\n                    if (status === 'ok') {\r\n                        _this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        _this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.unlisten = function (query, tag) {\r\n        var pathString = query.path.toString();\r\n        var queryId = query.queryIdentifier();\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        util.assert(query.getQueryParams().isDefault() ||\r\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        var req = { /*path*/ p: pathString };\r\n        var action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'o',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'om',\r\n                data: data,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString: pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete: onComplete\r\n            });\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\r\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, function (response) {\r\n            if (onComplete) {\r\n                setTimeout(function () {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    };\r\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\r\n        var request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined)\r\n            request[ /*hash*/'h'] = hash;\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action: action,\r\n            request: request,\r\n            onComplete: onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        var index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.sendPut_ = function (index) {\r\n        var _this = this;\r\n        var action = this.outstandingPuts_[index].action;\r\n        var request = this.outstandingPuts_[index].request;\r\n        var onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, function (message) {\r\n            _this.log_(action + ' response', message);\r\n            delete _this.outstandingPuts_[index];\r\n            _this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (_this.outstandingPutCount_ === 0) {\r\n                _this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete)\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n        });\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    PersistentConnection.prototype.reportStats = function (stats) {\r\n        var _this = this;\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            var request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, function (result) {\r\n                var status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    var errorReason = result[ /* data */'d'];\r\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {*} message\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + util.stringify(message));\r\n            var reqNum = message['r'];\r\n            var onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        else if (action === 'm')\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        else if (action === 'c')\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        else if (action === 'ac')\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        else if (action === 'sd')\r\n            this.onSecurityDebugPacket_(body);\r\n        else\r\n            error('Unrecognized action received from server: ' +\r\n                util.stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n    };\r\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    };\r\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\r\n        var _this = this;\r\n        util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(function () {\r\n            _this.establishConnectionTimer_ = null;\r\n            _this.establishConnection_();\r\n        }, Math.floor(timeout));\r\n    };\r\n    /**\r\n     * @param {boolean} visible\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onVisible_ = function (visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    };\r\n    PersistentConnection.prototype.onOnline_ = function (online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    };\r\n    PersistentConnection.prototype.establishConnection_ = function () {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\r\n            var onReady_1 = this.onReady_.bind(this);\r\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\r\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            var self_1 = this;\r\n            var lastSessionId_1 = this.lastSessionId;\r\n            var canceled_1 = false;\r\n            var connection_1 = null;\r\n            var closeFn_1 = function () {\r\n                if (connection_1) {\r\n                    connection_1.close();\r\n                }\r\n                else {\r\n                    canceled_1 = true;\r\n                    onDisconnect_1();\r\n                }\r\n            };\r\n            var sendRequestFn = function (msg) {\r\n                util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\r\n                connection_1.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn_1,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            var forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            // First fetch auth token, and establish connection after fetching the token was successful\r\n            this.authTokenProvider_\r\n                .getToken(forceRefresh)\r\n                .then(function (result) {\r\n                if (!canceled_1) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    self_1.authToken_ = result && result.accessToken;\r\n                    connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, \r\n                    /* onKill= */ function (reason) {\r\n                        warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\r\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId_1);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            })\r\n                .then(null, function (error$$1) {\r\n                self_1.log_('Failed to get token: ' + error$$1);\r\n                if (!canceled_1) {\r\n                    if (util.CONSTANTS.NODE_ADMIN) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error$$1);\r\n                    }\r\n                    closeFn_1();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.interrupt = function (reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @param {string} reason\r\n     */\r\n    PersistentConnection.prototype.resume = function (reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (util.isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\r\n        var delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    };\r\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            var put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete)\r\n                    put.onComplete('disconnect');\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0)\r\n            this.outstandingPuts_ = [];\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {Array.<*>=} query\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        var queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(function (q) { return ObjectToUniqueKey(q); }).join('$');\r\n        }\r\n        var listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete)\r\n            listen.onComplete('permission_denied');\r\n    };\r\n    /**\r\n     * @param {!string} pathString\r\n     * @param {!string} queryId\r\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\r\n        var normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        var listen;\r\n        if (this.listens_[normalizedPathString] !== undefined) {\r\n            listen = this.listens_[normalizedPathString][queryId];\r\n            delete this.listens_[normalizedPathString][queryId];\r\n            if (util.getCount(this.listens_[normalizedPathString]) === 0) {\r\n                delete this.listens_[normalizedPathString];\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    };\r\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    };\r\n    PersistentConnection.prototype.restoreState_ = function () {\r\n        var _this = this;\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        util.forEach(this.listens_, function (pathString, queries) {\r\n            util.forEach(queries, function (key, listenSpec) {\r\n                _this.sendListen_(listenSpec);\r\n            });\r\n        });\r\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i])\r\n                this.sendPut_(i);\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            var request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n    };\r\n    /**\r\n     * Sends client stats for first connection\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.sendConnectStats_ = function () {\r\n        var stats = {};\r\n        var clientName = 'js';\r\n        if (util.CONSTANTS.NODE_ADMIN) {\r\n            clientName = 'admin_node';\r\n        }\r\n        else if (util.CONSTANTS.NODE_CLIENT) {\r\n            clientName = 'node';\r\n        }\r\n        stats['sdk.' + clientName + '.' + firebase.SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (util.isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (util.isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     * @private\r\n     */\r\n    PersistentConnection.prototype.shouldReconnect_ = function () {\r\n        var online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return util.isEmpty(this.interruptReasons_) && online;\r\n    };\r\n    /**\r\n     * @private\r\n     */\r\n    PersistentConnection.nextPersistentConnectionId_ = 0;\r\n    /**\r\n     * Counter for number of connections created. Mainly used for tagging in the logs\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    PersistentConnection.nextConnectionId_ = 0;\r\n    return PersistentConnection;\r\n}(ServerActions));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nvar ReadonlyRestClient = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ReadonlyRestClient, _super);\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n     * @param {AuthTokenProvider} authTokenProvider_\r\n     * @implements {ServerActions}\r\n     */\r\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\r\n        var _this = _super.call(this) || this;\r\n        _this.repoInfo_ = repoInfo_;\r\n        _this.onDataUpdate_ = onDataUpdate_;\r\n        _this.authTokenProvider_ = authTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        _this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         *\r\n         * @private {!Object.<string, !Object>}\r\n         */\r\n        _this.listens_ = {};\r\n        return _this;\r\n    }\r\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\r\n        throw new Error('Method not implemented.');\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?number=} tag\r\n     * @return {string}\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query.path.toString();\r\n        }\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\r\n        var _this = this;\r\n        var pathString = query.path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\r\n        // Mark this listener so we can tell if it's removed.\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        var thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        var queryStringParameters = query\r\n            .getQueryParams()\r\n            .toRestQueryStringParameters();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, function (error$$1, result) {\r\n            var data = result;\r\n            if (error$$1 === 404) {\r\n                data = null;\r\n                error$$1 = null;\r\n            }\r\n            if (error$$1 === null) {\r\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (util.safeGet(_this.listens_, listenId) === thisListen) {\r\n                var status_1;\r\n                if (!error$$1) {\r\n                    status_1 = 'ok';\r\n                }\r\n                else if (error$$1 == 401) {\r\n                    status_1 = 'permission_denied';\r\n                }\r\n                else {\r\n                    status_1 = 'rest_error:' + error$$1;\r\n                }\r\n                onComplete(status_1, null);\r\n            }\r\n        });\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\r\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    };\r\n    /** @inheritDoc */\r\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\r\n        // no-op since we just always call getToken.\r\n    };\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {!Object.<string, *>} queryStringParameters\r\n     * @param {?function(?number, *=)} callback\r\n     * @private\r\n     */\r\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\r\n        var _this = this;\r\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\r\n        queryStringParameters['format'] = 'export';\r\n        this.authTokenProvider_\r\n            .getToken(/*forceRefresh=*/ false)\r\n            .then(function (authTokenData) {\r\n            var authToken = authTokenData && authTokenData.accessToken;\r\n            if (authToken) {\r\n                queryStringParameters['auth'] = authToken;\r\n            }\r\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                _this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                _this.repoInfo_.namespace +\r\n                util.querystring(queryStringParameters);\r\n            _this.log_('Sending REST request for ' + url);\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = function () {\r\n                if (callback && xhr.readyState === 4) {\r\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    var res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = util.jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    };\r\n    return ReadonlyRestClient;\r\n}(ServerActions));\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nvar Repo = /** @class */ (function () {\r\n    /**\r\n     * @param {!RepoInfo} repoInfo_\r\n     * @param {boolean} forceRestClient\r\n     * @param {!FirebaseApp} app\r\n     */\r\n    function Repo(repoInfo_, forceRestClient, app) {\r\n        var _this = this;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.app = app;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        // A list of data pieces and paths to be set when this client disconnects.\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        /**\r\n         * TODO: This should be @private but it's used by test_access.js and internal.js\r\n         * @type {?PersistentConnection}\r\n         */\r\n        this.persistentConnection_ = null;\r\n        /** @type {!AuthTokenProvider} */\r\n        var authTokenProvider = new AuthTokenProvider(app);\r\n        this.stats_ = StatsManager.getCollection(repoInfo_);\r\n        if (forceRestClient || beingCrawled()) {\r\n            this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\r\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\r\n        }\r\n        else {\r\n            var authOverride = app.options['databaseAuthVariableOverride'];\r\n            // Validate authOverride\r\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n                if (typeof authOverride !== 'object') {\r\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n                }\r\n                try {\r\n                    util.stringify(authOverride);\r\n                }\r\n                catch (e) {\r\n                    throw new Error('Invalid authOverride provided: ' + e);\r\n                }\r\n            }\r\n            this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\r\n            this.server_ = this.persistentConnection_;\r\n        }\r\n        authTokenProvider.addTokenChangeListener(function (token) {\r\n            _this.server_.refreshAuthToken(token);\r\n        });\r\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n        this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter(_this.stats_, _this.server_); });\r\n        this.transactions_init_();\r\n        // Used for .info.\r\n        this.infoData_ = new SnapshotHolder();\r\n        this.infoSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                var infoEvents = [];\r\n                var node = _this.infoData_.getNode(query.path);\r\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n                // on initial data...\r\n                if (!node.isEmpty()) {\r\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\r\n                    setTimeout(function () {\r\n                        onComplete('ok');\r\n                    }, 0);\r\n                }\r\n                return infoEvents;\r\n            },\r\n            stopListening: function () { }\r\n        });\r\n        this.updateInfo_('connected', false);\r\n        this.serverSyncTree_ = new SyncTree({\r\n            startListening: function (query, tag, currentHashFn, onComplete) {\r\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\r\n                    var events = onComplete(status, data);\r\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\r\n                });\r\n                // No synchronous events for network-backed sync trees\r\n                return [];\r\n            },\r\n            stopListening: function (query, tag) {\r\n                _this.server_.unlisten(query, tag);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {string}  The URL corresponding to the root of this Firebase.\r\n     */\r\n    Repo.prototype.toString = function () {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    };\r\n    /**\r\n     * @return {!string} The namespace represented by the repo.\r\n     */\r\n    Repo.prototype.name = function () {\r\n        return this.repoInfo_.namespace;\r\n    };\r\n    /**\r\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\r\n     */\r\n    Repo.prototype.serverTime = function () {\r\n        var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n        var offset = offsetNode.val() || 0;\r\n        return new Date().getTime() + offset;\r\n    };\r\n    /**\r\n     * Generate ServerValues using some variables from the repo object.\r\n     * @return {!Object}\r\n     */\r\n    Repo.prototype.generateServerValues = function () {\r\n        return generateWithValues({\r\n            timestamp: this.serverTime()\r\n        });\r\n    };\r\n    /**\r\n     * Called by realtime when we get new messages from the server.\r\n     *\r\n     * @private\r\n     * @param {string} pathString\r\n     * @param {*} data\r\n     * @param {boolean} isMerge\r\n     * @param {?number} tag\r\n     */\r\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\r\n        // For testing.\r\n        this.dataUpdateCount++;\r\n        var path = new Path(pathString);\r\n        data = this.interceptServerDataCallback_\r\n            ? this.interceptServerDataCallback_(pathString, data)\r\n            : data;\r\n        var events = [];\r\n        if (tag) {\r\n            if (isMerge) {\r\n                var taggedChildren = util.map(data, function (raw) {\r\n                    return nodeFromJSON$1(raw);\r\n                });\r\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\r\n            }\r\n            else {\r\n                var taggedSnap = nodeFromJSON$1(data);\r\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\r\n            }\r\n        }\r\n        else if (isMerge) {\r\n            var changedChildren = util.map(data, function (raw) {\r\n                return nodeFromJSON$1(raw);\r\n            });\r\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\r\n        }\r\n        else {\r\n            var snap = nodeFromJSON$1(data);\r\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\r\n        }\r\n        var affectedPath = path;\r\n        if (events.length > 0) {\r\n            // Since we have a listener outstanding for each transaction, receiving any events\r\n            // is a proxy for some change having occurred.\r\n            affectedPath = this.rerunTransactions_(path);\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\r\n    };\r\n    /**\r\n     * TODO: This should be @private but it's used by test_access.js and internal.js\r\n     * @param {?function(!string, *):*} callback\r\n     * @private\r\n     */\r\n    Repo.prototype.interceptServerData_ = function (callback) {\r\n        this.interceptServerDataCallback_ = callback;\r\n    };\r\n    /**\r\n     * @param {!boolean} connectStatus\r\n     * @private\r\n     */\r\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\r\n        this.updateInfo_('connected', connectStatus);\r\n        if (connectStatus === false) {\r\n            this.runOnDisconnectEvents_();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!Object} updates\r\n     * @private\r\n     */\r\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\r\n        var _this = this;\r\n        each(updates, function (value, key) {\r\n            _this.updateInfo_(key, value);\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {!string} pathString\r\n     * @param {*} value\r\n     * @private\r\n     */\r\n    Repo.prototype.updateInfo_ = function (pathString, value) {\r\n        var path = new Path('/.info/' + pathString);\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.infoData_.updateSnapshot(path, newNode);\r\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n    };\r\n    /**\r\n     * @return {!number}\r\n     * @private\r\n     */\r\n    Repo.prototype.getNextWriteId_ = function () {\r\n        return this.nextWriteId_++;\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} newVal\r\n     * @param {number|string|null} newPriority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\r\n        var _this = this;\r\n        this.log_('set', {\r\n            path: path.toString(),\r\n            value: newVal,\r\n            priority: newPriority\r\n        });\r\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n        // (b) store unresolved paths on JSON parse\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        var writeId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\r\n        this.eventQueue_.queueEvents(events);\r\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\r\n            var success = status === 'ok';\r\n            if (!success) {\r\n                warn('set at ' + path + ' failed: ' + status);\r\n            }\r\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n        var affectedPath = this.abortTransactions_(path);\r\n        this.rerunTransactions_(affectedPath);\r\n        // We queued the events above, so just flush the queue here\r\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {!Object} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\r\n        // Start with our existing data and merge each child into it.\r\n        var empty = true;\r\n        var serverValues = this.generateServerValues();\r\n        var changedChildren = {};\r\n        util.forEach(childrenToMerge, function (changedKey, changedValue) {\r\n            empty = false;\r\n            var newNodeUnresolved = nodeFromJSON$1(changedValue);\r\n            changedChildren[changedKey] = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        });\r\n        if (!empty) {\r\n            var writeId_1 = this.getNextWriteId_();\r\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\r\n            this.eventQueue_.queueEvents(events);\r\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n                var success = status === 'ok';\r\n                if (!success) {\r\n                    warn('update at ' + path + ' failed: ' + status);\r\n                }\r\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\r\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\r\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\r\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n            });\r\n            util.forEach(childrenToMerge, function (changedPath) {\r\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\r\n                _this.rerunTransactions_(affectedPath);\r\n            });\r\n            // We queued the events above, so just flush the queue here\r\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\r\n        }\r\n        else {\r\n            log(\"update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n        }\r\n    };\r\n    /**\r\n     * Applies all of the changes stored up in the onDisconnect_ tree.\r\n     * @private\r\n     */\r\n    Repo.prototype.runOnDisconnectEvents_ = function () {\r\n        var _this = this;\r\n        this.log_('onDisconnectEvents');\r\n        var serverValues = this.generateServerValues();\r\n        var resolvedOnDisconnectTree = resolveDeferredValueTree(this.onDisconnect_, serverValues);\r\n        var events = [];\r\n        resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\r\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\r\n            var affectedPath = _this.abortTransactions_(path);\r\n            _this.rerunTransactions_(affectedPath);\r\n        });\r\n        this.onDisconnect_ = new SparseSnapshotTree();\r\n        this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\r\n        var _this = this;\r\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.forget(path);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} value\r\n     * @param {*} priority\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\r\n        var _this = this;\r\n        var newNode = nodeFromJSON$1(value, priority);\r\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                _this.onDisconnect_.remember(path, newNode);\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Path} path\r\n     * @param {*} childrenToMerge\r\n     * @param {?function(?Error, *=)} onComplete\r\n     */\r\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\r\n        var _this = this;\r\n        if (util.isEmpty(childrenToMerge)) {\r\n            log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n            this.callOnCompleteCallback(onComplete, 'ok');\r\n            return;\r\n        }\r\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\r\n            if (status === 'ok') {\r\n                util.forEach(childrenToMerge, function (childName, childNode) {\r\n                    var newChildNode = nodeFromJSON$1(childNode);\r\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\r\n                });\r\n            }\r\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\r\n        });\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {!EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    /**\r\n     * @param {!Query} query\r\n     * @param {?EventRegistration} eventRegistration\r\n     */\r\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\r\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n        // a little bit by handling the return values anyways.\r\n        var events;\r\n        if (query.path.getFront() === '.info') {\r\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        else {\r\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\r\n        }\r\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\r\n    };\r\n    Repo.prototype.interrupt = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.resume = function () {\r\n        if (this.persistentConnection_) {\r\n            this.persistentConnection_.resume(INTERRUPT_REASON);\r\n        }\r\n    };\r\n    Repo.prototype.stats = function (showDelta) {\r\n        if (showDelta === void 0) { showDelta = false; }\r\n        if (typeof console === 'undefined')\r\n            return;\r\n        var stats;\r\n        if (showDelta) {\r\n            if (!this.statsListener_)\r\n                this.statsListener_ = new StatsListener(this.stats_);\r\n            stats = this.statsListener_.get();\r\n        }\r\n        else {\r\n            stats = this.stats_.get();\r\n        }\r\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\r\n            return Math.max(currentValue.length, previousValue);\r\n        }, 0);\r\n        util.forEach(stats, function (stat, value) {\r\n            // pad stat names to be the same length (plus 2 extra spaces).\r\n            for (var i = stat.length; i < longestName + 2; i++)\r\n                stat += ' ';\r\n            console.log(stat + value);\r\n        });\r\n    };\r\n    Repo.prototype.statsIncrementCounter = function (metric) {\r\n        this.stats_.incrementCounter(metric);\r\n        this.statsReporter_.includeStat(metric);\r\n    };\r\n    /**\r\n     * @param {...*} var_args\r\n     * @private\r\n     */\r\n    Repo.prototype.log_ = function () {\r\n        var var_args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            var_args[_i] = arguments[_i];\r\n        }\r\n        var prefix = '';\r\n        if (this.persistentConnection_) {\r\n            prefix = this.persistentConnection_.id + ':';\r\n        }\r\n        log.apply(void 0, [prefix].concat(var_args));\r\n    };\r\n    /**\r\n     * @param {?function(?Error, *=)} callback\r\n     * @param {!string} status\r\n     * @param {?string=} errorReason\r\n     */\r\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\r\n        if (callback) {\r\n            exceptionGuard(function () {\r\n                if (status == 'ok') {\r\n                    callback(null);\r\n                }\r\n                else {\r\n                    var code = (status || 'error').toUpperCase();\r\n                    var message = code;\r\n                    if (errorReason)\r\n                        message += ': ' + errorReason;\r\n                    var error$$1 = new Error(message);\r\n                    error$$1.code = code;\r\n                    callback(error$$1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    Object.defineProperty(Repo.prototype, \"database\", {\r\n        get: function () {\r\n            return this.__database || (this.__database = new Database(this));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Repo;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar RangedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function RangedFilter(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getStartPost = function () {\r\n        return this.startPost_;\r\n    };\r\n    /**\r\n     * @return {!NamedNode}\r\n     */\r\n    RangedFilter.prototype.getEndPost = function () {\r\n        return this.endPost_;\r\n    };\r\n    /**\r\n     * @param {!NamedNode} node\r\n     * @return {boolean}\r\n     */\r\n    RangedFilter.prototype.matches = function (node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        var filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        var self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndexedFilter = function () {\r\n        return this.indexedFilter_;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    RangedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getStartPost_ = function (params) {\r\n        if (params.hasStart()) {\r\n            var startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    };\r\n    /**\r\n     * @param {!QueryParams} params\r\n     * @return {!NamedNode}\r\n     * @private\r\n     */\r\n    RangedFilter.getEndPost_ = function (params) {\r\n        if (params.hasEnd()) {\r\n            var endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    };\r\n    return RangedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\r\nvar LimitedFilter = /** @class */ (function () {\r\n    /**\r\n     * @param {!QueryParams} params\r\n     */\r\n    function LimitedFilter(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\r\n        var filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                var count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    var next = iterator.getNext();\r\n                    var inRange = void 0;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                var startPost = void 0;\r\n                var endPost = void 0;\r\n                var cmp = void 0;\r\n                var iterator = void 0;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    var indexCompare_1 = this.index_.getCompare();\r\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                var count = 0;\r\n                var foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    var next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.filtersNodes = function () {\r\n        return true;\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndexedFilter = function () {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    LimitedFilter.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @param {!Node} snap\r\n     * @param {string} childKey\r\n     * @param {!Node} childSnap\r\n     * @param {!CompleteChildSource} source\r\n     * @param {?ChildChangeAccumulator} changeAccumulator\r\n     * @return {!Node}\r\n     * @private\r\n     */\r\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        var cmp;\r\n        if (this.reverse_) {\r\n            var indexCmp_1 = this.index_.getCompare();\r\n            cmp = function (a, b) { return indexCmp_1(b, a); };\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        var oldEventCache = snap;\r\n        util.assert(oldEventCache.numChildren() == this.limit_, '');\r\n        var newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        var windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\r\n                }\r\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    };\r\n    return LimitedFilter;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\r\nvar QueryParams = /** @class */ (function () {\r\n    function QueryParams() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasStart = function () {\r\n        return this.startSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if it would return from left.\r\n     */\r\n    QueryParams.prototype.isViewFromLeft = function () {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\r\n        }\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexStartValue = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexStartName = function () {\r\n        util.assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasEnd = function () {\r\n        return this.endSet_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * @return {*}\r\n     */\r\n    QueryParams.prototype.getIndexEndValue = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    };\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     * @return {!string}\r\n     */\r\n    QueryParams.prototype.getIndexEndName = function () {\r\n        util.assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.hasLimit = function () {\r\n        return this.limitSet_;\r\n    };\r\n    /**\r\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    QueryParams.prototype.hasAnchoredLimit = function () {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    };\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     * @return {!number}\r\n     */\r\n    QueryParams.prototype.getLimit = function () {\r\n        util.assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    };\r\n    /**\r\n     * @return {!Index}\r\n     */\r\n    QueryParams.prototype.getIndex = function () {\r\n        return this.index_;\r\n    };\r\n    /**\r\n     * @return {!QueryParams}\r\n     * @private\r\n     */\r\n    QueryParams.prototype.copy_ = function () {\r\n        var copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limit = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = '';\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToFirst = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!number} newLimit\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.limitToLast = function (newLimit) {\r\n        var newParams = this.copy_();\r\n        newParams.limitSet_ = true;\r\n        newParams.limit_ = newLimit;\r\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.startAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.startSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexStartValue_ = indexValue;\r\n        if (key != null) {\r\n            newParams.startNameSet_ = true;\r\n            newParams.indexStartName_ = key;\r\n        }\r\n        else {\r\n            newParams.startNameSet_ = false;\r\n            newParams.indexStartName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {*} indexValue\r\n     * @param {?string=} key\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.endAt = function (indexValue, key) {\r\n        var newParams = this.copy_();\r\n        newParams.endSet_ = true;\r\n        if (!(indexValue !== undefined)) {\r\n            indexValue = null;\r\n        }\r\n        newParams.indexEndValue_ = indexValue;\r\n        if (key !== undefined) {\r\n            newParams.endNameSet_ = true;\r\n            newParams.indexEndName_ = key;\r\n        }\r\n        else {\r\n            newParams.endNameSet_ = false;\r\n            newParams.indexEndName_ = '';\r\n        }\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @param {!Index} index\r\n     * @return {!QueryParams}\r\n     */\r\n    QueryParams.prototype.orderBy = function (index) {\r\n        var newParams = this.copy_();\r\n        newParams.index_ = index;\r\n        return newParams;\r\n    };\r\n    /**\r\n     * @return {!Object}\r\n     */\r\n    QueryParams.prototype.getQueryObject = function () {\r\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\r\n        var obj = {};\r\n        if (this.startSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\r\n            if (this.startNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\r\n            if (this.endNameSet_) {\r\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\r\n            var viewFrom = this.viewFrom_;\r\n            if (viewFrom === '') {\r\n                if (this.isViewFromLeft()) {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\r\n                }\r\n                else {\r\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\r\n                }\r\n            }\r\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\r\n        }\r\n        // For now, priority index is the default, so we only specify if it's some other index\r\n        if (this.index_ !== PRIORITY_INDEX) {\r\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\r\n        }\r\n        return obj;\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.loadsAllData = function () {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    };\r\n    /**\r\n     * @return {boolean}\r\n     */\r\n    QueryParams.prototype.isDefault = function () {\r\n        return this.loadsAllData() && this.index_ == PRIORITY_INDEX;\r\n    };\r\n    /**\r\n     * @return {!NodeFilter}\r\n     */\r\n    QueryParams.prototype.getNodeFilter = function () {\r\n        if (this.loadsAllData()) {\r\n            return new IndexedFilter(this.getIndex());\r\n        }\r\n        else if (this.hasLimit()) {\r\n            return new LimitedFilter(this);\r\n        }\r\n        else {\r\n            return new RangedFilter(this);\r\n        }\r\n    };\r\n    /**\r\n     * Returns a set of REST query string parameters representing this query.\r\n     *\r\n     * @return {!Object.<string,*>} query string parameters\r\n     */\r\n    QueryParams.prototype.toRestQueryStringParameters = function () {\r\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\r\n        var qs = {};\r\n        if (this.isDefault()) {\r\n            return qs;\r\n        }\r\n        var orderBy;\r\n        if (this.index_ === PRIORITY_INDEX) {\r\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\r\n        }\r\n        else if (this.index_ === VALUE_INDEX) {\r\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\r\n        }\r\n        else if (this.index_ === KEY_INDEX) {\r\n            orderBy = REST_CONSTANTS.KEY_INDEX;\r\n        }\r\n        else {\r\n            util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n            orderBy = this.index_.toString();\r\n        }\r\n        qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\r\n        if (this.startSet_) {\r\n            qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\r\n            if (this.startNameSet_) {\r\n                qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\r\n            }\r\n        }\r\n        if (this.endSet_) {\r\n            qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\r\n            if (this.endNameSet_) {\r\n                qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\r\n            }\r\n        }\r\n        if (this.limitSet_) {\r\n            if (this.isViewFromLeft()) {\r\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\r\n            }\r\n            else {\r\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\r\n            }\r\n        }\r\n        return qs;\r\n    };\r\n    /**\r\n     * Wire Protocol Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\r\n        INDEX_START_VALUE: 'sp',\r\n        INDEX_START_NAME: 'sn',\r\n        INDEX_END_VALUE: 'ep',\r\n        INDEX_END_NAME: 'en',\r\n        LIMIT: 'l',\r\n        VIEW_FROM: 'vf',\r\n        VIEW_FROM_LEFT: 'l',\r\n        VIEW_FROM_RIGHT: 'r',\r\n        INDEX: 'i'\r\n    };\r\n    /**\r\n     * REST Query Constants\r\n     * @const\r\n     * @enum {string}\r\n     * @private\r\n     */\r\n    QueryParams.REST_QUERY_CONSTANTS_ = {\r\n        ORDER_BY: 'orderBy',\r\n        PRIORITY_INDEX: '$priority',\r\n        VALUE_INDEX: '$value',\r\n        KEY_INDEX: '$key',\r\n        START_AT: 'startAt',\r\n        END_AT: 'endAt',\r\n        LIMIT_TO_FIRST: 'limitToFirst',\r\n        LIMIT_TO_LAST: 'limitToLast'\r\n    };\r\n    /**\r\n     * Default, empty query parameters\r\n     * @type {!QueryParams}\r\n     * @const\r\n     */\r\n    QueryParams.DEFAULT = new QueryParams();\r\n    return QueryParams;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Reference = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Reference, _super);\r\n    /**\r\n     * Call options:\r\n     *   new Reference(Repo, Path) or\r\n     *   new Reference(url: string, string|RepoManager)\r\n     *\r\n     * Externally - this is the firebase.database.Reference type.\r\n     *\r\n     * @param {!Repo} repo\r\n     * @param {(!Path)} path\r\n     * @extends {Query}\r\n     */\r\n    function Reference(repo, path) {\r\n        var _this = this;\r\n        if (!(repo instanceof Repo)) {\r\n            throw new Error('new Reference() no longer supported - use app.database().');\r\n        }\r\n        // call Query's constructor, passing in the repo and path.\r\n        _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\r\n        return _this;\r\n    }\r\n    /** @return {?string} */\r\n    Reference.prototype.getKey = function () {\r\n        util.validateArgCount('Reference.key', 0, 0, arguments.length);\r\n        if (this.path.isEmpty())\r\n            return null;\r\n        else\r\n            return this.path.getBack();\r\n    };\r\n    /**\r\n     * @param {!(string|Path)} pathString\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.child = function (pathString) {\r\n        util.validateArgCount('Reference.child', 1, 1, arguments.length);\r\n        if (typeof pathString === 'number') {\r\n            pathString = String(pathString);\r\n        }\r\n        else if (!(pathString instanceof Path)) {\r\n            if (this.path.getFront() === null)\r\n                validateRootPathString('Reference.child', 1, pathString, false);\r\n            else\r\n                validatePathString('Reference.child', 1, pathString, false);\r\n        }\r\n        return new Reference(this.repo, this.path.child(pathString));\r\n    };\r\n    /** @return {?Reference} */\r\n    Reference.prototype.getParent = function () {\r\n        util.validateArgCount('Reference.parent', 0, 0, arguments.length);\r\n        var parentPath = this.path.parent();\r\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\r\n    };\r\n    /** @return {!Reference} */\r\n    Reference.prototype.getRoot = function () {\r\n        util.validateArgCount('Reference.root', 0, 0, arguments.length);\r\n        var ref = this;\r\n        while (ref.getParent() !== null) {\r\n            ref = ref.getParent();\r\n        }\r\n        return ref;\r\n    };\r\n    /** @return {!Database} */\r\n    Reference.prototype.databaseProp = function () {\r\n        return this.repo.database;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.set = function (newVal, onComplete) {\r\n        util.validateArgCount('Reference.set', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.set', this.path);\r\n        validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\r\n        util.validateCallback('Reference.set', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, \r\n        /*priority=*/ null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {!Object} objectToMerge\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.update = function (objectToMerge, onComplete) {\r\n        util.validateArgCount('Reference.update', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.update', this.path);\r\n        if (Array.isArray(objectToMerge)) {\r\n            var newObjectToMerge = {};\r\n            for (var i = 0; i < objectToMerge.length; ++i) {\r\n                newObjectToMerge['' + i] = objectToMerge[i];\r\n            }\r\n            objectToMerge = newObjectToMerge;\r\n            warn('Passing an Array to Firebase.update() is deprecated. ' +\r\n                'Use set() if you want to overwrite the existing data, or ' +\r\n                'an Object with integer keys if you really do want to ' +\r\n                'only update some of the children.');\r\n        }\r\n        validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\r\n        util.validateCallback('Reference.update', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*} newVal\r\n     * @param {string|number|null} newPriority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\r\n        util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\r\n        validateWritablePath('Reference.setWithPriority', this.path);\r\n        validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\r\n        validatePriority('Reference.setWithPriority', 2, newPriority, false);\r\n        util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.setWithPriority failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.remove = function (onComplete) {\r\n        util.validateArgCount('Reference.remove', 0, 1, arguments.length);\r\n        validateWritablePath('Reference.remove', this.path);\r\n        util.validateCallback('Reference.remove', 1, onComplete, true);\r\n        return this.set(null, onComplete);\r\n    };\r\n    /**\r\n     * @param {function(*):*} transactionUpdate\r\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n     * @param {boolean=} applyLocally\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\r\n        util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\r\n        validateWritablePath('Reference.transaction', this.path);\r\n        util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\r\n        util.validateCallback('Reference.transaction', 2, onComplete, true);\r\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\r\n        // to expose it.\r\n        validateBoolean('Reference.transaction', 3, applyLocally, true);\r\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\r\n            throw 'Reference.transaction failed: ' +\r\n                this.getKey() +\r\n                ' is a read-only object.';\r\n        if (applyLocally === undefined)\r\n            applyLocally = true;\r\n        var deferred = new util.Deferred();\r\n        if (typeof onComplete === 'function') {\r\n            deferred.promise.catch(function () { });\r\n        }\r\n        var promiseComplete = function (error$$1, committed, snapshot) {\r\n            if (error$$1) {\r\n                deferred.reject(error$$1);\r\n            }\r\n            else {\r\n                deferred.resolve(new TransactionResult(committed, snapshot));\r\n            }\r\n            if (typeof onComplete === 'function') {\r\n                onComplete(error$$1, committed, snapshot);\r\n            }\r\n        };\r\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {string|number|null} priority\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Promise}\r\n     */\r\n    Reference.prototype.setPriority = function (priority, onComplete) {\r\n        util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\r\n        validateWritablePath('Reference.setPriority', this.path);\r\n        validatePriority('Reference.setPriority', 1, priority, false);\r\n        util.validateCallback('Reference.setPriority', 2, onComplete, true);\r\n        var deferred = new util.Deferred();\r\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\r\n        return deferred.promise;\r\n    };\r\n    /**\r\n     * @param {*=} value\r\n     * @param {function(?Error)=} onComplete\r\n     * @return {!Reference}\r\n     */\r\n    Reference.prototype.push = function (value, onComplete) {\r\n        util.validateArgCount('Reference.push', 0, 2, arguments.length);\r\n        validateWritablePath('Reference.push', this.path);\r\n        validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\r\n        util.validateCallback('Reference.push', 2, onComplete, true);\r\n        var now = this.repo.serverTime();\r\n        var name = nextPushId(now);\r\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\r\n        // We use child() to create handles to two different references. The first is turned into a\r\n        // ThennableReference below by adding then() and catch() methods and is used as the\r\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\r\n        // value of the first ThennableReference.\r\n        var thennablePushRef = this.child(name);\r\n        var pushRef = this.child(name);\r\n        var promise;\r\n        if (value != null) {\r\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\r\n        }\r\n        else {\r\n            promise = Promise.resolve(pushRef);\r\n        }\r\n        thennablePushRef.then = promise.then.bind(promise);\r\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n        if (typeof onComplete === 'function') {\r\n            promise.catch(function () { });\r\n        }\r\n        return thennablePushRef;\r\n    };\r\n    /**\r\n     * @return {!OnDisconnect}\r\n     */\r\n    Reference.prototype.onDisconnect = function () {\r\n        validateWritablePath('Reference.onDisconnect', this.path);\r\n        return new OnDisconnect(this.repo, this.path);\r\n    };\r\n    Object.defineProperty(Reference.prototype, \"database\", {\r\n        get: function () {\r\n            return this.databaseProp();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"key\", {\r\n        get: function () {\r\n            return this.getKey();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"parent\", {\r\n        get: function () {\r\n            return this.getParent();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Reference.prototype, \"root\", {\r\n        get: function () {\r\n            return this.getRoot();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Reference;\r\n}(Query));\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nQuery.__referenceConstructor = Reference;\r\nSyncPoint.__referenceConstructor = Reference;\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Node in a Tree.\r\n */\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode() {\r\n        // TODO: Consider making accessors that create children and value lazily or\r\n        // separate Internal / Leaf 'types'.\r\n        this.children = {};\r\n        this.childCount = 0;\r\n        this.value = null;\r\n    }\r\n    return TreeNode;\r\n}());\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nvar Tree = /** @class */ (function () {\r\n    /**\r\n     * @template T\r\n     * @param {string=} name_ Optional name of the node.\r\n     * @param {Tree=} parent_ Optional parent node.\r\n     * @param {TreeNode=} node_ Optional node to wrap.\r\n     */\r\n    function Tree(name_, parent_, node_) {\r\n        if (name_ === void 0) { name_ = ''; }\r\n        if (parent_ === void 0) { parent_ = null; }\r\n        if (node_ === void 0) { node_ = new TreeNode(); }\r\n        this.name_ = name_;\r\n        this.parent_ = parent_;\r\n        this.node_ = node_;\r\n    }\r\n    /**\r\n     * Returns a sub-Tree for the given path.\r\n     *\r\n     * @param {!(string|Path)} pathObj Path to look up.\r\n     * @return {!Tree.<T>} Tree for path.\r\n     */\r\n    Tree.prototype.subTree = function (pathObj) {\r\n        // TODO: Require pathObj to be Path?\r\n        var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n        var child = this, next;\r\n        while ((next = path.getFront()) !== null) {\r\n            var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\r\n            child = new Tree(next, child, childNode);\r\n            path = path.popFront();\r\n        }\r\n        return child;\r\n    };\r\n    /**\r\n     * Returns the data associated with this tree node.\r\n     *\r\n     * @return {?T} The data or null if no data exists.\r\n     */\r\n    Tree.prototype.getValue = function () {\r\n        return this.node_.value;\r\n    };\r\n    /**\r\n     * Sets data to this tree node.\r\n     *\r\n     * @param {!T} value Value to set.\r\n     */\r\n    Tree.prototype.setValue = function (value) {\r\n        util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\r\n        this.node_.value = value;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * Clears the contents of the tree node (its value and all children).\r\n     */\r\n    Tree.prototype.clear = function () {\r\n        this.node_.value = null;\r\n        this.node_.children = {};\r\n        this.node_.childCount = 0;\r\n        this.updateParents_();\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree has any children.\r\n     */\r\n    Tree.prototype.hasChildren = function () {\r\n        return this.node_.childCount > 0;\r\n    };\r\n    /**\r\n     * @return {boolean} Whether the tree is empty (no value or children).\r\n     */\r\n    Tree.prototype.isEmpty = function () {\r\n        return this.getValue() === null && !this.hasChildren();\r\n    };\r\n    /**\r\n     * Calls action for each child of this tree node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachChild = function (action) {\r\n        var _this = this;\r\n        util.forEach(this.node_.children, function (child, childTree) {\r\n            action(new Tree(child, _this, childTree));\r\n        });\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n     *   false.\r\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n     *   parent.\r\n     */\r\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\r\n        if (includeSelf && !childrenFirst)\r\n            action(this);\r\n        this.forEachChild(function (child) {\r\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\r\n        });\r\n        if (includeSelf && childrenFirst)\r\n            action(this);\r\n    };\r\n    /**\r\n     * Calls action on each ancestor node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n     *   true to abort.\r\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n     * @return {boolean} true if the action callback returned true.\r\n     */\r\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\r\n        var node = includeSelf ? this : this.parent();\r\n        while (node !== null) {\r\n            if (action(node)) {\r\n                return true;\r\n            }\r\n            node = node.parent();\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n     * is found, action is called on it and traversal does not continue inside the node.\r\n     * Action is *not* called on this node.\r\n     *\r\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n     */\r\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\r\n        this.forEachChild(function (child) {\r\n            if (child.getValue() !== null)\r\n                action(child);\r\n            else\r\n                child.forEachImmediateDescendantWithValue(action);\r\n        });\r\n    };\r\n    /**\r\n     * @return {!Path} The path of this tree node, as a Path.\r\n     */\r\n    Tree.prototype.path = function () {\r\n        return new Path(this.parent_ === null\r\n            ? this.name_\r\n            : this.parent_.path() + '/' + this.name_);\r\n    };\r\n    /**\r\n     * @return {string} The name of the tree node.\r\n     */\r\n    Tree.prototype.name = function () {\r\n        return this.name_;\r\n    };\r\n    /**\r\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n     */\r\n    Tree.prototype.parent = function () {\r\n        return this.parent_;\r\n    };\r\n    /**\r\n     * Adds or removes this child from its parent based on whether it's empty or not.\r\n     *\r\n     * @private\r\n     */\r\n    Tree.prototype.updateParents_ = function () {\r\n        if (this.parent_ !== null)\r\n            this.parent_.updateChild_(this.name_, this);\r\n    };\r\n    /**\r\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n     *\r\n     * @param {string} childName The name of the child to update.\r\n     * @param {!Tree.<T>} child The child to update.\r\n     * @private\r\n     */\r\n    Tree.prototype.updateChild_ = function (childName, child) {\r\n        var childEmpty = child.isEmpty();\r\n        var childExists = util.contains(this.node_.children, childName);\r\n        if (childEmpty && childExists) {\r\n            delete this.node_.children[childName];\r\n            this.node_.childCount--;\r\n            this.updateParents_();\r\n        }\r\n        else if (!childEmpty && !childExists) {\r\n            this.node_.children[childName] = child.node_;\r\n            this.node_.childCount++;\r\n            this.updateParents_();\r\n        }\r\n    };\r\n    return Tree;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\r\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\r\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\r\n// For now it's part of Repo, but in its own file.\r\n/**\r\n * @enum {number}\r\n */\r\nvar TransactionStatus;\r\n(function (TransactionStatus) {\r\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\r\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\r\n    // mismatched hash.\r\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\r\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\r\n    // or rejected yet).\r\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\r\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\r\n    // removed when we get a chance to prune completed ones.\r\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\r\n    // If it comes back as unsuccessful, we'll abort it.\r\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\r\n    // Temporary state used to mark transactions that need to be aborted.\r\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\r\n})(TransactionStatus || (TransactionStatus = {}));\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\r\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\r\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\r\nRepo.prototype.transactions_init_ = function () {\r\n    /**\r\n     * Stores queues of outstanding transactions for Firebase locations.\r\n     *\r\n     * @type {!Tree.<Array.<!Transaction>>}\r\n     * @private\r\n     */\r\n    this.transactionQueueTree_ = new Tree();\r\n};\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\r\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\r\n    this.log_('transaction on ' + path);\r\n    // Add a watch to make sure we get server updates.\r\n    var valueCallback = function () { };\r\n    var watchRef = new Reference(this, path);\r\n    watchRef.on('value', valueCallback);\r\n    var unwatcher = function () {\r\n        watchRef.off('value', valueCallback);\r\n    };\r\n    // Initialize transaction.\r\n    var transaction = {\r\n        path: path,\r\n        update: transactionUpdate,\r\n        onComplete: onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally: applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher: unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    var currentState = this.getLatestState_(path);\r\n    transaction.currentInputSnapshot = currentState;\r\n    var newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            // We just set the input snapshot, so this cast should be safe\r\n            var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\r\n            transaction.onComplete(null, false, snapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = TransactionStatus.RUN;\r\n        var queueNode = this.transactionQueueTree_.subTree(path);\r\n        var nodeQueue = queueNode.getValue() || [];\r\n        nodeQueue.push(transaction);\r\n        queueNode.setValue(nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\r\n        // start new transactions from the event callbacks.\r\n        var priorityForNode = void 0;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            util.contains(newVal, '.priority')) {\r\n            priorityForNode = util.safeGet(newVal, '.priority');\r\n            util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\r\n        var serverValues = this.generateServerValues();\r\n        var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\r\n        var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = this.getNextWriteId_();\r\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        this.sendReadyTransactions_();\r\n    }\r\n};\r\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\r\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\r\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n};\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\r\nRepo.prototype.sendReadyTransactions_ = function (node) {\r\n    var _this = this;\r\n    if (node === void 0) { node = this.transactionQueueTree_; }\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        this.pruneCompletedTransactionsBelowNode_(node);\r\n    }\r\n    if (node.getValue() !== null) {\r\n        var queue = this.buildTransactionQueue_(node);\r\n        util.assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            this.sendTransactionQueue_(node.path(), queue);\r\n        }\r\n    }\r\n    else if (node.hasChildren()) {\r\n        node.forEachChild(function (childNode) {\r\n            _this.sendReadyTransactions_(childNode);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\r\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\r\n    var _this = this;\r\n    // Mark transactions as sent and increment retry count!\r\n    var setsToIgnore = queue.map(function (txn) {\r\n        return txn.currentWriteId;\r\n    });\r\n    var latestState = this.getLatestState_(path, setsToIgnore);\r\n    var snapToSend = latestState;\r\n    var latestHash = latestState.hash();\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var txn = queue[i];\r\n        util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = TransactionStatus.SENT;\r\n        txn.retryCount++;\r\n        var relativePath = Path.relativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    var dataToSend = snapToSend.val(true);\r\n    var pathToSend = path;\r\n    // Send the put.\r\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\r\n        _this.log_('transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status: status\r\n        });\r\n        var events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n            // the callback could trigger more transactions or sets.\r\n            var callbacks = [];\r\n            for (var i = 0; i < queue.length; i++) {\r\n                queue[i].status = TransactionStatus.COMPLETED;\r\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\r\n                    var node = queue[i].currentOutputSnapshotResolved;\r\n                    var ref = new Reference(_this, queue[i].path);\r\n                    var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\r\n            // There may be pending transactions that we can now send.\r\n            _this.sendReadyTransactions_();\r\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (var i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\r\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    else\r\n                        queue[i].status = TransactionStatus.RUN;\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (var i = 0; i < queue.length; i++) {\r\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            _this.rerunTransactions_(path);\r\n        }\r\n    }, latestHash);\r\n};\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactions_ = function (changedPath) {\r\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\r\n    var path = rootMostTransactionNode.path();\r\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\r\n    this.rerunTransactionQueue_(queue, path);\r\n    return path;\r\n};\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\r\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n    // the callback could trigger more transactions or sets.\r\n    var callbacks = [];\r\n    var events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    var txnsToRerun = queue.filter(function (q) {\r\n        return q.status === TransactionStatus.RUN;\r\n    });\r\n    var setsToIgnore = txnsToRerun.map(function (q) {\r\n        return q.currentWriteId;\r\n    });\r\n    for (var i = 0; i < queue.length; i++) {\r\n        var transaction = queue[i];\r\n        var relativePath = Path.relativePath(path, transaction.path);\r\n        var abortTransaction = false, abortReason = void 0;\r\n        util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === TransactionStatus.RUN) {\r\n            if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                var newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    var newDataNode = nodeFromJSON$1(newData);\r\n                    var hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        util.contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    var oldWriteId = transaction.currentWriteId;\r\n                    var serverValues = this.generateServerValues();\r\n                    var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = this.getNextWriteId_();\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = TransactionStatus.COMPLETED;\r\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\r\n            // So defer the unwatcher until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    var ref = new Reference(this, queue[i].path);\r\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\r\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\r\n                    var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\r\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (var i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    this.sendReadyTransactions_();\r\n};\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\r\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\r\n    var front;\r\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\r\n    var transactionNode = this.transactionQueueTree_;\r\n    while ((front = path.getFront()) !== null &&\r\n        transactionNode.getValue() === null) {\r\n        transactionNode = transactionNode.subTree(front);\r\n        path = path.popFront();\r\n    }\r\n    return transactionNode;\r\n};\r\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\r\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    var transactionQueue = [];\r\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort(function (a, b) {\r\n        return a.order - b.order;\r\n    });\r\n    return transactionQueue;\r\n};\r\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\r\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\r\n    var _this = this;\r\n    var nodeQueue = node.getValue();\r\n    if (nodeQueue !== null) {\r\n        for (var i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    node.forEachChild(function (child) {\r\n        _this.aggregateTransactionQueuesForNode_(child, queue);\r\n    });\r\n};\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\r\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\r\n    var _this = this;\r\n    var queue = node.getValue();\r\n    if (queue) {\r\n        var to = 0;\r\n        for (var from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        node.setValue(queue.length > 0 ? queue : null);\r\n    }\r\n    node.forEachChild(function (childNode) {\r\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\r\n    });\r\n};\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\r\nRepo.prototype.abortTransactions_ = function (path) {\r\n    var _this = this;\r\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\r\n    var transactionNode = this.transactionQueueTree_.subTree(path);\r\n    transactionNode.forEachAncestor(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    this.abortTransactionsOnNode_(transactionNode);\r\n    transactionNode.forEachDescendant(function (node) {\r\n        _this.abortTransactionsOnNode_(node);\r\n    });\r\n    return affectedPath;\r\n};\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\r\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\r\n    var queue = node.getValue();\r\n    if (queue !== null) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\r\n        // the callback could trigger more transactions or sets.\r\n        var callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\r\n        // can be immediately aborted and removed.\r\n        var events = [];\r\n        var lastSent = -1;\r\n        for (var i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\r\n                // Already marked.  No action needed.\r\n            }\r\n            else if (queue[i].status === TransactionStatus.SENT) {\r\n                util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    var snapshot = null;\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            node.setValue(null);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\r\n        for (var i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n};\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** @const {string} */\r\nvar DATABASE_URL_OPTION = 'databaseURL';\r\nvar _staticInstance;\r\n/**\r\n * Creates and caches Repo instances.\r\n */\r\nvar RepoManager = /** @class */ (function () {\r\n    function RepoManager() {\r\n        /**\r\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n         */\r\n        this.repos_ = {};\r\n        /**\r\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n         * @private {boolean}\r\n         */\r\n        this.useRestClient_ = false;\r\n    }\r\n    RepoManager.getInstance = function () {\r\n        if (!_staticInstance) {\r\n            _staticInstance = new RepoManager();\r\n        }\r\n        return _staticInstance;\r\n    };\r\n    // TODO(koss): Remove these functions unless used in tests?\r\n    RepoManager.prototype.interrupt = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].interrupt();\r\n            }\r\n        }\r\n    };\r\n    RepoManager.prototype.resume = function () {\r\n        for (var appName in this.repos_) {\r\n            for (var dbUrl in this.repos_[appName]) {\r\n                this.repos_[appName][dbUrl].resume();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This function should only ever be called to CREATE a new database instance.\r\n     *\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Database}\r\n     */\r\n    RepoManager.prototype.databaseFromApp = function (app, url) {\r\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\r\n        if (dbUrl === undefined) {\r\n            fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\r\n                DATABASE_URL_OPTION +\r\n                ' option when calling firebase.initializeApp().');\r\n        }\r\n        var parsedUrl = parseRepoInfo(dbUrl);\r\n        var repoInfo = parsedUrl.repoInfo;\r\n        validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\r\n        if (!parsedUrl.path.isEmpty()) {\r\n            fatal('Database URL must point to the root of a Firebase Database ' +\r\n                '(not including a child path).');\r\n        }\r\n        var repo = this.createRepo(repoInfo, app);\r\n        return repo.database;\r\n    };\r\n    /**\r\n     * Remove the repo and make sure it is disconnected.\r\n     *\r\n     * @param {!Repo} repo\r\n     */\r\n    RepoManager.prototype.deleteRepo = function (repo) {\r\n        var appRepos = util.safeGet(this.repos_, repo.app.name);\r\n        // This should never happen...\r\n        if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\r\n            fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\r\n        }\r\n        repo.interrupt();\r\n        delete appRepos[repo.repoInfo_.toURLString()];\r\n    };\r\n    /**\r\n     * Ensures a repo doesn't already exist and then creates one using the\r\n     * provided app.\r\n     *\r\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n     * @param {!FirebaseApp} app\r\n     * @return {!Repo} The Repo object for the specified server / repoName.\r\n     */\r\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\r\n        var appRepos = util.safeGet(this.repos_, app.name);\r\n        if (!appRepos) {\r\n            appRepos = {};\r\n            this.repos_[app.name] = appRepos;\r\n        }\r\n        var repo = util.safeGet(appRepos, repoInfo.toURLString());\r\n        if (repo) {\r\n            fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n        }\r\n        repo = new Repo(repoInfo, this.useRestClient_, app);\r\n        appRepos[repoInfo.toURLString()] = repo;\r\n        return repo;\r\n    };\r\n    /**\r\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n     * @param {boolean} forceRestClient\r\n     */\r\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\r\n        this.useRestClient_ = forceRestClient;\r\n    };\r\n    return RepoManager;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\r\nvar Database = /** @class */ (function () {\r\n    /**\r\n     * The constructor should not be called by users of our public API.\r\n     * @param {!Repo} repo_\r\n     */\r\n    function Database(repo_) {\r\n        this.repo_ = repo_;\r\n        if (!(repo_ instanceof Repo)) {\r\n            fatal(\"Don't call new Database() directly - please use firebase.database().\");\r\n        }\r\n        /** @type {Reference} */\r\n        this.root_ = new Reference(repo_, Path.Empty);\r\n        this.INTERNAL = new DatabaseInternals(this);\r\n    }\r\n    Object.defineProperty(Database.prototype, \"app\", {\r\n        get: function () {\r\n            return this.repo_.app;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Database.prototype.ref = function (path) {\r\n        this.checkDeleted_('ref');\r\n        util.validateArgCount('database.ref', 0, 1, arguments.length);\r\n        if (path instanceof Reference) {\r\n            return this.refFromURL(path.toString());\r\n        }\r\n        return path !== undefined ? this.root_.child(path) : this.root_;\r\n    };\r\n    /**\r\n     * Returns a reference to the root or the path specified in url.\r\n     * We throw a exception if the url is not in the same domain as the\r\n     * current repo.\r\n     * @param {string} url\r\n     * @return {!Reference} Firebase reference.\r\n     */\r\n    Database.prototype.refFromURL = function (url) {\r\n        /** @const {string} */\r\n        var apiName = 'database.refFromURL';\r\n        this.checkDeleted_(apiName);\r\n        util.validateArgCount(apiName, 1, 1, arguments.length);\r\n        var parsedURL = parseRepoInfo(url);\r\n        validateUrl(apiName, 1, parsedURL);\r\n        var repoInfo = parsedURL.repoInfo;\r\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\r\n            fatal(apiName +\r\n                ': Host name does not match the current database: ' +\r\n                '(found ' +\r\n                repoInfo.host +\r\n                ' but expected ' +\r\n                this.repo_.repoInfo_.host +\r\n                ')');\r\n        }\r\n        return this.ref(parsedURL.path.toString());\r\n    };\r\n    /**\r\n     * @param {string} apiName\r\n     */\r\n    Database.prototype.checkDeleted_ = function (apiName) {\r\n        if (this.repo_ === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    };\r\n    // Make individual repo go offline.\r\n    Database.prototype.goOffline = function () {\r\n        util.validateArgCount('database.goOffline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOffline');\r\n        this.repo_.interrupt();\r\n    };\r\n    Database.prototype.goOnline = function () {\r\n        util.validateArgCount('database.goOnline', 0, 0, arguments.length);\r\n        this.checkDeleted_('goOnline');\r\n        this.repo_.resume();\r\n    };\r\n    Database.ServerValue = {\r\n        TIMESTAMP: {\r\n            '.sv': 'timestamp'\r\n        }\r\n    };\r\n    return Database;\r\n}());\r\nvar DatabaseInternals = /** @class */ (function () {\r\n    /** @param {!Database} database */\r\n    function DatabaseInternals(database) {\r\n        this.database = database;\r\n    }\r\n    /** @return {Promise<void>} */\r\n    DatabaseInternals.prototype.delete = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                this.database.checkDeleted_('delete');\r\n                RepoManager.getInstance().deleteRepo(this.database.repo_);\r\n                this.database.repo_ = null;\r\n                this.database.root_ = null;\r\n                this.database.INTERNAL = null;\r\n                this.database = null;\r\n                return [2 /*return*/];\r\n            });\r\n        });\r\n    };\r\n    return DatabaseInternals;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\r\nvar forceLongPolling = function () {\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n};\r\nvar forceWebSockets = function () {\r\n    BrowserPollConnection.forceDisallow();\r\n};\r\n/* Used by App Manager */\r\nvar isWebSocketsAvailable = function () {\r\n    return WebSocketConnection['isAvailable']();\r\n};\r\nvar setSecurityDebugCallback = function (ref, callback) {\r\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\r\n};\r\nvar stats = function (ref, showDelta) {\r\n    ref.repo.stats(showDelta);\r\n};\r\nvar statsIncrementCounter = function (ref, metric) {\r\n    ref.repo.statsIncrementCounter(metric);\r\n};\r\nvar dataUpdateCount = function (ref) {\r\n    return ref.repo.dataUpdateCount;\r\n};\r\nvar interceptServerData = function (ref, callback) {\r\n    return ref.repo.interceptServerData_(callback);\r\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar DataConnection = PersistentConnection;\r\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nvar RealTimeConnection = Connection;\r\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\r\nvar hijackHash = function (newHash) {\r\n    var oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\r\n        if (opt_hash !== undefined) {\r\n            opt_hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\r\nvar ConnectionTarget = RepoInfo;\r\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\r\nvar queryIdentifier = function (query) {\r\n    return query.queryIdentifier();\r\n};\r\n/**\r\n * @param {!Query} firebaseRef\r\n * @return {!Object}\r\n */\r\nvar listens = function (firebaseRef) {\r\n    return firebaseRef.repo.persistentConnection_.listens_;\r\n};\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\r\nvar forceRestClient = function (forceRestClient) {\r\n    RepoManager.getInstance().forceRestClient(forceRestClient);\r\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  listens: listens,\n  forceRestClient: forceRestClient\n});\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar ServerValue = Database.ServerValue;\r\nfunction registerDatabase(instance) {\r\n    // Register the Database Service with the 'firebase' namespace.\r\n    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager.getInstance().databaseFromApp(app, url); }, \r\n    // firebase.database namespace properties\r\n    {\r\n        Reference: Reference,\r\n        Query: Query,\r\n        Database: Database,\r\n        enableLogging: enableLogging,\r\n        INTERNAL: INTERNAL,\r\n        ServerValue: ServerValue,\r\n        TEST_ACCESS: TEST_ACCESS\r\n    }, null, true);\r\n    if (util.isNodeSdk()) {\r\n        module.exports = namespace;\r\n    }\r\n}\r\nregisterDatabase(firebase);\n\nexports.registerDatabase = registerDatabase;\nexports.Database = Database;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.enableLogging = enableLogging;\nexports.ServerValue = ServerValue;\nexports.DataSnapshot = DataSnapshot;\nexports.OnDisconnect = OnDisconnect;\n","/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A container for all of the Logger instances\r\n */\r\nvar instances = [];\r\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\r\n    LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\r\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\r\n})(LogLevel || (LogLevel = {}));\r\n/**\r\n * The default log level\r\n */\r\nvar defaultLogLevel = LogLevel.INFO;\r\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\r\nvar defaultLogHandler = function (instance, logType) {\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    if (logType < instance.logLevel)\r\n        return;\r\n    var now = new Date().toISOString();\r\n    switch (logType) {\r\n        /**\r\n         * By default, `console.debug` is not displayed in the developer console (in\r\n         * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n         * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n         * logs to the `console.log` function.\r\n         */\r\n        case LogLevel.DEBUG:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.VERBOSE:\r\n            console.log.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.INFO:\r\n            console.info.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.WARN:\r\n            console.warn.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        case LogLevel.ERROR:\r\n            console.error.apply(console, [\"[\" + now + \"]  \" + instance.name + \":\"].concat(args));\r\n            break;\r\n        default:\r\n            throw new Error(\"Attempted to log a message with an invalid logType (value: \" + logType + \")\");\r\n    }\r\n};\r\nvar Logger = /** @class */ (function () {\r\n    /**\r\n     * Gives you an instance of a Logger to capture messages according to\r\n     * Firebase's logging scheme.\r\n     *\r\n     * @param name The name that the logs will be associated with\r\n     */\r\n    function Logger(name) {\r\n        this.name = name;\r\n        /**\r\n         * The log level of the given Logger instance.\r\n         */\r\n        this._logLevel = defaultLogLevel;\r\n        /**\r\n         * The log handler for the Logger instance.\r\n         */\r\n        this._logHandler = defaultLogHandler;\r\n        /**\r\n         * Capture the current instance for later use\r\n         */\r\n        instances.push(this);\r\n    }\r\n    Object.defineProperty(Logger.prototype, \"logLevel\", {\r\n        get: function () {\r\n            return this._logLevel;\r\n        },\r\n        set: function (val) {\r\n            if (!(val in LogLevel)) {\r\n                throw new TypeError('Invalid value assigned to `logLevel`');\r\n            }\r\n            this._logLevel = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Logger.prototype, \"logHandler\", {\r\n        get: function () {\r\n            return this._logHandler;\r\n        },\r\n        set: function (val) {\r\n            if (typeof val !== 'function') {\r\n                throw new TypeError('Value assigned to `logHandler` must be a function');\r\n            }\r\n            this._logHandler = val;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\r\n    Logger.prototype.debug = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\r\n    };\r\n    Logger.prototype.log = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\r\n    };\r\n    Logger.prototype.info = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\r\n    };\r\n    Logger.prototype.warn = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\r\n    };\r\n    Logger.prototype.error = function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\r\n    };\r\n    return Logger;\r\n}());\n\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction setLogLevel(level) {\r\n    instances.forEach(function (inst) {\r\n        inst.logLevel = level;\r\n    });\r\n}\n\nexport { setLogLevel, Logger, LogLevel };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"],"sourceRoot":""}